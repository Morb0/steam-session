// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `custom.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    // message fields
    device_friendly_name: ::protobuf::SingularField<::std::string::String>,
    account_name: ::protobuf::SingularField<::std::string::String>,
    encrypted_password: ::protobuf::SingularField<::std::string::String>,
    encryption_timestamp: ::std::option::Option<u64>,
    remember_login: ::std::option::Option<bool>,
    platform_type: ::std::option::Option<super::steammessages_auth_steamclient::EAuthTokenPlatformType>,
    persistence: ::std::option::Option<super::enums::ESessionPersistence>,
    website_id: ::protobuf::SingularField<::std::string::String>,
    pub device_details: ::protobuf::SingularPtrField<super::steammessages_auth_steamclient::CAuthentication_DeviceDetails>,
    guard_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    language: ::std::option::Option<u32>,
    qos_level: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
        <CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    pub fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;


    pub fn get_device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name.clear();
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name.set_default();
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string account_name = 2;


    pub fn get_account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name.set_default();
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string encrypted_password = 3;


    pub fn get_encrypted_password(&self) -> &str {
        match self.encrypted_password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_encrypted_password(&mut self) {
        self.encrypted_password.clear();
    }

    pub fn has_encrypted_password(&self) -> bool {
        self.encrypted_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_password(&mut self, v: ::std::string::String) {
        self.encrypted_password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_password(&mut self) -> &mut ::std::string::String {
        if self.encrypted_password.is_none() {
            self.encrypted_password.set_default();
        }
        self.encrypted_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_password(&mut self) -> ::std::string::String {
        self.encrypted_password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 encryption_timestamp = 4;


    pub fn get_encryption_timestamp(&self) -> u64 {
        self.encryption_timestamp.unwrap_or(0)
    }
    pub fn clear_encryption_timestamp(&mut self) {
        self.encryption_timestamp = ::std::option::Option::None;
    }

    pub fn has_encryption_timestamp(&self) -> bool {
        self.encryption_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_timestamp(&mut self, v: u64) {
        self.encryption_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool remember_login = 5;


    pub fn get_remember_login(&self) -> bool {
        self.remember_login.unwrap_or(false)
    }
    pub fn clear_remember_login(&mut self) {
        self.remember_login = ::std::option::Option::None;
    }

    pub fn has_remember_login(&self) -> bool {
        self.remember_login.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remember_login(&mut self, v: bool) {
        self.remember_login = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 6;


    pub fn get_platform_type(&self) -> super::steammessages_auth_steamclient::EAuthTokenPlatformType {
        self.platform_type.unwrap_or(super::steammessages_auth_steamclient::EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: super::steammessages_auth_steamclient::EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence persistence = 7;


    pub fn get_persistence(&self) -> super::enums::ESessionPersistence {
        self.persistence.unwrap_or(super::enums::ESessionPersistence::k_ESessionPersistence_Persistent)
    }
    pub fn clear_persistence(&mut self) {
        self.persistence = ::std::option::Option::None;
    }

    pub fn has_persistence(&self) -> bool {
        self.persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.persistence = ::std::option::Option::Some(v);
    }

    // optional string website_id = 8;


    pub fn get_website_id(&self) -> &str {
        match self.website_id.as_ref() {
            Some(v) => &v,
            None => "Unknown",
        }
    }
    pub fn clear_website_id(&mut self) {
        self.website_id.clear();
    }

    pub fn has_website_id(&self) -> bool {
        self.website_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_website_id(&mut self, v: ::std::string::String) {
        self.website_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website_id(&mut self) -> &mut ::std::string::String {
        if self.website_id.is_none() {
            self.website_id.set_default();
        }
        self.website_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_website_id(&mut self) -> ::std::string::String {
        self.website_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CAuthentication_DeviceDetails device_details = 9;


    pub fn get_device_details(&self) -> &super::steammessages_auth_steamclient::CAuthentication_DeviceDetails {
        self.device_details.as_ref().unwrap_or_else(|| <super::steammessages_auth_steamclient::CAuthentication_DeviceDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_device_details(&mut self) {
        self.device_details.clear();
    }

    pub fn has_device_details(&self) -> bool {
        self.device_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_details(&mut self, v: super::steammessages_auth_steamclient::CAuthentication_DeviceDetails) {
        self.device_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_details(&mut self) -> &mut super::steammessages_auth_steamclient::CAuthentication_DeviceDetails {
        if self.device_details.is_none() {
            self.device_details.set_default();
        }
        self.device_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_details(&mut self) -> super::steammessages_auth_steamclient::CAuthentication_DeviceDetails {
        self.device_details.take().unwrap_or_else(|| super::steammessages_auth_steamclient::CAuthentication_DeviceDetails::new())
    }

    // optional bytes guard_data = 10;


    pub fn get_guard_data(&self) -> &[u8] {
        match self.guard_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_guard_data(&mut self) {
        self.guard_data.clear();
    }

    pub fn has_guard_data(&self) -> bool {
        self.guard_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guard_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.guard_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guard_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.guard_data.is_none() {
            self.guard_data.set_default();
        }
        self.guard_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_guard_data(&mut self) -> ::std::vec::Vec<u8> {
        self.guard_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 language = 11;


    pub fn get_language(&self) -> u32 {
        self.language.unwrap_or(0)
    }
    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: u32) {
        self.language = ::std::option::Option::Some(v);
    }

    // optional int32 qos_level = 12;


    pub fn get_qos_level(&self) -> i32 {
        self.qos_level.unwrap_or(2i32)
    }
    pub fn clear_qos_level(&mut self) {
        self.qos_level = ::std::option::Option::None;
    }

    pub fn has_qos_level(&self) -> bool {
        self.qos_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_qos_level(&mut self, v: i32) {
        self.qos_level = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    fn is_initialized(&self) -> bool {
        for v in &self.device_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_friendly_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.encrypted_password)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.encryption_timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remember_login = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.persistence, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.website_id)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_details)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.guard_data)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.language = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.qos_level = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.encrypted_password.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.encryption_timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.remember_login {
            my_size += 2;
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.persistence {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.website_id.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(ref v) = self.device_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.guard_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10, &v);
        }
        if let Some(v) = self.language {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.qos_level {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.encrypted_password.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.encryption_timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.remember_login {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.persistence {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.website_id.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(ref v) = self.device_details.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.guard_data.as_ref() {
            os.write_bytes(10, &v)?;
        }
        if let Some(v) = self.language {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.qos_level {
            os.write_int32(12, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
        CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_friendly_name",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.device_friendly_name },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.device_friendly_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_name",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.account_name },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.account_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encrypted_password",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.encrypted_password },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.encrypted_password },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "encryption_timestamp",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.encryption_timestamp },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.encryption_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remember_login",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.remember_login },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.remember_login },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::steammessages_auth_steamclient::EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.platform_type },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::enums::ESessionPersistence>>(
                "persistence",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.persistence },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.persistence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "website_id",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.website_id },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.website_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::steammessages_auth_steamclient::CAuthentication_DeviceDetails>>(
                "device_details",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.device_details },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.device_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "guard_data",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.guard_data },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.guard_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "language",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.language },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "qos_level",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &m.qos_level },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData| { &mut m.qos_level },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData>(
                "CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData::new)
    }
}

impl ::protobuf::Clear for CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    fn clear(&mut self) {
        self.device_friendly_name.clear();
        self.account_name.clear();
        self.encrypted_password.clear();
        self.encryption_timestamp = ::std::option::Option::None;
        self.remember_login = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.persistence = ::std::option::Option::None;
        self.website_id.clear();
        self.device_details.clear();
        self.guard_data.clear();
        self.language = ::std::option::Option::None;
        self.qos_level = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccustom.proto\x1a\x18steammessages_base.proto\x1a,steammessages_uni\
    fied_base.steamclient.proto\x1a\x0benums.proto\x1a$steammessages_auth.st\
    eamclient.proto\"\xbf\x08\nFCAuthentication_BeginAuthSessionViaCredentia\
    ls_Request_BinaryGuardData\x120\n\x14device_friendly_name\x18\x01\x20\
    \x01(\tR\x12deviceFriendlyName\x12!\n\x0caccount_name\x18\x02\x20\x01(\t\
    R\x0baccountName\x12V\n\x12encrypted_password\x18\x03\x20\x01(\tR\x11enc\
    ryptedPasswordB'\x82\xb5\x18#password,\x20RSA\x20encrypted\x20client\x20\
    side\x12X\n\x14encryption_timestamp\x18\x04\x20\x01(\x04R\x13encryptionT\
    imestampB%\x82\xb5\x18!timestamp\x20to\x20map\x20to\x20a\x20key\x20-\x20\
    STime\x125\n\x0eremember_login\x18\x05\x20\x01(\x08R\rrememberLoginB\x0e\
    \x82\xb5\x18\ndeprecated\x12^\n\rplatform_type\x18\x06\x20\x01(\x0e2\x17\
    .EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\x0cplatfor\
    mType\x12\x9c\x01\n\x0bpersistence\x18\x07\x20\x01(\x0e2\x14.ESessionPer\
    sistence:\x20k_ESessionPersistence_PersistentR\x0bpersistenceBB\x82\xb5\
    \x18>whether\x20we\x20are\x20requesting\x20a\x20persistent\x20or\x20an\
    \x20ephemeral\x20session\x12h\n\nwebsite_id\x18\x08\x20\x01(\t:\x07Unkno\
    wnR\twebsiteIdB@\x82\xb5\x18<(EMachineAuthWebDomain)\x20identifier\x20of\
    \x20client\x20requesting\x20auth\x12\x87\x01\n\x0edevice_details\x18\t\
    \x20\x01(\x0b2\x1e.CAuthentication_DeviceDetailsR\rdeviceDetailsB@\x82\
    \xb5\x18<User-supplied\x20details\x20about\x20the\x20device\x20attemptin\
    g\x20to\x20sign\x20in\x12D\n\nguard_data\x18\n\x20\x01(\x0cR\tguardDataB\
    %\x82\xb5\x18!steam\x20guard\x20data\x20for\x20client\x20login\x12\x1a\n\
    \x08language\x18\x0b\x20\x01(\rR\x08language\x12b\n\tqos_level\x18\x0c\
    \x20\x01(\x05:\x012R\x08qosLevelBB\x82\xb5\x18>[ENetQOSLevel]\x20client-\
    specified\x20priority\x20for\x20this\x20auth\x20attemptB\x03\x80\x01\x01\
    J\xe5\t\n\x06\x12\x04\0\0\x14\x01\n\t\n\x02\x03\0\x12\x03\0\x07!\n\t\n\
    \x02\x03\x01\x12\x03\x01\x075\n\t\n\x02\x03\x02\x12\x03\x02\x07\x14\n\t\
    \n\x02\x03\x03\x12\x03\x03\x07-\n\x08\n\x01\x08\x12\x03\x05\0\"\n\t\n\
    \x02\x08\x10\x12\x03\x05\0\"\n\n\n\x02\x04\0\x12\x04\x07\0\x14\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x07\x08N\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02+\
    \n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x08\x02\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x08\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x12&\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08)*\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\t\x02#\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\t\x02\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\t\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\t\x12\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t!\"\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\n\x02a\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\n\
    \x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\n\x12$\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n'(\n\
    \x0c\n\x05\x04\0\x02\x02\x08\x12\x03\n)`\n\x0f\n\x08\x04\0\x02\x02\x08\
    \xd0\x86\x03\x12\x03\n*_\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0b\x02a\n\
    \x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x12&\
    \n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0b)*\n\x0c\n\x05\x04\0\x02\x03\
    \x08\x12\x03\x0b+`\n\x0f\n\x08\x04\0\x02\x03\x08\xd0\x86\x03\x12\x03\x0b\
    ,_\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0c\x02B\n\x0c\n\x05\x04\0\x02\x04\
    \x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0c\x0b\x0f\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0c\x10\x1e\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x0c!\"\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x0c#A\n\
    \x0f\n\x08\x04\0\x02\x04\x08\xd0\x86\x03\x12\x03\x0c$@\n\x0b\n\x04\x04\0\
    \x02\x05\x12\x03\r\x02b\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\r\x02\n\n\
    \x0c\n\x05\x04\0\x02\x05\x06\x12\x03\r\x0b\"\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03\r#0\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\r34\n\x0c\n\x05\
    \x04\0\x02\x05\x08\x12\x03\r5a\n\x0c\n\x05\x04\0\x02\x05\x07\x12\x03\r@`\
    \n\x0c\n\x04\x04\0\x02\x06\x12\x04\x0e\x02\xaf\x01\n\x0c\n\x05\x04\0\x02\
    \x06\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x0e\x0b\
    \x1f\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0e\x20+\n\x0c\n\x05\x04\0\
    \x02\x06\x03\x12\x03\x0e./\n\r\n\x05\x04\0\x02\x06\x08\x12\x04\x0e0\xae\
    \x01\n\x0c\n\x05\x04\0\x02\x06\x07\x12\x03\x0e;[\n\x10\n\x08\x04\0\x02\
    \x06\x08\xd0\x86\x03\x12\x04\x0e]\xad\x01\n\x0c\n\x04\x04\0\x02\x07\x12\
    \x04\x0f\x02\x87\x01\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03\x0f\x02\n\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0f\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \x07\x01\x12\x03\x0f\x12\x1c\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0f\
    \x1f\x20\n\r\n\x05\x04\0\x02\x07\x08\x12\x04\x0f!\x86\x01\n\x0c\n\x05\
    \x04\0\x02\x07\x07\x12\x03\x0f,5\n\x10\n\x08\x04\0\x02\x07\x08\xd0\x86\
    \x03\x12\x04\x0f7\x85\x01\n\x0c\n\x04\x04\0\x02\x08\x12\x04\x10\x02\x8e\
    \x01\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\0\
    \x02\x08\x06\x12\x03\x10\x0b)\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x10*\
    8\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x10;<\n\r\n\x05\x04\0\x02\x08\
    \x08\x12\x04\x10=\x8d\x01\n\x10\n\x08\x04\0\x02\x08\x08\xd0\x86\x03\x12\
    \x04\x10>\x8c\x01\n\x0b\n\x04\x04\0\x02\t\x12\x03\x11\x02W\n\x0c\n\x05\
    \x04\0\x02\t\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\
    \x11\x0b\x10\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x11\x11\x1b\n\x0c\n\x05\
    \x04\0\x02\t\x03\x12\x03\x11\x1e\x20\n\x0c\n\x05\x04\0\x02\t\x08\x12\x03\
    \x11!V\n\x0f\n\x08\x04\0\x02\t\x08\xd0\x86\x03\x12\x03\x11\"U\n\x0b\n\
    \x04\x04\0\x02\n\x12\x03\x12\x02\x20\n\x0c\n\x05\x04\0\x02\n\x04\x12\x03\
    \x12\x02\n\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x12\x0b\x11\n\x0c\n\x05\
    \x04\0\x02\n\x01\x12\x03\x12\x12\x1a\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\
    \x12\x1d\x1f\n\x0c\n\x04\x04\0\x02\x0b\x12\x04\x13\x02\x80\x01\n\x0c\n\
    \x05\x04\0\x02\x0b\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\0\x02\x0b\x05\
    \x12\x03\x13\x0b\x10\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x13\x11\x1a\n\
    \x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x13\x1d\x1f\n\x0c\n\x05\x04\0\x02\
    \x0b\x08\x12\x03\x13\x20\x7f\n\x0c\n\x05\x04\0\x02\x0b\x07\x12\x03\x13+,\
    \n\x0f\n\x08\x04\0\x02\x0b\x08\xd0\x86\x03\x12\x03\x13.~\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
