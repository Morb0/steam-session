// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `steammessages_auth.steamclient.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetPasswordRSAPublicKey_Request {
    // message fields
    account_name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetPasswordRSAPublicKey_Request {
    fn default() -> &'a CAuthentication_GetPasswordRSAPublicKey_Request {
        <CAuthentication_GetPasswordRSAPublicKey_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetPasswordRSAPublicKey_Request {
    pub fn new() -> CAuthentication_GetPasswordRSAPublicKey_Request {
        ::std::default::Default::default()
    }

    // optional string account_name = 1;


    pub fn get_account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name.set_default();
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account_name.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetPasswordRSAPublicKey_Request {
        CAuthentication_GetPasswordRSAPublicKey_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_name",
                |m: &CAuthentication_GetPasswordRSAPublicKey_Request| { &m.account_name },
                |m: &mut CAuthentication_GetPasswordRSAPublicKey_Request| { &mut m.account_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetPasswordRSAPublicKey_Request>(
                "CAuthentication_GetPasswordRSAPublicKey_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetPasswordRSAPublicKey_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetPasswordRSAPublicKey_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetPasswordRSAPublicKey_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn clear(&mut self) {
        self.account_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetPasswordRSAPublicKey_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetPasswordRSAPublicKey_Response {
    // message fields
    publickey_mod: ::protobuf::SingularField<::std::string::String>,
    publickey_exp: ::protobuf::SingularField<::std::string::String>,
    timestamp: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetPasswordRSAPublicKey_Response {
    fn default() -> &'a CAuthentication_GetPasswordRSAPublicKey_Response {
        <CAuthentication_GetPasswordRSAPublicKey_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetPasswordRSAPublicKey_Response {
    pub fn new() -> CAuthentication_GetPasswordRSAPublicKey_Response {
        ::std::default::Default::default()
    }

    // optional string publickey_mod = 1;


    pub fn get_publickey_mod(&self) -> &str {
        match self.publickey_mod.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_publickey_mod(&mut self) {
        self.publickey_mod.clear();
    }

    pub fn has_publickey_mod(&self) -> bool {
        self.publickey_mod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publickey_mod(&mut self, v: ::std::string::String) {
        self.publickey_mod = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publickey_mod(&mut self) -> &mut ::std::string::String {
        if self.publickey_mod.is_none() {
            self.publickey_mod.set_default();
        }
        self.publickey_mod.as_mut().unwrap()
    }

    // Take field
    pub fn take_publickey_mod(&mut self) -> ::std::string::String {
        self.publickey_mod.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string publickey_exp = 2;


    pub fn get_publickey_exp(&self) -> &str {
        match self.publickey_exp.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_publickey_exp(&mut self) {
        self.publickey_exp.clear();
    }

    pub fn has_publickey_exp(&self) -> bool {
        self.publickey_exp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publickey_exp(&mut self, v: ::std::string::String) {
        self.publickey_exp = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publickey_exp(&mut self) -> &mut ::std::string::String {
        if self.publickey_exp.is_none() {
            self.publickey_exp.set_default();
        }
        self.publickey_exp.as_mut().unwrap()
    }

    // Take field
    pub fn take_publickey_exp(&mut self) -> ::std::string::String {
        self.publickey_exp.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.publickey_mod)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.publickey_exp)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.publickey_mod.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.publickey_exp.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.publickey_mod.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.publickey_exp.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetPasswordRSAPublicKey_Response {
        CAuthentication_GetPasswordRSAPublicKey_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "publickey_mod",
                |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.publickey_mod },
                |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.publickey_mod },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "publickey_exp",
                |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.publickey_exp },
                |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.publickey_exp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &CAuthentication_GetPasswordRSAPublicKey_Response| { &m.timestamp },
                |m: &mut CAuthentication_GetPasswordRSAPublicKey_Response| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetPasswordRSAPublicKey_Response>(
                "CAuthentication_GetPasswordRSAPublicKey_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetPasswordRSAPublicKey_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetPasswordRSAPublicKey_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetPasswordRSAPublicKey_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn clear(&mut self) {
        self.publickey_mod.clear();
        self.publickey_exp.clear();
        self.timestamp = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetPasswordRSAPublicKey_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_DeviceDetails {
    // message fields
    device_friendly_name: ::protobuf::SingularField<::std::string::String>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    os_type: ::std::option::Option<i32>,
    gaming_device_type: ::std::option::Option<u32>,
    client_count: ::std::option::Option<u32>,
    machine_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_DeviceDetails {
    fn default() -> &'a CAuthentication_DeviceDetails {
        <CAuthentication_DeviceDetails as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_DeviceDetails {
    pub fn new() -> CAuthentication_DeviceDetails {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;


    pub fn get_device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name.clear();
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name.set_default();
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 2;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional int32 os_type = 3;


    pub fn get_os_type(&self) -> i32 {
        self.os_type.unwrap_or(0)
    }
    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: i32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 gaming_device_type = 4;


    pub fn get_gaming_device_type(&self) -> u32 {
        self.gaming_device_type.unwrap_or(0)
    }
    pub fn clear_gaming_device_type(&mut self) {
        self.gaming_device_type = ::std::option::Option::None;
    }

    pub fn has_gaming_device_type(&self) -> bool {
        self.gaming_device_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gaming_device_type(&mut self, v: u32) {
        self.gaming_device_type = ::std::option::Option::Some(v);
    }

    // optional uint32 client_count = 5;


    pub fn get_client_count(&self) -> u32 {
        self.client_count.unwrap_or(0)
    }
    pub fn clear_client_count(&mut self) {
        self.client_count = ::std::option::Option::None;
    }

    pub fn has_client_count(&self) -> bool {
        self.client_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_count(&mut self, v: u32) {
        self.client_count = ::std::option::Option::Some(v);
    }

    // optional bytes machine_id = 6;


    pub fn get_machine_id(&self) -> &[u8] {
        match self.machine_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_machine_id(&mut self) {
        self.machine_id.clear();
    }

    pub fn has_machine_id(&self) -> bool {
        self.machine_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_machine_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.machine_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machine_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.machine_id.is_none() {
            self.machine_id.set_default();
        }
        self.machine_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_machine_id(&mut self) -> ::std::vec::Vec<u8> {
        self.machine_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CAuthentication_DeviceDetails {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_friendly_name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gaming_device_type = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.client_count = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.machine_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gaming_device_type {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_count {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.machine_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.os_type {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.gaming_device_type {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.client_count {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.machine_id.as_ref() {
            os.write_bytes(6, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_DeviceDetails {
        CAuthentication_DeviceDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_friendly_name",
                |m: &CAuthentication_DeviceDetails| { &m.device_friendly_name },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.device_friendly_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_DeviceDetails| { &m.platform_type },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "os_type",
                |m: &CAuthentication_DeviceDetails| { &m.os_type },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.os_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gaming_device_type",
                |m: &CAuthentication_DeviceDetails| { &m.gaming_device_type },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.gaming_device_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "client_count",
                |m: &CAuthentication_DeviceDetails| { &m.client_count },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.client_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "machine_id",
                |m: &CAuthentication_DeviceDetails| { &m.machine_id },
                |m: &mut CAuthentication_DeviceDetails| { &mut m.machine_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_DeviceDetails>(
                "CAuthentication_DeviceDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_DeviceDetails {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_DeviceDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_DeviceDetails::new)
    }
}

impl ::protobuf::Clear for CAuthentication_DeviceDetails {
    fn clear(&mut self) {
        self.device_friendly_name.clear();
        self.platform_type = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.gaming_device_type = ::std::option::Option::None;
        self.client_count = ::std::option::Option::None;
        self.machine_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_DeviceDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_DeviceDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_BeginAuthSessionViaQR_Request {
    // message fields
    device_friendly_name: ::protobuf::SingularField<::std::string::String>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    pub device_details: ::protobuf::SingularPtrField<CAuthentication_DeviceDetails>,
    website_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaQR_Request {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaQR_Request {
        <CAuthentication_BeginAuthSessionViaQR_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaQR_Request {
    pub fn new() -> CAuthentication_BeginAuthSessionViaQR_Request {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;


    pub fn get_device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name.clear();
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name.set_default();
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 2;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional .CAuthentication_DeviceDetails device_details = 3;


    pub fn get_device_details(&self) -> &CAuthentication_DeviceDetails {
        self.device_details.as_ref().unwrap_or_else(|| <CAuthentication_DeviceDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_device_details(&mut self) {
        self.device_details.clear();
    }

    pub fn has_device_details(&self) -> bool {
        self.device_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_details(&mut self, v: CAuthentication_DeviceDetails) {
        self.device_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_details(&mut self) -> &mut CAuthentication_DeviceDetails {
        if self.device_details.is_none() {
            self.device_details.set_default();
        }
        self.device_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_details(&mut self) -> CAuthentication_DeviceDetails {
        self.device_details.take().unwrap_or_else(|| CAuthentication_DeviceDetails::new())
    }

    // optional string website_id = 4;


    pub fn get_website_id(&self) -> &str {
        match self.website_id.as_ref() {
            Some(v) => &v,
            None => "Unknown",
        }
    }
    pub fn clear_website_id(&mut self) {
        self.website_id.clear();
    }

    pub fn has_website_id(&self) -> bool {
        self.website_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_website_id(&mut self, v: ::std::string::String) {
        self.website_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website_id(&mut self) -> &mut ::std::string::String {
        if self.website_id.is_none() {
            self.website_id.set_default();
        }
        self.website_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_website_id(&mut self) -> ::std::string::String {
        self.website_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_BeginAuthSessionViaQR_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.device_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_friendly_name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_details)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.website_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.device_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.website_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.device_details.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.website_id.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_BeginAuthSessionViaQR_Request {
        CAuthentication_BeginAuthSessionViaQR_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_friendly_name",
                |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.device_friendly_name },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.device_friendly_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.platform_type },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_DeviceDetails>>(
                "device_details",
                |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.device_details },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.device_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "website_id",
                |m: &CAuthentication_BeginAuthSessionViaQR_Request| { &m.website_id },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Request| { &mut m.website_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_BeginAuthSessionViaQR_Request>(
                "CAuthentication_BeginAuthSessionViaQR_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaQR_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_BeginAuthSessionViaQR_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_BeginAuthSessionViaQR_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_BeginAuthSessionViaQR_Request {
    fn clear(&mut self) {
        self.device_friendly_name.clear();
        self.platform_type = ::std::option::Option::None;
        self.device_details.clear();
        self.website_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_BeginAuthSessionViaQR_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaQR_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_AllowedConfirmation {
    // message fields
    confirmation_type: ::std::option::Option<EAuthSessionGuardType>,
    associated_message: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AllowedConfirmation {
    fn default() -> &'a CAuthentication_AllowedConfirmation {
        <CAuthentication_AllowedConfirmation as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_AllowedConfirmation {
    pub fn new() -> CAuthentication_AllowedConfirmation {
        ::std::default::Default::default()
    }

    // optional .EAuthSessionGuardType confirmation_type = 1;


    pub fn get_confirmation_type(&self) -> EAuthSessionGuardType {
        self.confirmation_type.unwrap_or(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown)
    }
    pub fn clear_confirmation_type(&mut self) {
        self.confirmation_type = ::std::option::Option::None;
    }

    pub fn has_confirmation_type(&self) -> bool {
        self.confirmation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confirmation_type(&mut self, v: EAuthSessionGuardType) {
        self.confirmation_type = ::std::option::Option::Some(v);
    }

    // optional string associated_message = 2;


    pub fn get_associated_message(&self) -> &str {
        match self.associated_message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_associated_message(&mut self) {
        self.associated_message.clear();
    }

    pub fn has_associated_message(&self) -> bool {
        self.associated_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_associated_message(&mut self, v: ::std::string::String) {
        self.associated_message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_associated_message(&mut self) -> &mut ::std::string::String {
        if self.associated_message.is_none() {
            self.associated_message.set_default();
        }
        self.associated_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_associated_message(&mut self) -> ::std::string::String {
        self.associated_message.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_AllowedConfirmation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.confirmation_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.associated_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.confirmation_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.associated_message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.confirmation_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.associated_message.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_AllowedConfirmation {
        CAuthentication_AllowedConfirmation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthSessionGuardType>>(
                "confirmation_type",
                |m: &CAuthentication_AllowedConfirmation| { &m.confirmation_type },
                |m: &mut CAuthentication_AllowedConfirmation| { &mut m.confirmation_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "associated_message",
                |m: &CAuthentication_AllowedConfirmation| { &m.associated_message },
                |m: &mut CAuthentication_AllowedConfirmation| { &mut m.associated_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_AllowedConfirmation>(
                "CAuthentication_AllowedConfirmation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_AllowedConfirmation {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_AllowedConfirmation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_AllowedConfirmation::new)
    }
}

impl ::protobuf::Clear for CAuthentication_AllowedConfirmation {
    fn clear(&mut self) {
        self.confirmation_type = ::std::option::Option::None;
        self.associated_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_AllowedConfirmation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_AllowedConfirmation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_BeginAuthSessionViaQR_Response {
    // message fields
    client_id: ::std::option::Option<u64>,
    challenge_url: ::protobuf::SingularField<::std::string::String>,
    request_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    interval: ::std::option::Option<f32>,
    pub allowed_confirmations: ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation>,
    version: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaQR_Response {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaQR_Response {
        <CAuthentication_BeginAuthSessionViaQR_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaQR_Response {
    pub fn new() -> CAuthentication_BeginAuthSessionViaQR_Response {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional string challenge_url = 2;


    pub fn get_challenge_url(&self) -> &str {
        match self.challenge_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_challenge_url(&mut self) {
        self.challenge_url.clear();
    }

    pub fn has_challenge_url(&self) -> bool {
        self.challenge_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_url(&mut self, v: ::std::string::String) {
        self.challenge_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge_url(&mut self) -> &mut ::std::string::String {
        if self.challenge_url.is_none() {
            self.challenge_url.set_default();
        }
        self.challenge_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge_url(&mut self) -> ::std::string::String {
        self.challenge_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes request_id = 3;


    pub fn get_request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.request_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request_id.is_none() {
            self.request_id.set_default();
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::vec::Vec<u8> {
        self.request_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional float interval = 4;


    pub fn get_interval(&self) -> f32 {
        self.interval.unwrap_or(0.)
    }
    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: f32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 5;


    pub fn get_allowed_confirmations(&self) -> &[CAuthentication_AllowedConfirmation] {
        &self.allowed_confirmations
    }
    pub fn clear_allowed_confirmations(&mut self) {
        self.allowed_confirmations.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_confirmations(&mut self, v: ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation>) {
        self.allowed_confirmations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_confirmations(&mut self) -> &mut ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation> {
        &mut self.allowed_confirmations
    }

    // Take field
    pub fn take_allowed_confirmations(&mut self) -> ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation> {
        ::std::mem::replace(&mut self.allowed_confirmations, ::protobuf::RepeatedField::new())
    }

    // optional int32 version = 6;


    pub fn get_version(&self) -> i32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_BeginAuthSessionViaQR_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.allowed_confirmations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.challenge_url)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.request_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.interval = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.allowed_confirmations)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.challenge_url.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.request_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.interval {
            my_size += 5;
        }
        for value in &self.allowed_confirmations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.challenge_url.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.request_id.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(v) = self.interval {
            os.write_float(4, v)?;
        }
        for v in &self.allowed_confirmations {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.version {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_BeginAuthSessionViaQR_Response {
        CAuthentication_BeginAuthSessionViaQR_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.client_id },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "challenge_url",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.challenge_url },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.challenge_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "request_id",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.request_id },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "interval",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.interval },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_AllowedConfirmation>>(
                "allowed_confirmations",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.allowed_confirmations },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.allowed_confirmations },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &CAuthentication_BeginAuthSessionViaQR_Response| { &m.version },
                |m: &mut CAuthentication_BeginAuthSessionViaQR_Response| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_BeginAuthSessionViaQR_Response>(
                "CAuthentication_BeginAuthSessionViaQR_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaQR_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_BeginAuthSessionViaQR_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_BeginAuthSessionViaQR_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_BeginAuthSessionViaQR_Response {
    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.challenge_url.clear();
        self.request_id.clear();
        self.interval = ::std::option::Option::None;
        self.allowed_confirmations.clear();
        self.version = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_BeginAuthSessionViaQR_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaQR_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_BeginAuthSessionViaCredentials_Request {
    // message fields
    device_friendly_name: ::protobuf::SingularField<::std::string::String>,
    account_name: ::protobuf::SingularField<::std::string::String>,
    encrypted_password: ::protobuf::SingularField<::std::string::String>,
    encryption_timestamp: ::std::option::Option<u64>,
    remember_login: ::std::option::Option<bool>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    persistence: ::std::option::Option<super::enums::ESessionPersistence>,
    website_id: ::protobuf::SingularField<::std::string::String>,
    pub device_details: ::protobuf::SingularPtrField<CAuthentication_DeviceDetails>,
    guard_data: ::protobuf::SingularField<::std::string::String>,
    language: ::std::option::Option<u32>,
    qos_level: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaCredentials_Request {
        <CAuthentication_BeginAuthSessionViaCredentials_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaCredentials_Request {
    pub fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request {
        ::std::default::Default::default()
    }

    // optional string device_friendly_name = 1;


    pub fn get_device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name.clear();
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name.set_default();
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string account_name = 2;


    pub fn get_account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name.set_default();
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string encrypted_password = 3;


    pub fn get_encrypted_password(&self) -> &str {
        match self.encrypted_password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_encrypted_password(&mut self) {
        self.encrypted_password.clear();
    }

    pub fn has_encrypted_password(&self) -> bool {
        self.encrypted_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_password(&mut self, v: ::std::string::String) {
        self.encrypted_password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_password(&mut self) -> &mut ::std::string::String {
        if self.encrypted_password.is_none() {
            self.encrypted_password.set_default();
        }
        self.encrypted_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_password(&mut self) -> ::std::string::String {
        self.encrypted_password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 encryption_timestamp = 4;


    pub fn get_encryption_timestamp(&self) -> u64 {
        self.encryption_timestamp.unwrap_or(0)
    }
    pub fn clear_encryption_timestamp(&mut self) {
        self.encryption_timestamp = ::std::option::Option::None;
    }

    pub fn has_encryption_timestamp(&self) -> bool {
        self.encryption_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_timestamp(&mut self, v: u64) {
        self.encryption_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool remember_login = 5;


    pub fn get_remember_login(&self) -> bool {
        self.remember_login.unwrap_or(false)
    }
    pub fn clear_remember_login(&mut self) {
        self.remember_login = ::std::option::Option::None;
    }

    pub fn has_remember_login(&self) -> bool {
        self.remember_login.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remember_login(&mut self, v: bool) {
        self.remember_login = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 6;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence persistence = 7;


    pub fn get_persistence(&self) -> super::enums::ESessionPersistence {
        self.persistence.unwrap_or(super::enums::ESessionPersistence::k_ESessionPersistence_Persistent)
    }
    pub fn clear_persistence(&mut self) {
        self.persistence = ::std::option::Option::None;
    }

    pub fn has_persistence(&self) -> bool {
        self.persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.persistence = ::std::option::Option::Some(v);
    }

    // optional string website_id = 8;


    pub fn get_website_id(&self) -> &str {
        match self.website_id.as_ref() {
            Some(v) => &v,
            None => "Unknown",
        }
    }
    pub fn clear_website_id(&mut self) {
        self.website_id.clear();
    }

    pub fn has_website_id(&self) -> bool {
        self.website_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_website_id(&mut self, v: ::std::string::String) {
        self.website_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_website_id(&mut self) -> &mut ::std::string::String {
        if self.website_id.is_none() {
            self.website_id.set_default();
        }
        self.website_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_website_id(&mut self) -> ::std::string::String {
        self.website_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .CAuthentication_DeviceDetails device_details = 9;


    pub fn get_device_details(&self) -> &CAuthentication_DeviceDetails {
        self.device_details.as_ref().unwrap_or_else(|| <CAuthentication_DeviceDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_device_details(&mut self) {
        self.device_details.clear();
    }

    pub fn has_device_details(&self) -> bool {
        self.device_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_details(&mut self, v: CAuthentication_DeviceDetails) {
        self.device_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_details(&mut self) -> &mut CAuthentication_DeviceDetails {
        if self.device_details.is_none() {
            self.device_details.set_default();
        }
        self.device_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_details(&mut self) -> CAuthentication_DeviceDetails {
        self.device_details.take().unwrap_or_else(|| CAuthentication_DeviceDetails::new())
    }

    // optional string guard_data = 10;


    pub fn get_guard_data(&self) -> &str {
        match self.guard_data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_guard_data(&mut self) {
        self.guard_data.clear();
    }

    pub fn has_guard_data(&self) -> bool {
        self.guard_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guard_data(&mut self, v: ::std::string::String) {
        self.guard_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guard_data(&mut self) -> &mut ::std::string::String {
        if self.guard_data.is_none() {
            self.guard_data.set_default();
        }
        self.guard_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_guard_data(&mut self) -> ::std::string::String {
        self.guard_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 language = 11;


    pub fn get_language(&self) -> u32 {
        self.language.unwrap_or(0)
    }
    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: u32) {
        self.language = ::std::option::Option::Some(v);
    }

    // optional int32 qos_level = 12;


    pub fn get_qos_level(&self) -> i32 {
        self.qos_level.unwrap_or(2i32)
    }
    pub fn clear_qos_level(&mut self) {
        self.qos_level = ::std::option::Option::None;
    }

    pub fn has_qos_level(&self) -> bool {
        self.qos_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_qos_level(&mut self, v: i32) {
        self.qos_level = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.device_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_friendly_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.encrypted_password)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.encryption_timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remember_login = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.persistence, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.website_id)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_details)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.guard_data)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.language = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.qos_level = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.encrypted_password.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.encryption_timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.remember_login {
            my_size += 2;
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.persistence {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.website_id.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(ref v) = self.device_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.guard_data.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.language {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.qos_level {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.encrypted_password.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.encryption_timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.remember_login {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.persistence {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.website_id.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(ref v) = self.device_details.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.guard_data.as_ref() {
            os.write_string(10, &v)?;
        }
        if let Some(v) = self.language {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.qos_level {
            os.write_int32(12, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Request {
        CAuthentication_BeginAuthSessionViaCredentials_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_friendly_name",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.device_friendly_name },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.device_friendly_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_name",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.account_name },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.account_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "encrypted_password",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.encrypted_password },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.encrypted_password },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "encryption_timestamp",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.encryption_timestamp },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.encryption_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remember_login",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.remember_login },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.remember_login },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.platform_type },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::enums::ESessionPersistence>>(
                "persistence",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.persistence },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.persistence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "website_id",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.website_id },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.website_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_DeviceDetails>>(
                "device_details",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.device_details },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.device_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "guard_data",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.guard_data },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.guard_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "language",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.language },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "qos_level",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Request| { &m.qos_level },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Request| { &mut m.qos_level },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_BeginAuthSessionViaCredentials_Request>(
                "CAuthentication_BeginAuthSessionViaCredentials_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaCredentials_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_BeginAuthSessionViaCredentials_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_BeginAuthSessionViaCredentials_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn clear(&mut self) {
        self.device_friendly_name.clear();
        self.account_name.clear();
        self.encrypted_password.clear();
        self.encryption_timestamp = ::std::option::Option::None;
        self.remember_login = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.persistence = ::std::option::Option::None;
        self.website_id.clear();
        self.device_details.clear();
        self.guard_data.clear();
        self.language = ::std::option::Option::None;
        self.qos_level = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaCredentials_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_BeginAuthSessionViaCredentials_Response {
    // message fields
    client_id: ::std::option::Option<u64>,
    request_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    interval: ::std::option::Option<f32>,
    pub allowed_confirmations: ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation>,
    steamid: ::std::option::Option<u64>,
    weak_token: ::protobuf::SingularField<::std::string::String>,
    agreement_session_url: ::protobuf::SingularField<::std::string::String>,
    extended_error_message: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn default() -> &'a CAuthentication_BeginAuthSessionViaCredentials_Response {
        <CAuthentication_BeginAuthSessionViaCredentials_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_BeginAuthSessionViaCredentials_Response {
    pub fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Response {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional bytes request_id = 2;


    pub fn get_request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.request_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request_id.is_none() {
            self.request_id.set_default();
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::vec::Vec<u8> {
        self.request_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional float interval = 3;


    pub fn get_interval(&self) -> f32 {
        self.interval.unwrap_or(0.)
    }
    pub fn clear_interval(&mut self) {
        self.interval = ::std::option::Option::None;
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: f32) {
        self.interval = ::std::option::Option::Some(v);
    }

    // repeated .CAuthentication_AllowedConfirmation allowed_confirmations = 4;


    pub fn get_allowed_confirmations(&self) -> &[CAuthentication_AllowedConfirmation] {
        &self.allowed_confirmations
    }
    pub fn clear_allowed_confirmations(&mut self) {
        self.allowed_confirmations.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_confirmations(&mut self, v: ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation>) {
        self.allowed_confirmations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_confirmations(&mut self) -> &mut ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation> {
        &mut self.allowed_confirmations
    }

    // Take field
    pub fn take_allowed_confirmations(&mut self) -> ::protobuf::RepeatedField<CAuthentication_AllowedConfirmation> {
        ::std::mem::replace(&mut self.allowed_confirmations, ::protobuf::RepeatedField::new())
    }

    // optional uint64 steamid = 5;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string weak_token = 6;


    pub fn get_weak_token(&self) -> &str {
        match self.weak_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_weak_token(&mut self) {
        self.weak_token.clear();
    }

    pub fn has_weak_token(&self) -> bool {
        self.weak_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weak_token(&mut self, v: ::std::string::String) {
        self.weak_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weak_token(&mut self) -> &mut ::std::string::String {
        if self.weak_token.is_none() {
            self.weak_token.set_default();
        }
        self.weak_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_weak_token(&mut self) -> ::std::string::String {
        self.weak_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string agreement_session_url = 7;


    pub fn get_agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url.clear();
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url.set_default();
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string extended_error_message = 8;


    pub fn get_extended_error_message(&self) -> &str {
        match self.extended_error_message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_extended_error_message(&mut self) {
        self.extended_error_message.clear();
    }

    pub fn has_extended_error_message(&self) -> bool {
        self.extended_error_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extended_error_message(&mut self, v: ::std::string::String) {
        self.extended_error_message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_error_message(&mut self) -> &mut ::std::string::String {
        if self.extended_error_message.is_none() {
            self.extended_error_message.set_default();
        }
        self.extended_error_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_extended_error_message(&mut self) -> ::std::string::String {
        self.extended_error_message.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.allowed_confirmations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.request_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.interval = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.allowed_confirmations)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.weak_token)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agreement_session_url)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.extended_error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.request_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.interval {
            my_size += 5;
        }
        for value in &self.allowed_confirmations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.weak_token.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(ref v) = self.extended_error_message.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.request_id.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.interval {
            os.write_float(3, v)?;
        }
        for v in &self.allowed_confirmations {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.steamid {
            os.write_uint64(5, v)?;
        }
        if let Some(ref v) = self.weak_token.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(ref v) = self.extended_error_message.as_ref() {
            os.write_string(8, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_BeginAuthSessionViaCredentials_Response {
        CAuthentication_BeginAuthSessionViaCredentials_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.client_id },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "request_id",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.request_id },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "interval",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.interval },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_AllowedConfirmation>>(
                "allowed_confirmations",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.allowed_confirmations },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.allowed_confirmations },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.steamid },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weak_token",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.weak_token },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.weak_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agreement_session_url",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.agreement_session_url },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.agreement_session_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "extended_error_message",
                |m: &CAuthentication_BeginAuthSessionViaCredentials_Response| { &m.extended_error_message },
                |m: &mut CAuthentication_BeginAuthSessionViaCredentials_Response| { &mut m.extended_error_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_BeginAuthSessionViaCredentials_Response>(
                "CAuthentication_BeginAuthSessionViaCredentials_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_BeginAuthSessionViaCredentials_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_BeginAuthSessionViaCredentials_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_BeginAuthSessionViaCredentials_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.request_id.clear();
        self.interval = ::std::option::Option::None;
        self.allowed_confirmations.clear();
        self.steamid = ::std::option::Option::None;
        self.weak_token.clear();
        self.agreement_session_url.clear();
        self.extended_error_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_BeginAuthSessionViaCredentials_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_PollAuthSessionStatus_Request {
    // message fields
    client_id: ::std::option::Option<u64>,
    request_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    token_to_revoke: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_PollAuthSessionStatus_Request {
    fn default() -> &'a CAuthentication_PollAuthSessionStatus_Request {
        <CAuthentication_PollAuthSessionStatus_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_PollAuthSessionStatus_Request {
    pub fn new() -> CAuthentication_PollAuthSessionStatus_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional bytes request_id = 2;


    pub fn get_request_id(&self) -> &[u8] {
        match self.request_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.request_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.request_id.is_none() {
            self.request_id.set_default();
        }
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::vec::Vec<u8> {
        self.request_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional fixed64 token_to_revoke = 3;


    pub fn get_token_to_revoke(&self) -> u64 {
        self.token_to_revoke.unwrap_or(0)
    }
    pub fn clear_token_to_revoke(&mut self) {
        self.token_to_revoke = ::std::option::Option::None;
    }

    pub fn has_token_to_revoke(&self) -> bool {
        self.token_to_revoke.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_to_revoke(&mut self, v: u64) {
        self.token_to_revoke = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_PollAuthSessionStatus_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.request_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_to_revoke = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.request_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.token_to_revoke {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.request_id.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.token_to_revoke {
            os.write_fixed64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_PollAuthSessionStatus_Request {
        CAuthentication_PollAuthSessionStatus_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.client_id },
                |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "request_id",
                |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.request_id },
                |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_to_revoke",
                |m: &CAuthentication_PollAuthSessionStatus_Request| { &m.token_to_revoke },
                |m: &mut CAuthentication_PollAuthSessionStatus_Request| { &mut m.token_to_revoke },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_PollAuthSessionStatus_Request>(
                "CAuthentication_PollAuthSessionStatus_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_PollAuthSessionStatus_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_PollAuthSessionStatus_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_PollAuthSessionStatus_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_PollAuthSessionStatus_Request {
    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.request_id.clear();
        self.token_to_revoke = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_PollAuthSessionStatus_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_PollAuthSessionStatus_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_PollAuthSessionStatus_Response {
    // message fields
    new_client_id: ::std::option::Option<u64>,
    new_challenge_url: ::protobuf::SingularField<::std::string::String>,
    refresh_token: ::protobuf::SingularField<::std::string::String>,
    access_token: ::protobuf::SingularField<::std::string::String>,
    had_remote_interaction: ::std::option::Option<bool>,
    account_name: ::protobuf::SingularField<::std::string::String>,
    new_guard_data: ::protobuf::SingularField<::std::string::String>,
    agreement_session_url: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_PollAuthSessionStatus_Response {
    fn default() -> &'a CAuthentication_PollAuthSessionStatus_Response {
        <CAuthentication_PollAuthSessionStatus_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_PollAuthSessionStatus_Response {
    pub fn new() -> CAuthentication_PollAuthSessionStatus_Response {
        ::std::default::Default::default()
    }

    // optional uint64 new_client_id = 1;


    pub fn get_new_client_id(&self) -> u64 {
        self.new_client_id.unwrap_or(0)
    }
    pub fn clear_new_client_id(&mut self) {
        self.new_client_id = ::std::option::Option::None;
    }

    pub fn has_new_client_id(&self) -> bool {
        self.new_client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_client_id(&mut self, v: u64) {
        self.new_client_id = ::std::option::Option::Some(v);
    }

    // optional string new_challenge_url = 2;


    pub fn get_new_challenge_url(&self) -> &str {
        match self.new_challenge_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_new_challenge_url(&mut self) {
        self.new_challenge_url.clear();
    }

    pub fn has_new_challenge_url(&self) -> bool {
        self.new_challenge_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_challenge_url(&mut self, v: ::std::string::String) {
        self.new_challenge_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_challenge_url(&mut self) -> &mut ::std::string::String {
        if self.new_challenge_url.is_none() {
            self.new_challenge_url.set_default();
        }
        self.new_challenge_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_challenge_url(&mut self) -> ::std::string::String {
        self.new_challenge_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string refresh_token = 3;


    pub fn get_refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token.set_default();
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token = 4;


    pub fn get_access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token.set_default();
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool had_remote_interaction = 5;


    pub fn get_had_remote_interaction(&self) -> bool {
        self.had_remote_interaction.unwrap_or(false)
    }
    pub fn clear_had_remote_interaction(&mut self) {
        self.had_remote_interaction = ::std::option::Option::None;
    }

    pub fn has_had_remote_interaction(&self) -> bool {
        self.had_remote_interaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_had_remote_interaction(&mut self, v: bool) {
        self.had_remote_interaction = ::std::option::Option::Some(v);
    }

    // optional string account_name = 6;


    pub fn get_account_name(&self) -> &str {
        match self.account_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    pub fn has_account_name(&self) -> bool {
        self.account_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        if self.account_name.is_none() {
            self.account_name.set_default();
        }
        self.account_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string new_guard_data = 7;


    pub fn get_new_guard_data(&self) -> &str {
        match self.new_guard_data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_new_guard_data(&mut self) {
        self.new_guard_data.clear();
    }

    pub fn has_new_guard_data(&self) -> bool {
        self.new_guard_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_guard_data(&mut self, v: ::std::string::String) {
        self.new_guard_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_guard_data(&mut self) -> &mut ::std::string::String {
        if self.new_guard_data.is_none() {
            self.new_guard_data.set_default();
        }
        self.new_guard_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_guard_data(&mut self) -> ::std::string::String {
        self.new_guard_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string agreement_session_url = 8;


    pub fn get_agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url.clear();
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url.set_default();
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_PollAuthSessionStatus_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_client_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.new_challenge_url)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.access_token)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.had_remote_interaction = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.new_guard_data)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agreement_session_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.new_client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.new_challenge_url.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.refresh_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.had_remote_interaction {
            my_size += 2;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.new_guard_data.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.new_client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.new_challenge_url.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.refresh_token.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.access_token.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.had_remote_interaction {
            os.write_bool(5, v)?;
        }
        if let Some(ref v) = self.account_name.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.new_guard_data.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            os.write_string(8, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_PollAuthSessionStatus_Response {
        CAuthentication_PollAuthSessionStatus_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_client_id",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_client_id },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_challenge_url",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_challenge_url },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_challenge_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.refresh_token },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.access_token },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.access_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "had_remote_interaction",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.had_remote_interaction },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.had_remote_interaction },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_name",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.account_name },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.account_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_guard_data",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.new_guard_data },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.new_guard_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agreement_session_url",
                |m: &CAuthentication_PollAuthSessionStatus_Response| { &m.agreement_session_url },
                |m: &mut CAuthentication_PollAuthSessionStatus_Response| { &mut m.agreement_session_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_PollAuthSessionStatus_Response>(
                "CAuthentication_PollAuthSessionStatus_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_PollAuthSessionStatus_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_PollAuthSessionStatus_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_PollAuthSessionStatus_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_PollAuthSessionStatus_Response {
    fn clear(&mut self) {
        self.new_client_id = ::std::option::Option::None;
        self.new_challenge_url.clear();
        self.refresh_token.clear();
        self.access_token.clear();
        self.had_remote_interaction = ::std::option::Option::None;
        self.account_name.clear();
        self.new_guard_data.clear();
        self.agreement_session_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_PollAuthSessionStatus_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_PollAuthSessionStatus_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetAuthSessionInfo_Request {
    // message fields
    client_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionInfo_Request {
    fn default() -> &'a CAuthentication_GetAuthSessionInfo_Request {
        <CAuthentication_GetAuthSessionInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionInfo_Request {
    pub fn new() -> CAuthentication_GetAuthSessionInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_GetAuthSessionInfo_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetAuthSessionInfo_Request {
        CAuthentication_GetAuthSessionInfo_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_GetAuthSessionInfo_Request| { &m.client_id },
                |m: &mut CAuthentication_GetAuthSessionInfo_Request| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetAuthSessionInfo_Request>(
                "CAuthentication_GetAuthSessionInfo_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionInfo_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetAuthSessionInfo_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetAuthSessionInfo_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetAuthSessionInfo_Request {
    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetAuthSessionInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetAuthSessionInfo_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetAuthSessionInfo_Response {
    // message fields
    ip: ::protobuf::SingularField<::std::string::String>,
    geoloc: ::protobuf::SingularField<::std::string::String>,
    city: ::protobuf::SingularField<::std::string::String>,
    state: ::protobuf::SingularField<::std::string::String>,
    country: ::protobuf::SingularField<::std::string::String>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    device_friendly_name: ::protobuf::SingularField<::std::string::String>,
    version: ::std::option::Option<i32>,
    login_history: ::std::option::Option<EAuthSessionSecurityHistory>,
    requestor_location_mismatch: ::std::option::Option<bool>,
    high_usage_login: ::std::option::Option<bool>,
    requested_persistence: ::std::option::Option<super::enums::ESessionPersistence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionInfo_Response {
    fn default() -> &'a CAuthentication_GetAuthSessionInfo_Response {
        <CAuthentication_GetAuthSessionInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionInfo_Response {
    pub fn new() -> CAuthentication_GetAuthSessionInfo_Response {
        ::std::default::Default::default()
    }

    // optional string ip = 1;


    pub fn get_ip(&self) -> &str {
        match self.ip.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        if self.ip.is_none() {
            self.ip.set_default();
        }
        self.ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        self.ip.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string geoloc = 2;


    pub fn get_geoloc(&self) -> &str {
        match self.geoloc.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_geoloc(&mut self) {
        self.geoloc.clear();
    }

    pub fn has_geoloc(&self) -> bool {
        self.geoloc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geoloc(&mut self, v: ::std::string::String) {
        self.geoloc = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geoloc(&mut self) -> &mut ::std::string::String {
        if self.geoloc.is_none() {
            self.geoloc.set_default();
        }
        self.geoloc.as_mut().unwrap()
    }

    // Take field
    pub fn take_geoloc(&mut self) -> ::std::string::String {
        self.geoloc.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 3;


    pub fn get_city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city.set_default();
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 4;


    pub fn get_state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country = 5;


    pub fn get_country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country.set_default();
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenPlatformType platform_type = 6;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional string device_friendly_name = 7;


    pub fn get_device_friendly_name(&self) -> &str {
        match self.device_friendly_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_friendly_name(&mut self) {
        self.device_friendly_name.clear();
    }

    pub fn has_device_friendly_name(&self) -> bool {
        self.device_friendly_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_friendly_name(&mut self, v: ::std::string::String) {
        self.device_friendly_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_friendly_name(&mut self) -> &mut ::std::string::String {
        if self.device_friendly_name.is_none() {
            self.device_friendly_name.set_default();
        }
        self.device_friendly_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_friendly_name(&mut self) -> ::std::string::String {
        self.device_friendly_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 version = 8;


    pub fn get_version(&self) -> i32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional .EAuthSessionSecurityHistory login_history = 9;


    pub fn get_login_history(&self) -> EAuthSessionSecurityHistory {
        self.login_history.unwrap_or(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid)
    }
    pub fn clear_login_history(&mut self) {
        self.login_history = ::std::option::Option::None;
    }

    pub fn has_login_history(&self) -> bool {
        self.login_history.is_some()
    }

    // Param is passed by value, moved
    pub fn set_login_history(&mut self, v: EAuthSessionSecurityHistory) {
        self.login_history = ::std::option::Option::Some(v);
    }

    // optional bool requestor_location_mismatch = 10;


    pub fn get_requestor_location_mismatch(&self) -> bool {
        self.requestor_location_mismatch.unwrap_or(false)
    }
    pub fn clear_requestor_location_mismatch(&mut self) {
        self.requestor_location_mismatch = ::std::option::Option::None;
    }

    pub fn has_requestor_location_mismatch(&self) -> bool {
        self.requestor_location_mismatch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestor_location_mismatch(&mut self, v: bool) {
        self.requestor_location_mismatch = ::std::option::Option::Some(v);
    }

    // optional bool high_usage_login = 11;


    pub fn get_high_usage_login(&self) -> bool {
        self.high_usage_login.unwrap_or(false)
    }
    pub fn clear_high_usage_login(&mut self) {
        self.high_usage_login = ::std::option::Option::None;
    }

    pub fn has_high_usage_login(&self) -> bool {
        self.high_usage_login.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_usage_login(&mut self, v: bool) {
        self.high_usage_login = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence requested_persistence = 12;


    pub fn get_requested_persistence(&self) -> super::enums::ESessionPersistence {
        self.requested_persistence.unwrap_or(super::enums::ESessionPersistence::k_ESessionPersistence_Invalid)
    }
    pub fn clear_requested_persistence(&mut self) {
        self.requested_persistence = ::std::option::Option::None;
    }

    pub fn has_requested_persistence(&self) -> bool {
        self.requested_persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requested_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.requested_persistence = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_GetAuthSessionInfo_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.geoloc)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.city)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.state)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.country)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_friendly_name)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.login_history, 9, &mut self.unknown_fields)?
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.requestor_location_mismatch = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.high_usage_login = ::std::option::Option::Some(tmp);
                },
                12 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.requested_persistence, 12, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ip.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.geoloc.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.country.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.login_history {
            my_size += ::protobuf::rt::enum_size(9, v);
        }
        if let Some(v) = self.requestor_location_mismatch {
            my_size += 2;
        }
        if let Some(v) = self.high_usage_login {
            my_size += 2;
        }
        if let Some(v) = self.requested_persistence {
            my_size += ::protobuf::rt::enum_size(12, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ip.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.geoloc.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.city.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.country.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.device_friendly_name.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.version {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.login_history {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.requestor_location_mismatch {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.high_usage_login {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.requested_persistence {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetAuthSessionInfo_Response {
        CAuthentication_GetAuthSessionInfo_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ip",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.ip },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "geoloc",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.geoloc },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.geoloc },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "city",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.city },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.city },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.state },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.country },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.platform_type },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_friendly_name",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.device_friendly_name },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.device_friendly_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.version },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthSessionSecurityHistory>>(
                "login_history",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.login_history },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.login_history },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "requestor_location_mismatch",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.requestor_location_mismatch },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.requestor_location_mismatch },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "high_usage_login",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.high_usage_login },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.high_usage_login },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::enums::ESessionPersistence>>(
                "requested_persistence",
                |m: &CAuthentication_GetAuthSessionInfo_Response| { &m.requested_persistence },
                |m: &mut CAuthentication_GetAuthSessionInfo_Response| { &mut m.requested_persistence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetAuthSessionInfo_Response>(
                "CAuthentication_GetAuthSessionInfo_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionInfo_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetAuthSessionInfo_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetAuthSessionInfo_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetAuthSessionInfo_Response {
    fn clear(&mut self) {
        self.ip.clear();
        self.geoloc.clear();
        self.city.clear();
        self.state.clear();
        self.country.clear();
        self.platform_type = ::std::option::Option::None;
        self.device_friendly_name.clear();
        self.version = ::std::option::Option::None;
        self.login_history = ::std::option::Option::None;
        self.requestor_location_mismatch = ::std::option::Option::None;
        self.high_usage_login = ::std::option::Option::None;
        self.requested_persistence = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetAuthSessionInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetAuthSessionInfo_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    // message fields
    version: ::std::option::Option<i32>,
    client_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    confirm: ::std::option::Option<bool>,
    persistence: ::std::option::Option<super::enums::ESessionPersistence>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        <CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        ::std::default::Default::default()
    }

    // optional int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint64 client_id = 2;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool confirm = 5;


    pub fn get_confirm(&self) -> bool {
        self.confirm.unwrap_or(false)
    }
    pub fn clear_confirm(&mut self) {
        self.confirm = ::std::option::Option::None;
    }

    pub fn has_confirm(&self) -> bool {
        self.confirm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confirm(&mut self, v: bool) {
        self.confirm = ::std::option::Option::Some(v);
    }

    // optional .ESessionPersistence persistence = 6;


    pub fn get_persistence(&self) -> super::enums::ESessionPersistence {
        self.persistence.unwrap_or(super::enums::ESessionPersistence::k_ESessionPersistence_Persistent)
    }
    pub fn clear_persistence(&mut self) {
        self.persistence = ::std::option::Option::None;
    }

    pub fn has_persistence(&self) -> bool {
        self.persistence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_persistence(&mut self, v: super::enums::ESessionPersistence) {
        self.persistence = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.confirm = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.persistence, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.confirm {
            my_size += 2;
        }
        if let Some(v) = self.persistence {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.client_id {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(v) = self.confirm {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.persistence {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.version },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.client_id },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.steamid },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.signature },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "confirm",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.confirm },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.confirm },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::enums::ESessionPersistence>>(
                "persistence",
                |m: &CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &m.persistence },
                |m: &mut CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request| { &mut m.persistence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request>(
                "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.signature.clear();
        self.confirm = ::std::option::Option::None;
        self.persistence = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        <CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response>(
                "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    // message fields
    client_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    code: ::protobuf::SingularField<::std::string::String>,
    code_type: ::std::option::Option<EAuthSessionGuardType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        <CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        ::std::default::Default::default()
    }

    // optional uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id.unwrap_or(0)
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = ::std::option::Option::None;
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string code = 3;


    pub fn get_code(&self) -> &str {
        match self.code.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        if self.code.is_none() {
            self.code.set_default();
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        self.code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthSessionGuardType code_type = 4;


    pub fn get_code_type(&self) -> EAuthSessionGuardType {
        self.code_type.unwrap_or(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown)
    }
    pub fn clear_code_type(&mut self) {
        self.code_type = ::std::option::Option::None;
    }

    pub fn has_code_type(&self) -> bool {
        self.code_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code_type(&mut self, v: EAuthSessionGuardType) {
        self.code_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.code)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.code_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.code.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.code_type {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(ref v) = self.code.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.code_type {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.client_id },
                |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.steamid },
                |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.code },
                |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthSessionGuardType>>(
                "code_type",
                |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &m.code_type },
                |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request| { &mut m.code_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request>(
                "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn clear(&mut self) {
        self.client_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.code.clear();
        self.code_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    // message fields
    agreement_session_url: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn default() -> &'a CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        <CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    pub fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        ::std::default::Default::default()
    }

    // optional string agreement_session_url = 7;


    pub fn get_agreement_session_url(&self) -> &str {
        match self.agreement_session_url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_agreement_session_url(&mut self) {
        self.agreement_session_url.clear();
    }

    pub fn has_agreement_session_url(&self) -> bool {
        self.agreement_session_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreement_session_url(&mut self, v: ::std::string::String) {
        self.agreement_session_url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agreement_session_url(&mut self) -> &mut ::std::string::String {
        if self.agreement_session_url.is_none() {
            self.agreement_session_url.set_default();
        }
        self.agreement_session_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_agreement_session_url(&mut self) -> ::std::string::String {
        self.agreement_session_url.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agreement_session_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.agreement_session_url.as_ref() {
            os.write_string(7, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "agreement_session_url",
                |m: &CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response| { &m.agreement_session_url },
                |m: &mut CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response| { &mut m.agreement_session_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response>(
                "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn clear(&mut self) {
        self.agreement_session_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_AccessToken_GenerateForApp_Request {
    // message fields
    refresh_token: ::protobuf::SingularField<::std::string::String>,
    steamid: ::std::option::Option<u64>,
    renewal_type: ::std::option::Option<ETokenRenewalType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AccessToken_GenerateForApp_Request {
    fn default() -> &'a CAuthentication_AccessToken_GenerateForApp_Request {
        <CAuthentication_AccessToken_GenerateForApp_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_AccessToken_GenerateForApp_Request {
    pub fn new() -> CAuthentication_AccessToken_GenerateForApp_Request {
        ::std::default::Default::default()
    }

    // optional string refresh_token = 1;


    pub fn get_refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token.set_default();
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .ETokenRenewalType renewal_type = 3;


    pub fn get_renewal_type(&self) -> ETokenRenewalType {
        self.renewal_type.unwrap_or(ETokenRenewalType::k_ETokenRenewalType_None)
    }
    pub fn clear_renewal_type(&mut self) {
        self.renewal_type = ::std::option::Option::None;
    }

    pub fn has_renewal_type(&self) -> bool {
        self.renewal_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_renewal_type(&mut self, v: ETokenRenewalType) {
        self.renewal_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_AccessToken_GenerateForApp_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.renewal_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.refresh_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.renewal_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.refresh_token.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.renewal_type {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_AccessToken_GenerateForApp_Request {
        CAuthentication_AccessToken_GenerateForApp_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.refresh_token },
                |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.steamid },
                |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ETokenRenewalType>>(
                "renewal_type",
                |m: &CAuthentication_AccessToken_GenerateForApp_Request| { &m.renewal_type },
                |m: &mut CAuthentication_AccessToken_GenerateForApp_Request| { &mut m.renewal_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_AccessToken_GenerateForApp_Request>(
                "CAuthentication_AccessToken_GenerateForApp_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_AccessToken_GenerateForApp_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_AccessToken_GenerateForApp_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_AccessToken_GenerateForApp_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_AccessToken_GenerateForApp_Request {
    fn clear(&mut self) {
        self.refresh_token.clear();
        self.steamid = ::std::option::Option::None;
        self.renewal_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_AccessToken_GenerateForApp_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_AccessToken_GenerateForApp_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_AccessToken_GenerateForApp_Response {
    // message fields
    access_token: ::protobuf::SingularField<::std::string::String>,
    refresh_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_AccessToken_GenerateForApp_Response {
    fn default() -> &'a CAuthentication_AccessToken_GenerateForApp_Response {
        <CAuthentication_AccessToken_GenerateForApp_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_AccessToken_GenerateForApp_Response {
    pub fn new() -> CAuthentication_AccessToken_GenerateForApp_Response {
        ::std::default::Default::default()
    }

    // optional string access_token = 1;


    pub fn get_access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token.set_default();
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string refresh_token = 2;


    pub fn get_refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token.set_default();
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_AccessToken_GenerateForApp_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.access_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.refresh_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.access_token.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.refresh_token.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_AccessToken_GenerateForApp_Response {
        CAuthentication_AccessToken_GenerateForApp_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &CAuthentication_AccessToken_GenerateForApp_Response| { &m.access_token },
                |m: &mut CAuthentication_AccessToken_GenerateForApp_Response| { &mut m.access_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &CAuthentication_AccessToken_GenerateForApp_Response| { &m.refresh_token },
                |m: &mut CAuthentication_AccessToken_GenerateForApp_Response| { &mut m.refresh_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_AccessToken_GenerateForApp_Response>(
                "CAuthentication_AccessToken_GenerateForApp_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_AccessToken_GenerateForApp_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_AccessToken_GenerateForApp_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_AccessToken_GenerateForApp_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_AccessToken_GenerateForApp_Response {
    fn clear(&mut self) {
        self.access_token.clear();
        self.refresh_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_AccessToken_GenerateForApp_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_AccessToken_GenerateForApp_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Enumerate_Request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Request {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Request {
        <CAuthentication_RefreshToken_Enumerate_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Request {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Enumerate_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Request {
        CAuthentication_RefreshToken_Enumerate_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Enumerate_Request>(
                "CAuthentication_RefreshToken_Enumerate_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Enumerate_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Enumerate_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Enumerate_Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Enumerate_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Enumerate_Response {
    // message fields
    pub refresh_tokens: ::protobuf::RepeatedField<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription>,
    requesting_token: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Response {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Response {
        <CAuthentication_RefreshToken_Enumerate_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Response {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Response {
        ::std::default::Default::default()
    }

    // repeated .CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription refresh_tokens = 1;


    pub fn get_refresh_tokens(&self) -> &[CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription] {
        &self.refresh_tokens
    }
    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::protobuf::RepeatedField<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::protobuf::RepeatedField<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::protobuf::RepeatedField<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::protobuf::RepeatedField::new())
    }

    // optional fixed64 requesting_token = 2;


    pub fn get_requesting_token(&self) -> u64 {
        self.requesting_token.unwrap_or(0)
    }
    pub fn clear_requesting_token(&mut self) {
        self.requesting_token = ::std::option::Option::None;
    }

    pub fn has_requesting_token(&self) -> bool {
        self.requesting_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requesting_token(&mut self, v: u64) {
        self.requesting_token = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Enumerate_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.refresh_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.refresh_tokens)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.requesting_token = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.requesting_token {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.refresh_tokens {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.requesting_token {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Response {
        CAuthentication_RefreshToken_Enumerate_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription>>(
                "refresh_tokens",
                |m: &CAuthentication_RefreshToken_Enumerate_Response| { &m.refresh_tokens },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response| { &mut m.refresh_tokens },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "requesting_token",
                |m: &CAuthentication_RefreshToken_Enumerate_Response| { &m.requesting_token },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response| { &mut m.requesting_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Enumerate_Response>(
                "CAuthentication_RefreshToken_Enumerate_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Enumerate_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Enumerate_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Enumerate_Response {
    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.requesting_token = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Enumerate_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    // message fields
    time: ::std::option::Option<u32>,
    pub ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    locale: ::protobuf::SingularField<::std::string::String>,
    country: ::protobuf::SingularField<::std::string::String>,
    state: ::protobuf::SingularField<::std::string::String>,
    city: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        <CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        ::std::default::Default::default()
    }

    // optional uint32 time = 1;


    pub fn get_time(&self) -> u32 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress ip = 2;


    pub fn get_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.ip.as_ref().unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.ip.is_none() {
            self.ip.set_default();
        }
        self.ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.ip.take().unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional string locale = 3;


    pub fn get_locale(&self) -> &str {
        match self.locale.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_locale(&mut self) {
        self.locale.clear();
    }

    pub fn has_locale(&self) -> bool {
        self.locale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locale(&mut self, v: ::std::string::String) {
        self.locale = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locale(&mut self) -> &mut ::std::string::String {
        if self.locale.is_none() {
            self.locale.set_default();
        }
        self.locale.as_mut().unwrap()
    }

    // Take field
    pub fn take_locale(&mut self) -> ::std::string::String {
        self.locale.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string country = 4;


    pub fn get_country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country.set_default();
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 5;


    pub fn get_state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 6;


    pub fn get_city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city.set_default();
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.ip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.locale)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.country)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.state)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.city)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.locale.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.country.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.ip.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.locale.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.country.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.city.as_ref() {
            os.write_string(6, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.time },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>>(
                "ip",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.ip },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "locale",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.locale },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.locale },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.country },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.state },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "city",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &m.city },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent| { &mut m.city },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent>(
                "CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.ip.clear();
        self.locale.clear();
        self.country.clear();
        self.state.clear();
        self.city.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    // message fields
    token_id: ::std::option::Option<u64>,
    token_description: ::protobuf::SingularField<::std::string::String>,
    time_updated: ::std::option::Option<u32>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    logged_in: ::std::option::Option<bool>,
    os_platform: ::std::option::Option<u32>,
    auth_type: ::std::option::Option<u32>,
    gaming_device_type: ::std::option::Option<u32>,
    pub first_seen: ::protobuf::SingularPtrField<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent>,
    pub last_seen: ::protobuf::SingularPtrField<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent>,
    os_type: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    fn default() -> &'a CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
        <CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    pub fn new() -> CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional string token_description = 2;


    pub fn get_token_description(&self) -> &str {
        match self.token_description.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_token_description(&mut self) {
        self.token_description.clear();
    }

    pub fn has_token_description(&self) -> bool {
        self.token_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_description(&mut self, v: ::std::string::String) {
        self.token_description = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_description(&mut self) -> &mut ::std::string::String {
        if self.token_description.is_none() {
            self.token_description.set_default();
        }
        self.token_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_description(&mut self) -> ::std::string::String {
        self.token_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_updated = 3;


    pub fn get_time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }
    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 4;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional bool logged_in = 5;


    pub fn get_logged_in(&self) -> bool {
        self.logged_in.unwrap_or(false)
    }
    pub fn clear_logged_in(&mut self) {
        self.logged_in = ::std::option::Option::None;
    }

    pub fn has_logged_in(&self) -> bool {
        self.logged_in.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logged_in(&mut self, v: bool) {
        self.logged_in = ::std::option::Option::Some(v);
    }

    // optional uint32 os_platform = 6;


    pub fn get_os_platform(&self) -> u32 {
        self.os_platform.unwrap_or(0)
    }
    pub fn clear_os_platform(&mut self) {
        self.os_platform = ::std::option::Option::None;
    }

    pub fn has_os_platform(&self) -> bool {
        self.os_platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_platform(&mut self, v: u32) {
        self.os_platform = ::std::option::Option::Some(v);
    }

    // optional uint32 auth_type = 7;


    pub fn get_auth_type(&self) -> u32 {
        self.auth_type.unwrap_or(0)
    }
    pub fn clear_auth_type(&mut self) {
        self.auth_type = ::std::option::Option::None;
    }

    pub fn has_auth_type(&self) -> bool {
        self.auth_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_type(&mut self, v: u32) {
        self.auth_type = ::std::option::Option::Some(v);
    }

    // optional uint32 gaming_device_type = 8;


    pub fn get_gaming_device_type(&self) -> u32 {
        self.gaming_device_type.unwrap_or(0)
    }
    pub fn clear_gaming_device_type(&mut self) {
        self.gaming_device_type = ::std::option::Option::None;
    }

    pub fn has_gaming_device_type(&self) -> bool {
        self.gaming_device_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gaming_device_type(&mut self, v: u32) {
        self.gaming_device_type = ::std::option::Option::Some(v);
    }

    // optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent first_seen = 9;


    pub fn get_first_seen(&self) -> &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        self.first_seen.as_ref().unwrap_or_else(|| <CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_first_seen(&mut self) {
        self.first_seen.clear();
    }

    pub fn has_first_seen(&self) -> bool {
        self.first_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen(&mut self, v: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) {
        self.first_seen = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen(&mut self) -> &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        if self.first_seen.is_none() {
            self.first_seen.set_default();
        }
        self.first_seen.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_seen(&mut self) -> CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        self.first_seen.take().unwrap_or_else(|| CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent::new())
    }

    // optional .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent last_seen = 10;


    pub fn get_last_seen(&self) -> &CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        self.last_seen.as_ref().unwrap_or_else(|| <CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_seen(&mut self) {
        self.last_seen.clear();
    }

    pub fn has_last_seen(&self) -> bool {
        self.last_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen(&mut self, v: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent) {
        self.last_seen = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen(&mut self) -> &mut CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        if self.last_seen.is_none() {
            self.last_seen.set_default();
        }
        self.last_seen.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_seen(&mut self) -> CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
        self.last_seen.take().unwrap_or_else(|| CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent::new())
    }

    // optional int32 os_type = 11;


    pub fn get_os_type(&self) -> i32 {
        self.os_type.unwrap_or(0)
    }
    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: i32) {
        self.os_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    fn is_initialized(&self) -> bool {
        for v in &self.first_seen {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_seen {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.token_description)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_updated = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.logged_in = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.os_platform = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.auth_type = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gaming_device_type = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_seen)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_seen)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        if let Some(ref v) = self.token_description.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.logged_in {
            my_size += 2;
        }
        if let Some(v) = self.os_platform {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.auth_type {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gaming_device_type {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.first_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.token_description.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.logged_in {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.os_platform {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.auth_type {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.gaming_device_type {
            os.write_uint32(8, v)?;
        }
        if let Some(ref v) = self.first_seen.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_seen.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.os_type {
            os.write_int32(11, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
        CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.token_id },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.token_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_description",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.token_description },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.token_description },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time_updated",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.time_updated },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.time_updated },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.platform_type },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "logged_in",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.logged_in },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.logged_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "os_platform",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.os_platform },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.os_platform },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "auth_type",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.auth_type },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.auth_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gaming_device_type",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.gaming_device_type },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.gaming_device_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent>>(
                "first_seen",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.first_seen },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.first_seen },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent>>(
                "last_seen",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.last_seen },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.last_seen },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "os_type",
                |m: &CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &m.os_type },
                |m: &mut CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription| { &mut m.os_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription>(
                "CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.token_description.clear();
        self.time_updated = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.logged_in = ::std::option::Option::None;
        self.os_platform = ::std::option::Option::None;
        self.auth_type = ::std::option::Option::None;
        self.gaming_device_type = ::std::option::Option::None;
        self.first_seen.clear();
        self.last_seen.clear();
        self.os_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetAuthSessionsForAccount_Request {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionsForAccount_Request {
    fn default() -> &'a CAuthentication_GetAuthSessionsForAccount_Request {
        <CAuthentication_GetAuthSessionsForAccount_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionsForAccount_Request {
    pub fn new() -> CAuthentication_GetAuthSessionsForAccount_Request {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthentication_GetAuthSessionsForAccount_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetAuthSessionsForAccount_Request {
        CAuthentication_GetAuthSessionsForAccount_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetAuthSessionsForAccount_Request>(
                "CAuthentication_GetAuthSessionsForAccount_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionsForAccount_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetAuthSessionsForAccount_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetAuthSessionsForAccount_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetAuthSessionsForAccount_Request {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetAuthSessionsForAccount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetAuthSessionsForAccount_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_GetAuthSessionsForAccount_Response {
    // message fields
    pub client_ids: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_GetAuthSessionsForAccount_Response {
    fn default() -> &'a CAuthentication_GetAuthSessionsForAccount_Response {
        <CAuthentication_GetAuthSessionsForAccount_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_GetAuthSessionsForAccount_Response {
    pub fn new() -> CAuthentication_GetAuthSessionsForAccount_Response {
        ::std::default::Default::default()
    }

    // repeated uint64 client_ids = 1;


    pub fn get_client_ids(&self) -> &[u64] {
        &self.client_ids
    }
    pub fn clear_client_ids(&mut self) {
        self.client_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.client_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_client_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.client_ids
    }

    // Take field
    pub fn take_client_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.client_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CAuthentication_GetAuthSessionsForAccount_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.client_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.client_ids {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.client_ids {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_GetAuthSessionsForAccount_Response {
        CAuthentication_GetAuthSessionsForAccount_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_ids",
                |m: &CAuthentication_GetAuthSessionsForAccount_Response| { &m.client_ids },
                |m: &mut CAuthentication_GetAuthSessionsForAccount_Response| { &mut m.client_ids },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_GetAuthSessionsForAccount_Response>(
                "CAuthentication_GetAuthSessionsForAccount_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_GetAuthSessionsForAccount_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_GetAuthSessionsForAccount_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_GetAuthSessionsForAccount_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_GetAuthSessionsForAccount_Response {
    fn clear(&mut self) {
        self.client_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_GetAuthSessionsForAccount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_GetAuthSessionsForAccount_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_MigrateMobileSession_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    token: ::protobuf::SingularField<::std::string::String>,
    signature: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_MigrateMobileSession_Request {
    fn default() -> &'a CAuthentication_MigrateMobileSession_Request {
        <CAuthentication_MigrateMobileSession_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_MigrateMobileSession_Request {
    pub fn new() -> CAuthentication_MigrateMobileSession_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string token = 2;


    pub fn get_token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string signature = 3;


    pub fn get_signature(&self) -> &str {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        self.signature.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_MigrateMobileSession_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(ref v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.token.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_MigrateMobileSession_Request {
        CAuthentication_MigrateMobileSession_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthentication_MigrateMobileSession_Request| { &m.steamid },
                |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &CAuthentication_MigrateMobileSession_Request| { &m.token },
                |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signature",
                |m: &CAuthentication_MigrateMobileSession_Request| { &m.signature },
                |m: &mut CAuthentication_MigrateMobileSession_Request| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_MigrateMobileSession_Request>(
                "CAuthentication_MigrateMobileSession_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_MigrateMobileSession_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_MigrateMobileSession_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_MigrateMobileSession_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_MigrateMobileSession_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.token.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_MigrateMobileSession_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_MigrateMobileSession_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_MigrateMobileSession_Response {
    // message fields
    refresh_token: ::protobuf::SingularField<::std::string::String>,
    access_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_MigrateMobileSession_Response {
    fn default() -> &'a CAuthentication_MigrateMobileSession_Response {
        <CAuthentication_MigrateMobileSession_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_MigrateMobileSession_Response {
    pub fn new() -> CAuthentication_MigrateMobileSession_Response {
        ::std::default::Default::default()
    }

    // optional string refresh_token = 1;


    pub fn get_refresh_token(&self) -> &str {
        match self.refresh_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    pub fn has_refresh_token(&self) -> bool {
        self.refresh_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        if self.refresh_token.is_none() {
            self.refresh_token.set_default();
        }
        self.refresh_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        self.refresh_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string access_token = 2;


    pub fn get_access_token(&self) -> &str {
        match self.access_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if self.access_token.is_none() {
            self.access_token.set_default();
        }
        self.access_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        self.access_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CAuthentication_MigrateMobileSession_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.access_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.refresh_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.access_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.refresh_token.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.access_token.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_MigrateMobileSession_Response {
        CAuthentication_MigrateMobileSession_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &CAuthentication_MigrateMobileSession_Response| { &m.refresh_token },
                |m: &mut CAuthentication_MigrateMobileSession_Response| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &CAuthentication_MigrateMobileSession_Response| { &m.access_token },
                |m: &mut CAuthentication_MigrateMobileSession_Response| { &mut m.access_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_MigrateMobileSession_Response>(
                "CAuthentication_MigrateMobileSession_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_MigrateMobileSession_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_MigrateMobileSession_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_MigrateMobileSession_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_MigrateMobileSession_Response {
    fn clear(&mut self) {
        self.refresh_token.clear();
        self.access_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_MigrateMobileSession_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_MigrateMobileSession_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_Token_Revoke_Request {
    // message fields
    token: ::protobuf::SingularField<::std::string::String>,
    revoke_action: ::std::option::Option<EAuthTokenRevokeAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_Token_Revoke_Request {
    fn default() -> &'a CAuthentication_Token_Revoke_Request {
        <CAuthentication_Token_Revoke_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_Token_Revoke_Request {
    pub fn new() -> CAuthentication_Token_Revoke_Request {
        ::std::default::Default::default()
    }

    // optional string token = 1;


    pub fn get_token(&self) -> &str {
        match self.token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        self.token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .EAuthTokenRevokeAction revoke_action = 2;


    pub fn get_revoke_action(&self) -> EAuthTokenRevokeAction {
        self.revoke_action.unwrap_or(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent)
    }
    pub fn clear_revoke_action(&mut self) {
        self.revoke_action = ::std::option::Option::None;
    }

    pub fn has_revoke_action(&self) -> bool {
        self.revoke_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revoke_action(&mut self, v: EAuthTokenRevokeAction) {
        self.revoke_action = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthentication_Token_Revoke_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.revoke_action, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.revoke_action {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.token.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.revoke_action {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_Token_Revoke_Request {
        CAuthentication_Token_Revoke_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &CAuthentication_Token_Revoke_Request| { &m.token },
                |m: &mut CAuthentication_Token_Revoke_Request| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenRevokeAction>>(
                "revoke_action",
                |m: &CAuthentication_Token_Revoke_Request| { &m.revoke_action },
                |m: &mut CAuthentication_Token_Revoke_Request| { &mut m.revoke_action },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_Token_Revoke_Request>(
                "CAuthentication_Token_Revoke_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_Token_Revoke_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_Token_Revoke_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_Token_Revoke_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_Token_Revoke_Request {
    fn clear(&mut self) {
        self.token.clear();
        self.revoke_action = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_Token_Revoke_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_Token_Revoke_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_Token_Revoke_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_Token_Revoke_Response {
    fn default() -> &'a CAuthentication_Token_Revoke_Response {
        <CAuthentication_Token_Revoke_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_Token_Revoke_Response {
    pub fn new() -> CAuthentication_Token_Revoke_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthentication_Token_Revoke_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_Token_Revoke_Response {
        CAuthentication_Token_Revoke_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_Token_Revoke_Response>(
                "CAuthentication_Token_Revoke_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_Token_Revoke_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_Token_Revoke_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_Token_Revoke_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_Token_Revoke_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_Token_Revoke_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_Token_Revoke_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Revoke_Request {
    // message fields
    token_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    revoke_action: ::std::option::Option<EAuthTokenRevokeAction>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Revoke_Request {
    fn default() -> &'a CAuthentication_RefreshToken_Revoke_Request {
        <CAuthentication_RefreshToken_Revoke_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Revoke_Request {
    pub fn new() -> CAuthentication_RefreshToken_Revoke_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenRevokeAction revoke_action = 3;


    pub fn get_revoke_action(&self) -> EAuthTokenRevokeAction {
        self.revoke_action.unwrap_or(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent)
    }
    pub fn clear_revoke_action(&mut self) {
        self.revoke_action = ::std::option::Option::None;
    }

    pub fn has_revoke_action(&self) -> bool {
        self.revoke_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revoke_action(&mut self, v: EAuthTokenRevokeAction) {
        self.revoke_action = ::std::option::Option::Some(v);
    }

    // optional bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Revoke_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.revoke_action, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.revoke_action {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.revoke_action {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Revoke_Request {
        CAuthentication_RefreshToken_Revoke_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.token_id },
                |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.token_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.steamid },
                |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenRevokeAction>>(
                "revoke_action",
                |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.revoke_action },
                |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.revoke_action },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &CAuthentication_RefreshToken_Revoke_Request| { &m.signature },
                |m: &mut CAuthentication_RefreshToken_Revoke_Request| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Revoke_Request>(
                "CAuthentication_RefreshToken_Revoke_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Revoke_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Revoke_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Revoke_Request::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Revoke_Request {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.revoke_action = ::std::option::Option::None;
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Revoke_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Revoke_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthentication_RefreshToken_Revoke_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthentication_RefreshToken_Revoke_Response {
    fn default() -> &'a CAuthentication_RefreshToken_Revoke_Response {
        <CAuthentication_RefreshToken_Revoke_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthentication_RefreshToken_Revoke_Response {
    pub fn new() -> CAuthentication_RefreshToken_Revoke_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthentication_RefreshToken_Revoke_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthentication_RefreshToken_Revoke_Response {
        CAuthentication_RefreshToken_Revoke_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthentication_RefreshToken_Revoke_Response>(
                "CAuthentication_RefreshToken_Revoke_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthentication_RefreshToken_Revoke_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthentication_RefreshToken_Revoke_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthentication_RefreshToken_Revoke_Response::new)
    }
}

impl ::protobuf::Clear for CAuthentication_RefreshToken_Revoke_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthentication_RefreshToken_Revoke_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthentication_RefreshToken_Revoke_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    include_revoked_tokens: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        <CAuthenticationSupport_QueryRefreshTokensByAccount_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool include_revoked_tokens = 2;


    pub fn get_include_revoked_tokens(&self) -> bool {
        self.include_revoked_tokens.unwrap_or(false)
    }
    pub fn clear_include_revoked_tokens(&mut self) {
        self.include_revoked_tokens = ::std::option::Option::None;
    }

    pub fn has_include_revoked_tokens(&self) -> bool {
        self.include_revoked_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_include_revoked_tokens(&mut self, v: bool) {
        self.include_revoked_tokens = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_revoked_tokens = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.include_revoked_tokens {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.include_revoked_tokens {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        CAuthenticationSupport_QueryRefreshTokensByAccount_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &m.steamid },
                |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "include_revoked_tokens",
                |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &m.include_revoked_tokens },
                |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Request| { &mut m.include_revoked_tokens },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_QueryRefreshTokensByAccount_Request>(
                "CAuthenticationSupport_QueryRefreshTokensByAccount_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_QueryRefreshTokensByAccount_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_QueryRefreshTokensByAccount_Request::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.include_revoked_tokens = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CSupportRefreshTokenDescription {
    // message fields
    token_id: ::std::option::Option<u64>,
    token_description: ::protobuf::SingularField<::std::string::String>,
    time_updated: ::std::option::Option<u32>,
    platform_type: ::std::option::Option<EAuthTokenPlatformType>,
    token_state: ::std::option::Option<EAuthTokenState>,
    owner_steamid: ::std::option::Option<u64>,
    os_platform: ::std::option::Option<u32>,
    os_type: ::std::option::Option<i32>,
    auth_type: ::std::option::Option<u32>,
    gaming_device_type: ::std::option::Option<u32>,
    pub first_seen: ::protobuf::SingularPtrField<CSupportRefreshTokenDescription_TokenUsageEvent>,
    pub last_seen: ::protobuf::SingularPtrField<CSupportRefreshTokenDescription_TokenUsageEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSupportRefreshTokenDescription {
    fn default() -> &'a CSupportRefreshTokenDescription {
        <CSupportRefreshTokenDescription as ::protobuf::Message>::default_instance()
    }
}

impl CSupportRefreshTokenDescription {
    pub fn new() -> CSupportRefreshTokenDescription {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional string token_description = 2;


    pub fn get_token_description(&self) -> &str {
        match self.token_description.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_token_description(&mut self) {
        self.token_description.clear();
    }

    pub fn has_token_description(&self) -> bool {
        self.token_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_description(&mut self, v: ::std::string::String) {
        self.token_description = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_description(&mut self) -> &mut ::std::string::String {
        if self.token_description.is_none() {
            self.token_description.set_default();
        }
        self.token_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_description(&mut self) -> ::std::string::String {
        self.token_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_updated = 3;


    pub fn get_time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }
    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenPlatformType platform_type = 4;


    pub fn get_platform_type(&self) -> EAuthTokenPlatformType {
        self.platform_type.unwrap_or(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown)
    }
    pub fn clear_platform_type(&mut self) {
        self.platform_type = ::std::option::Option::None;
    }

    pub fn has_platform_type(&self) -> bool {
        self.platform_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform_type(&mut self, v: EAuthTokenPlatformType) {
        self.platform_type = ::std::option::Option::Some(v);
    }

    // optional .EAuthTokenState token_state = 5;


    pub fn get_token_state(&self) -> EAuthTokenState {
        self.token_state.unwrap_or(EAuthTokenState::k_EAuthTokenState_Invalid)
    }
    pub fn clear_token_state(&mut self) {
        self.token_state = ::std::option::Option::None;
    }

    pub fn has_token_state(&self) -> bool {
        self.token_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_state(&mut self, v: EAuthTokenState) {
        self.token_state = ::std::option::Option::Some(v);
    }

    // optional fixed64 owner_steamid = 6;


    pub fn get_owner_steamid(&self) -> u64 {
        self.owner_steamid.unwrap_or(0)
    }
    pub fn clear_owner_steamid(&mut self) {
        self.owner_steamid = ::std::option::Option::None;
    }

    pub fn has_owner_steamid(&self) -> bool {
        self.owner_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_steamid(&mut self, v: u64) {
        self.owner_steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 os_platform = 7;


    pub fn get_os_platform(&self) -> u32 {
        self.os_platform.unwrap_or(0)
    }
    pub fn clear_os_platform(&mut self) {
        self.os_platform = ::std::option::Option::None;
    }

    pub fn has_os_platform(&self) -> bool {
        self.os_platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_platform(&mut self, v: u32) {
        self.os_platform = ::std::option::Option::Some(v);
    }

    // optional int32 os_type = 8;


    pub fn get_os_type(&self) -> i32 {
        self.os_type.unwrap_or(0)
    }
    pub fn clear_os_type(&mut self) {
        self.os_type = ::std::option::Option::None;
    }

    pub fn has_os_type(&self) -> bool {
        self.os_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_os_type(&mut self, v: i32) {
        self.os_type = ::std::option::Option::Some(v);
    }

    // optional uint32 auth_type = 9;


    pub fn get_auth_type(&self) -> u32 {
        self.auth_type.unwrap_or(0)
    }
    pub fn clear_auth_type(&mut self) {
        self.auth_type = ::std::option::Option::None;
    }

    pub fn has_auth_type(&self) -> bool {
        self.auth_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_type(&mut self, v: u32) {
        self.auth_type = ::std::option::Option::Some(v);
    }

    // optional uint32 gaming_device_type = 10;


    pub fn get_gaming_device_type(&self) -> u32 {
        self.gaming_device_type.unwrap_or(0)
    }
    pub fn clear_gaming_device_type(&mut self) {
        self.gaming_device_type = ::std::option::Option::None;
    }

    pub fn has_gaming_device_type(&self) -> bool {
        self.gaming_device_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gaming_device_type(&mut self, v: u32) {
        self.gaming_device_type = ::std::option::Option::Some(v);
    }

    // optional .CSupportRefreshTokenDescription.TokenUsageEvent first_seen = 11;


    pub fn get_first_seen(&self) -> &CSupportRefreshTokenDescription_TokenUsageEvent {
        self.first_seen.as_ref().unwrap_or_else(|| <CSupportRefreshTokenDescription_TokenUsageEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_first_seen(&mut self) {
        self.first_seen.clear();
    }

    pub fn has_first_seen(&self) -> bool {
        self.first_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen(&mut self, v: CSupportRefreshTokenDescription_TokenUsageEvent) {
        self.first_seen = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen(&mut self) -> &mut CSupportRefreshTokenDescription_TokenUsageEvent {
        if self.first_seen.is_none() {
            self.first_seen.set_default();
        }
        self.first_seen.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_seen(&mut self) -> CSupportRefreshTokenDescription_TokenUsageEvent {
        self.first_seen.take().unwrap_or_else(|| CSupportRefreshTokenDescription_TokenUsageEvent::new())
    }

    // optional .CSupportRefreshTokenDescription.TokenUsageEvent last_seen = 12;


    pub fn get_last_seen(&self) -> &CSupportRefreshTokenDescription_TokenUsageEvent {
        self.last_seen.as_ref().unwrap_or_else(|| <CSupportRefreshTokenDescription_TokenUsageEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_seen(&mut self) {
        self.last_seen.clear();
    }

    pub fn has_last_seen(&self) -> bool {
        self.last_seen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen(&mut self, v: CSupportRefreshTokenDescription_TokenUsageEvent) {
        self.last_seen = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen(&mut self) -> &mut CSupportRefreshTokenDescription_TokenUsageEvent {
        if self.last_seen.is_none() {
            self.last_seen.set_default();
        }
        self.last_seen.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_seen(&mut self) -> CSupportRefreshTokenDescription_TokenUsageEvent {
        self.last_seen.take().unwrap_or_else(|| CSupportRefreshTokenDescription_TokenUsageEvent::new())
    }
}

impl ::protobuf::Message for CSupportRefreshTokenDescription {
    fn is_initialized(&self) -> bool {
        for v in &self.first_seen {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_seen {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.token_description)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_updated = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.platform_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.token_state, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.owner_steamid = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.os_platform = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_type = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.auth_type = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gaming_device_type = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_seen)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_seen)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        if let Some(ref v) = self.token_description.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.platform_type {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.token_state {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        if let Some(v) = self.owner_steamid {
            my_size += 9;
        }
        if let Some(v) = self.os_platform {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.os_type {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.auth_type {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gaming_device_type {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.first_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_seen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(ref v) = self.token_description.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.platform_type {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.token_state {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.owner_steamid {
            os.write_fixed64(6, v)?;
        }
        if let Some(v) = self.os_platform {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.os_type {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.auth_type {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.gaming_device_type {
            os.write_uint32(10, v)?;
        }
        if let Some(ref v) = self.first_seen.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_seen.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSupportRefreshTokenDescription {
        CSupportRefreshTokenDescription::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CSupportRefreshTokenDescription| { &m.token_id },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.token_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_description",
                |m: &CSupportRefreshTokenDescription| { &m.token_description },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.token_description },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time_updated",
                |m: &CSupportRefreshTokenDescription| { &m.time_updated },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.time_updated },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenPlatformType>>(
                "platform_type",
                |m: &CSupportRefreshTokenDescription| { &m.platform_type },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.platform_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EAuthTokenState>>(
                "token_state",
                |m: &CSupportRefreshTokenDescription| { &m.token_state },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.token_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "owner_steamid",
                |m: &CSupportRefreshTokenDescription| { &m.owner_steamid },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.owner_steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "os_platform",
                |m: &CSupportRefreshTokenDescription| { &m.os_platform },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.os_platform },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "os_type",
                |m: &CSupportRefreshTokenDescription| { &m.os_type },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.os_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "auth_type",
                |m: &CSupportRefreshTokenDescription| { &m.auth_type },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.auth_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gaming_device_type",
                |m: &CSupportRefreshTokenDescription| { &m.gaming_device_type },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.gaming_device_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CSupportRefreshTokenDescription_TokenUsageEvent>>(
                "first_seen",
                |m: &CSupportRefreshTokenDescription| { &m.first_seen },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.first_seen },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CSupportRefreshTokenDescription_TokenUsageEvent>>(
                "last_seen",
                |m: &CSupportRefreshTokenDescription| { &m.last_seen },
                |m: &mut CSupportRefreshTokenDescription| { &mut m.last_seen },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CSupportRefreshTokenDescription>(
                "CSupportRefreshTokenDescription",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSupportRefreshTokenDescription {
        static instance: ::protobuf::rt::LazyV2<CSupportRefreshTokenDescription> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CSupportRefreshTokenDescription::new)
    }
}

impl ::protobuf::Clear for CSupportRefreshTokenDescription {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.token_description.clear();
        self.time_updated = ::std::option::Option::None;
        self.platform_type = ::std::option::Option::None;
        self.token_state = ::std::option::Option::None;
        self.owner_steamid = ::std::option::Option::None;
        self.os_platform = ::std::option::Option::None;
        self.os_type = ::std::option::Option::None;
        self.auth_type = ::std::option::Option::None;
        self.gaming_device_type = ::std::option::Option::None;
        self.first_seen.clear();
        self.last_seen.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSupportRefreshTokenDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSupportRefreshTokenDescription {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CSupportRefreshTokenDescription_TokenUsageEvent {
    // message fields
    time: ::std::option::Option<u32>,
    pub ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    country: ::protobuf::SingularField<::std::string::String>,
    state: ::protobuf::SingularField<::std::string::String>,
    city: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSupportRefreshTokenDescription_TokenUsageEvent {
    fn default() -> &'a CSupportRefreshTokenDescription_TokenUsageEvent {
        <CSupportRefreshTokenDescription_TokenUsageEvent as ::protobuf::Message>::default_instance()
    }
}

impl CSupportRefreshTokenDescription_TokenUsageEvent {
    pub fn new() -> CSupportRefreshTokenDescription_TokenUsageEvent {
        ::std::default::Default::default()
    }

    // optional uint32 time = 1;


    pub fn get_time(&self) -> u32 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress ip = 2;


    pub fn get_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.ip.as_ref().unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.ip.is_none() {
            self.ip.set_default();
        }
        self.ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.ip.take().unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional string country = 3;


    pub fn get_country(&self) -> &str {
        match self.country.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_country(&mut self) {
        self.country.clear();
    }

    pub fn has_country(&self) -> bool {
        self.country.is_some()
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::std::string::String) {
        self.country = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::std::string::String {
        if self.country.is_none() {
            self.country.set_default();
        }
        self.country.as_mut().unwrap()
    }

    // Take field
    pub fn take_country(&mut self) -> ::std::string::String {
        self.country.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string state = 4;


    pub fn get_state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string city = 5;


    pub fn get_city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city.set_default();
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CSupportRefreshTokenDescription_TokenUsageEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.ip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.country)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.state)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.city)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.country.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.ip.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.country.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.city.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSupportRefreshTokenDescription_TokenUsageEvent {
        CSupportRefreshTokenDescription_TokenUsageEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &CSupportRefreshTokenDescription_TokenUsageEvent| { &m.time },
                |m: &mut CSupportRefreshTokenDescription_TokenUsageEvent| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>>(
                "ip",
                |m: &CSupportRefreshTokenDescription_TokenUsageEvent| { &m.ip },
                |m: &mut CSupportRefreshTokenDescription_TokenUsageEvent| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country",
                |m: &CSupportRefreshTokenDescription_TokenUsageEvent| { &m.country },
                |m: &mut CSupportRefreshTokenDescription_TokenUsageEvent| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "state",
                |m: &CSupportRefreshTokenDescription_TokenUsageEvent| { &m.state },
                |m: &mut CSupportRefreshTokenDescription_TokenUsageEvent| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "city",
                |m: &CSupportRefreshTokenDescription_TokenUsageEvent| { &m.city },
                |m: &mut CSupportRefreshTokenDescription_TokenUsageEvent| { &mut m.city },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CSupportRefreshTokenDescription_TokenUsageEvent>(
                "CSupportRefreshTokenDescription.TokenUsageEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSupportRefreshTokenDescription_TokenUsageEvent {
        static instance: ::protobuf::rt::LazyV2<CSupportRefreshTokenDescription_TokenUsageEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CSupportRefreshTokenDescription_TokenUsageEvent::new)
    }
}

impl ::protobuf::Clear for CSupportRefreshTokenDescription_TokenUsageEvent {
    fn clear(&mut self) {
        self.time = ::std::option::Option::None;
        self.ip.clear();
        self.country.clear();
        self.state.clear();
        self.city.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSupportRefreshTokenDescription_TokenUsageEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSupportRefreshTokenDescription_TokenUsageEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    // message fields
    pub refresh_tokens: ::protobuf::RepeatedField<CSupportRefreshTokenDescription>,
    last_token_reset: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        <CAuthenticationSupport_QueryRefreshTokensByAccount_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenDescription refresh_tokens = 1;


    pub fn get_refresh_tokens(&self) -> &[CSupportRefreshTokenDescription] {
        &self.refresh_tokens
    }
    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::protobuf::RepeatedField<CSupportRefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::protobuf::RepeatedField<CSupportRefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::protobuf::RepeatedField<CSupportRefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::protobuf::RepeatedField::new())
    }

    // optional int32 last_token_reset = 2;


    pub fn get_last_token_reset(&self) -> i32 {
        self.last_token_reset.unwrap_or(0)
    }
    pub fn clear_last_token_reset(&mut self) {
        self.last_token_reset = ::std::option::Option::None;
    }

    pub fn has_last_token_reset(&self) -> bool {
        self.last_token_reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_token_reset(&mut self, v: i32) {
        self.last_token_reset = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.refresh_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.refresh_tokens)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.last_token_reset = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.last_token_reset {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.refresh_tokens {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.last_token_reset {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        CAuthenticationSupport_QueryRefreshTokensByAccount_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CSupportRefreshTokenDescription>>(
                "refresh_tokens",
                |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &m.refresh_tokens },
                |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &mut m.refresh_tokens },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "last_token_reset",
                |m: &CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &m.last_token_reset },
                |m: &mut CAuthenticationSupport_QueryRefreshTokensByAccount_Response| { &mut m.last_token_reset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_QueryRefreshTokensByAccount_Response>(
                "CAuthenticationSupport_QueryRefreshTokensByAccount_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_QueryRefreshTokensByAccount_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_QueryRefreshTokensByAccount_Response::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.last_token_reset = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_QueryRefreshTokenByID_Request {
    // message fields
    token_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokenByID_Request {
        <CAuthenticationSupport_QueryRefreshTokenByID_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokenByID_Request {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Request {
        CAuthenticationSupport_QueryRefreshTokenByID_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CAuthenticationSupport_QueryRefreshTokenByID_Request| { &m.token_id },
                |m: &mut CAuthenticationSupport_QueryRefreshTokenByID_Request| { &mut m.token_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_QueryRefreshTokenByID_Request>(
                "CAuthenticationSupport_QueryRefreshTokenByID_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokenByID_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_QueryRefreshTokenByID_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_QueryRefreshTokenByID_Request::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokenByID_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_QueryRefreshTokenByID_Response {
    // message fields
    pub refresh_tokens: ::protobuf::RepeatedField<CSupportRefreshTokenDescription>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn default() -> &'a CAuthenticationSupport_QueryRefreshTokenByID_Response {
        <CAuthenticationSupport_QueryRefreshTokenByID_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_QueryRefreshTokenByID_Response {
    pub fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenDescription refresh_tokens = 1;


    pub fn get_refresh_tokens(&self) -> &[CSupportRefreshTokenDescription] {
        &self.refresh_tokens
    }
    pub fn clear_refresh_tokens(&mut self) {
        self.refresh_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_tokens(&mut self, v: ::protobuf::RepeatedField<CSupportRefreshTokenDescription>) {
        self.refresh_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_refresh_tokens(&mut self) -> &mut ::protobuf::RepeatedField<CSupportRefreshTokenDescription> {
        &mut self.refresh_tokens
    }

    // Take field
    pub fn take_refresh_tokens(&mut self) -> ::protobuf::RepeatedField<CSupportRefreshTokenDescription> {
        ::std::mem::replace(&mut self.refresh_tokens, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.refresh_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.refresh_tokens)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.refresh_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.refresh_tokens {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_QueryRefreshTokenByID_Response {
        CAuthenticationSupport_QueryRefreshTokenByID_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CSupportRefreshTokenDescription>>(
                "refresh_tokens",
                |m: &CAuthenticationSupport_QueryRefreshTokenByID_Response| { &m.refresh_tokens },
                |m: &mut CAuthenticationSupport_QueryRefreshTokenByID_Response| { &mut m.refresh_tokens },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_QueryRefreshTokenByID_Response>(
                "CAuthenticationSupport_QueryRefreshTokenByID_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_QueryRefreshTokenByID_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_QueryRefreshTokenByID_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_QueryRefreshTokenByID_Response::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn clear(&mut self) {
        self.refresh_tokens.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_QueryRefreshTokenByID_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_RevokeToken_Request {
    // message fields
    token_id: ::std::option::Option<u64>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_RevokeToken_Request {
    fn default() -> &'a CAuthenticationSupport_RevokeToken_Request {
        <CAuthenticationSupport_RevokeToken_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_RevokeToken_Request {
    pub fn new() -> CAuthenticationSupport_RevokeToken_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthenticationSupport_RevokeToken_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_RevokeToken_Request {
        CAuthenticationSupport_RevokeToken_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CAuthenticationSupport_RevokeToken_Request| { &m.token_id },
                |m: &mut CAuthenticationSupport_RevokeToken_Request| { &mut m.token_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CAuthenticationSupport_RevokeToken_Request| { &m.steamid },
                |m: &mut CAuthenticationSupport_RevokeToken_Request| { &mut m.steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_RevokeToken_Request>(
                "CAuthenticationSupport_RevokeToken_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_RevokeToken_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_RevokeToken_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_RevokeToken_Request::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_RevokeToken_Request {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_RevokeToken_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_RevokeToken_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_RevokeToken_Response {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_RevokeToken_Response {
    fn default() -> &'a CAuthenticationSupport_RevokeToken_Response {
        <CAuthenticationSupport_RevokeToken_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_RevokeToken_Response {
    pub fn new() -> CAuthenticationSupport_RevokeToken_Response {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CAuthenticationSupport_RevokeToken_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_RevokeToken_Response {
        CAuthenticationSupport_RevokeToken_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_RevokeToken_Response>(
                "CAuthenticationSupport_RevokeToken_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_RevokeToken_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_RevokeToken_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_RevokeToken_Response::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_RevokeToken_Response {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_RevokeToken_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_RevokeToken_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_GetTokenHistory_Request {
    // message fields
    token_id: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_GetTokenHistory_Request {
    fn default() -> &'a CAuthenticationSupport_GetTokenHistory_Request {
        <CAuthenticationSupport_GetTokenHistory_Request as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_GetTokenHistory_Request {
    pub fn new() -> CAuthenticationSupport_GetTokenHistory_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 token_id = 1;


    pub fn get_token_id(&self) -> u64 {
        self.token_id.unwrap_or(0)
    }
    pub fn clear_token_id(&mut self) {
        self.token_id = ::std::option::Option::None;
    }

    pub fn has_token_id(&self) -> bool {
        self.token_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_id(&mut self, v: u64) {
        self.token_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CAuthenticationSupport_GetTokenHistory_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.token_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.token_id {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_id {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_GetTokenHistory_Request {
        CAuthenticationSupport_GetTokenHistory_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "token_id",
                |m: &CAuthenticationSupport_GetTokenHistory_Request| { &m.token_id },
                |m: &mut CAuthenticationSupport_GetTokenHistory_Request| { &mut m.token_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_GetTokenHistory_Request>(
                "CAuthenticationSupport_GetTokenHistory_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_GetTokenHistory_Request {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_GetTokenHistory_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_GetTokenHistory_Request::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_GetTokenHistory_Request {
    fn clear(&mut self) {
        self.token_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_GetTokenHistory_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_GetTokenHistory_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CSupportRefreshTokenAudit {
    // message fields
    action: ::std::option::Option<i32>,
    time: ::std::option::Option<u32>,
    pub ip: ::protobuf::SingularPtrField<super::steammessages_base::CMsgIPAddress>,
    actor: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CSupportRefreshTokenAudit {
    fn default() -> &'a CSupportRefreshTokenAudit {
        <CSupportRefreshTokenAudit as ::protobuf::Message>::default_instance()
    }
}

impl CSupportRefreshTokenAudit {
    pub fn new() -> CSupportRefreshTokenAudit {
        ::std::default::Default::default()
    }

    // optional int32 action = 1;


    pub fn get_action(&self) -> i32 {
        self.action.unwrap_or(0)
    }
    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: i32) {
        self.action = ::std::option::Option::Some(v);
    }

    // optional uint32 time = 2;


    pub fn get_time(&self) -> u32 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = ::std::option::Option::Some(v);
    }

    // optional .CMsgIPAddress ip = 3;


    pub fn get_ip(&self) -> &super::steammessages_base::CMsgIPAddress {
        self.ip.as_ref().unwrap_or_else(|| <super::steammessages_base::CMsgIPAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    pub fn has_ip(&self) -> bool {
        self.ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: super::steammessages_base::CMsgIPAddress) {
        self.ip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut super::steammessages_base::CMsgIPAddress {
        if self.ip.is_none() {
            self.ip.set_default();
        }
        self.ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip(&mut self) -> super::steammessages_base::CMsgIPAddress {
        self.ip.take().unwrap_or_else(|| super::steammessages_base::CMsgIPAddress::new())
    }

    // optional fixed64 actor = 4;


    pub fn get_actor(&self) -> u64 {
        self.actor.unwrap_or(0)
    }
    pub fn clear_actor(&mut self) {
        self.actor = ::std::option::Option::None;
    }

    pub fn has_actor(&self) -> bool {
        self.actor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actor(&mut self, v: u64) {
        self.actor = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CSupportRefreshTokenAudit {
    fn is_initialized(&self) -> bool {
        for v in &self.ip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.action = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ip)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.actor = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.actor {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.action {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.time {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.ip.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.actor {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CSupportRefreshTokenAudit {
        CSupportRefreshTokenAudit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "action",
                |m: &CSupportRefreshTokenAudit| { &m.action },
                |m: &mut CSupportRefreshTokenAudit| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &CSupportRefreshTokenAudit| { &m.time },
                |m: &mut CSupportRefreshTokenAudit| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::steammessages_base::CMsgIPAddress>>(
                "ip",
                |m: &CSupportRefreshTokenAudit| { &m.ip },
                |m: &mut CSupportRefreshTokenAudit| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "actor",
                |m: &CSupportRefreshTokenAudit| { &m.actor },
                |m: &mut CSupportRefreshTokenAudit| { &mut m.actor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CSupportRefreshTokenAudit>(
                "CSupportRefreshTokenAudit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CSupportRefreshTokenAudit {
        static instance: ::protobuf::rt::LazyV2<CSupportRefreshTokenAudit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CSupportRefreshTokenAudit::new)
    }
}

impl ::protobuf::Clear for CSupportRefreshTokenAudit {
    fn clear(&mut self) {
        self.action = ::std::option::Option::None;
        self.time = ::std::option::Option::None;
        self.ip.clear();
        self.actor = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CSupportRefreshTokenAudit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSupportRefreshTokenAudit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CAuthenticationSupport_GetTokenHistory_Response {
    // message fields
    pub history: ::protobuf::RepeatedField<CSupportRefreshTokenAudit>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CAuthenticationSupport_GetTokenHistory_Response {
    fn default() -> &'a CAuthenticationSupport_GetTokenHistory_Response {
        <CAuthenticationSupport_GetTokenHistory_Response as ::protobuf::Message>::default_instance()
    }
}

impl CAuthenticationSupport_GetTokenHistory_Response {
    pub fn new() -> CAuthenticationSupport_GetTokenHistory_Response {
        ::std::default::Default::default()
    }

    // repeated .CSupportRefreshTokenAudit history = 1;


    pub fn get_history(&self) -> &[CSupportRefreshTokenAudit] {
        &self.history
    }
    pub fn clear_history(&mut self) {
        self.history.clear();
    }

    // Param is passed by value, moved
    pub fn set_history(&mut self, v: ::protobuf::RepeatedField<CSupportRefreshTokenAudit>) {
        self.history = v;
    }

    // Mutable pointer to the field.
    pub fn mut_history(&mut self) -> &mut ::protobuf::RepeatedField<CSupportRefreshTokenAudit> {
        &mut self.history
    }

    // Take field
    pub fn take_history(&mut self) -> ::protobuf::RepeatedField<CSupportRefreshTokenAudit> {
        ::std::mem::replace(&mut self.history, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CAuthenticationSupport_GetTokenHistory_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.history {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.history)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.history {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.history {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CAuthenticationSupport_GetTokenHistory_Response {
        CAuthenticationSupport_GetTokenHistory_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CSupportRefreshTokenAudit>>(
                "history",
                |m: &CAuthenticationSupport_GetTokenHistory_Response| { &m.history },
                |m: &mut CAuthenticationSupport_GetTokenHistory_Response| { &mut m.history },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CAuthenticationSupport_GetTokenHistory_Response>(
                "CAuthenticationSupport_GetTokenHistory_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CAuthenticationSupport_GetTokenHistory_Response {
        static instance: ::protobuf::rt::LazyV2<CAuthenticationSupport_GetTokenHistory_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CAuthenticationSupport_GetTokenHistory_Response::new)
    }
}

impl ::protobuf::Clear for CAuthenticationSupport_GetTokenHistory_Response {
    fn clear(&mut self) {
        self.history.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CAuthenticationSupport_GetTokenHistory_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAuthenticationSupport_GetTokenHistory_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCloudGaming_CreateNonce_Request {
    // message fields
    platform: ::protobuf::SingularField<::std::string::String>,
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Request {
    fn default() -> &'a CCloudGaming_CreateNonce_Request {
        <CCloudGaming_CreateNonce_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Request {
    pub fn new() -> CCloudGaming_CreateNonce_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;


    pub fn get_platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_platform(&mut self) {
        self.platform.clear();
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform.set_default();
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCloudGaming_CreateNonce_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.platform)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.platform.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.platform.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCloudGaming_CreateNonce_Request {
        CCloudGaming_CreateNonce_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "platform",
                |m: &CCloudGaming_CreateNonce_Request| { &m.platform },
                |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.platform },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCloudGaming_CreateNonce_Request| { &m.appid },
                |m: &mut CCloudGaming_CreateNonce_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCloudGaming_CreateNonce_Request>(
                "CCloudGaming_CreateNonce_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Request {
        static instance: ::protobuf::rt::LazyV2<CCloudGaming_CreateNonce_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCloudGaming_CreateNonce_Request::new)
    }
}

impl ::protobuf::Clear for CCloudGaming_CreateNonce_Request {
    fn clear(&mut self) {
        self.platform.clear();
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCloudGaming_CreateNonce_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_CreateNonce_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCloudGaming_CreateNonce_Response {
    // message fields
    nonce: ::protobuf::SingularField<::std::string::String>,
    expiry: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_CreateNonce_Response {
    fn default() -> &'a CCloudGaming_CreateNonce_Response {
        <CCloudGaming_CreateNonce_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_CreateNonce_Response {
    pub fn new() -> CCloudGaming_CreateNonce_Response {
        ::std::default::Default::default()
    }

    // optional string nonce = 1;


    pub fn get_nonce(&self) -> &str {
        match self.nonce.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        if self.nonce.is_none() {
            self.nonce.set_default();
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        self.nonce.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 expiry = 2;


    pub fn get_expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCloudGaming_CreateNonce_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.nonce)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.expiry = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.nonce.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.expiry {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.nonce.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCloudGaming_CreateNonce_Response {
        CCloudGaming_CreateNonce_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &CCloudGaming_CreateNonce_Response| { &m.nonce },
                |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "expiry",
                |m: &CCloudGaming_CreateNonce_Response| { &m.expiry },
                |m: &mut CCloudGaming_CreateNonce_Response| { &mut m.expiry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCloudGaming_CreateNonce_Response>(
                "CCloudGaming_CreateNonce_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCloudGaming_CreateNonce_Response {
        static instance: ::protobuf::rt::LazyV2<CCloudGaming_CreateNonce_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCloudGaming_CreateNonce_Response::new)
    }
}

impl ::protobuf::Clear for CCloudGaming_CreateNonce_Response {
    fn clear(&mut self) {
        self.nonce.clear();
        self.expiry = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCloudGaming_CreateNonce_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_CreateNonce_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCloudGaming_GetTimeRemaining_Request {
    // message fields
    platform: ::protobuf::SingularField<::std::string::String>,
    pub appid_list: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Request {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Request {
        <CCloudGaming_GetTimeRemaining_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Request {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Request {
        ::std::default::Default::default()
    }

    // optional string platform = 1;


    pub fn get_platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_platform(&mut self) {
        self.platform.clear();
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform.set_default();
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 appid_list = 2;


    pub fn get_appid_list(&self) -> &[u32] {
        &self.appid_list
    }
    pub fn clear_appid_list(&mut self) {
        self.appid_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_appid_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.appid_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_appid_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.appid_list
    }

    // Take field
    pub fn take_appid_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.appid_list, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CCloudGaming_GetTimeRemaining_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.platform)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.appid_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.platform.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.appid_list {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.platform.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.appid_list {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Request {
        CCloudGaming_GetTimeRemaining_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "platform",
                |m: &CCloudGaming_GetTimeRemaining_Request| { &m.platform },
                |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.platform },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid_list",
                |m: &CCloudGaming_GetTimeRemaining_Request| { &m.appid_list },
                |m: &mut CCloudGaming_GetTimeRemaining_Request| { &mut m.appid_list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCloudGaming_GetTimeRemaining_Request>(
                "CCloudGaming_GetTimeRemaining_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Request {
        static instance: ::protobuf::rt::LazyV2<CCloudGaming_GetTimeRemaining_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCloudGaming_GetTimeRemaining_Request::new)
    }
}

impl ::protobuf::Clear for CCloudGaming_GetTimeRemaining_Request {
    fn clear(&mut self) {
        self.platform.clear();
        self.appid_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCloudGaming_GetTimeRemaining_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCloudGaming_TimeRemaining {
    // message fields
    appid: ::std::option::Option<u32>,
    minutes_remaining: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_TimeRemaining {
    fn default() -> &'a CCloudGaming_TimeRemaining {
        <CCloudGaming_TimeRemaining as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_TimeRemaining {
    pub fn new() -> CCloudGaming_TimeRemaining {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 minutes_remaining = 2;


    pub fn get_minutes_remaining(&self) -> u32 {
        self.minutes_remaining.unwrap_or(0)
    }
    pub fn clear_minutes_remaining(&mut self) {
        self.minutes_remaining = ::std::option::Option::None;
    }

    pub fn has_minutes_remaining(&self) -> bool {
        self.minutes_remaining.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minutes_remaining(&mut self, v: u32) {
        self.minutes_remaining = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCloudGaming_TimeRemaining {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minutes_remaining = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.minutes_remaining {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.minutes_remaining {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCloudGaming_TimeRemaining {
        CCloudGaming_TimeRemaining::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCloudGaming_TimeRemaining| { &m.appid },
                |m: &mut CCloudGaming_TimeRemaining| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minutes_remaining",
                |m: &CCloudGaming_TimeRemaining| { &m.minutes_remaining },
                |m: &mut CCloudGaming_TimeRemaining| { &mut m.minutes_remaining },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCloudGaming_TimeRemaining>(
                "CCloudGaming_TimeRemaining",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCloudGaming_TimeRemaining {
        static instance: ::protobuf::rt::LazyV2<CCloudGaming_TimeRemaining> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCloudGaming_TimeRemaining::new)
    }
}

impl ::protobuf::Clear for CCloudGaming_TimeRemaining {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.minutes_remaining = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCloudGaming_TimeRemaining {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_TimeRemaining {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCloudGaming_GetTimeRemaining_Response {
    // message fields
    pub entries: ::protobuf::RepeatedField<CCloudGaming_TimeRemaining>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCloudGaming_GetTimeRemaining_Response {
    fn default() -> &'a CCloudGaming_GetTimeRemaining_Response {
        <CCloudGaming_GetTimeRemaining_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloudGaming_GetTimeRemaining_Response {
    pub fn new() -> CCloudGaming_GetTimeRemaining_Response {
        ::std::default::Default::default()
    }

    // repeated .CCloudGaming_TimeRemaining entries = 2;


    pub fn get_entries(&self) -> &[CCloudGaming_TimeRemaining] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<CCloudGaming_TimeRemaining>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<CCloudGaming_TimeRemaining> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<CCloudGaming_TimeRemaining> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CCloudGaming_GetTimeRemaining_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCloudGaming_GetTimeRemaining_Response {
        CCloudGaming_GetTimeRemaining_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CCloudGaming_TimeRemaining>>(
                "entries",
                |m: &CCloudGaming_GetTimeRemaining_Response| { &m.entries },
                |m: &mut CCloudGaming_GetTimeRemaining_Response| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCloudGaming_GetTimeRemaining_Response>(
                "CCloudGaming_GetTimeRemaining_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCloudGaming_GetTimeRemaining_Response {
        static instance: ::protobuf::rt::LazyV2<CCloudGaming_GetTimeRemaining_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCloudGaming_GetTimeRemaining_Response::new)
    }
}

impl ::protobuf::Clear for CCloudGaming_GetTimeRemaining_Response {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCloudGaming_GetTimeRemaining_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloudGaming_GetTimeRemaining_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EAuthTokenPlatformType {
    k_EAuthTokenPlatformType_Unknown = 0,
    k_EAuthTokenPlatformType_SteamClient = 1,
    k_EAuthTokenPlatformType_WebBrowser = 2,
    k_EAuthTokenPlatformType_MobileApp = 3,
}

impl ::protobuf::ProtobufEnum for EAuthTokenPlatformType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenPlatformType> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown),
            1 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_SteamClient),
            2 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_WebBrowser),
            3 => ::std::option::Option::Some(EAuthTokenPlatformType::k_EAuthTokenPlatformType_MobileApp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EAuthTokenPlatformType] = &[
            EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown,
            EAuthTokenPlatformType::k_EAuthTokenPlatformType_SteamClient,
            EAuthTokenPlatformType::k_EAuthTokenPlatformType_WebBrowser,
            EAuthTokenPlatformType::k_EAuthTokenPlatformType_MobileApp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EAuthTokenPlatformType>("EAuthTokenPlatformType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EAuthTokenPlatformType {
}

impl ::std::default::Default for EAuthTokenPlatformType {
    fn default() -> Self {
        EAuthTokenPlatformType::k_EAuthTokenPlatformType_Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EAuthTokenPlatformType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EAuthSessionGuardType {
    k_EAuthSessionGuardType_Unknown = 0,
    k_EAuthSessionGuardType_None = 1,
    k_EAuthSessionGuardType_EmailCode = 2,
    k_EAuthSessionGuardType_DeviceCode = 3,
    k_EAuthSessionGuardType_DeviceConfirmation = 4,
    k_EAuthSessionGuardType_EmailConfirmation = 5,
    k_EAuthSessionGuardType_MachineToken = 6,
    k_EAuthSessionGuardType_LegacyMachineAuth = 7,
}

impl ::protobuf::ProtobufEnum for EAuthSessionGuardType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthSessionGuardType> {
        match value {
            0 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown),
            1 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_None),
            2 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailCode),
            3 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceCode),
            4 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceConfirmation),
            5 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_EmailConfirmation),
            6 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_MachineToken),
            7 => ::std::option::Option::Some(EAuthSessionGuardType::k_EAuthSessionGuardType_LegacyMachineAuth),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EAuthSessionGuardType] = &[
            EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown,
            EAuthSessionGuardType::k_EAuthSessionGuardType_None,
            EAuthSessionGuardType::k_EAuthSessionGuardType_EmailCode,
            EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceCode,
            EAuthSessionGuardType::k_EAuthSessionGuardType_DeviceConfirmation,
            EAuthSessionGuardType::k_EAuthSessionGuardType_EmailConfirmation,
            EAuthSessionGuardType::k_EAuthSessionGuardType_MachineToken,
            EAuthSessionGuardType::k_EAuthSessionGuardType_LegacyMachineAuth,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EAuthSessionGuardType>("EAuthSessionGuardType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EAuthSessionGuardType {
}

impl ::std::default::Default for EAuthSessionGuardType {
    fn default() -> Self {
        EAuthSessionGuardType::k_EAuthSessionGuardType_Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EAuthSessionGuardType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EAuthSessionSecurityHistory {
    k_EAuthSessionSecurityHistory_Invalid = 0,
    k_EAuthSessionSecurityHistory_UsedPreviously = 1,
    k_EAuthSessionSecurityHistory_NoPriorHistory = 2,
}

impl ::protobuf::ProtobufEnum for EAuthSessionSecurityHistory {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthSessionSecurityHistory> {
        match value {
            0 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid),
            1 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_UsedPreviously),
            2 => ::std::option::Option::Some(EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_NoPriorHistory),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EAuthSessionSecurityHistory] = &[
            EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid,
            EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_UsedPreviously,
            EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_NoPriorHistory,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EAuthSessionSecurityHistory>("EAuthSessionSecurityHistory", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EAuthSessionSecurityHistory {
}

impl ::std::default::Default for EAuthSessionSecurityHistory {
    fn default() -> Self {
        EAuthSessionSecurityHistory::k_EAuthSessionSecurityHistory_Invalid
    }
}

impl ::protobuf::reflect::ProtobufValue for EAuthSessionSecurityHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETokenRenewalType {
    k_ETokenRenewalType_None = 0,
    k_ETokenRenewalType_Allow = 1,
}

impl ::protobuf::ProtobufEnum for ETokenRenewalType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETokenRenewalType> {
        match value {
            0 => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_None),
            1 => ::std::option::Option::Some(ETokenRenewalType::k_ETokenRenewalType_Allow),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETokenRenewalType] = &[
            ETokenRenewalType::k_ETokenRenewalType_None,
            ETokenRenewalType::k_ETokenRenewalType_Allow,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ETokenRenewalType>("ETokenRenewalType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ETokenRenewalType {
}

impl ::std::default::Default for ETokenRenewalType {
    fn default() -> Self {
        ETokenRenewalType::k_ETokenRenewalType_None
    }
}

impl ::protobuf::reflect::ProtobufValue for ETokenRenewalType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EAuthTokenRevokeAction {
    k_EAuthTokenRevokeLogout = 0,
    k_EAuthTokenRevokePermanent = 1,
    k_EAuthTokenRevokeReplaced = 2,
    k_EAuthTokenRevokeSupport = 3,
    k_EAuthTokenRevokeConsume = 4,
    k_EAuthTokenRevokeNonRememberedLogout = 5,
    k_EAuthTokenRevokeNonRememberedPermanent = 6,
    k_EAuthTokenRevokeAutomatic = 7,
}

impl ::protobuf::ProtobufEnum for EAuthTokenRevokeAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenRevokeAction> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout),
            1 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent),
            2 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeReplaced),
            3 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeSupport),
            4 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeConsume),
            5 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedLogout),
            6 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedPermanent),
            7 => ::std::option::Option::Some(EAuthTokenRevokeAction::k_EAuthTokenRevokeAutomatic),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EAuthTokenRevokeAction] = &[
            EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout,
            EAuthTokenRevokeAction::k_EAuthTokenRevokePermanent,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeReplaced,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeSupport,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeConsume,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedLogout,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeNonRememberedPermanent,
            EAuthTokenRevokeAction::k_EAuthTokenRevokeAutomatic,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EAuthTokenRevokeAction>("EAuthTokenRevokeAction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EAuthTokenRevokeAction {
}

impl ::std::default::Default for EAuthTokenRevokeAction {
    fn default() -> Self {
        EAuthTokenRevokeAction::k_EAuthTokenRevokeLogout
    }
}

impl ::protobuf::reflect::ProtobufValue for EAuthTokenRevokeAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EAuthTokenState {
    k_EAuthTokenState_Invalid = 0,
    k_EAuthTokenState_New = 1,
    k_EAuthTokenState_Confirmed = 2,
    k_EAuthTokenState_Issued = 3,
    k_EAuthTokenState_Denied = 4,
    k_EAuthTokenState_LoggedOut = 5,
    k_EAuthTokenState_Consumed = 6,
    k_EAuthTokenState_Revoked = 99,
}

impl ::protobuf::ProtobufEnum for EAuthTokenState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EAuthTokenState> {
        match value {
            0 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Invalid),
            1 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_New),
            2 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Confirmed),
            3 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Issued),
            4 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Denied),
            5 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_LoggedOut),
            6 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Consumed),
            99 => ::std::option::Option::Some(EAuthTokenState::k_EAuthTokenState_Revoked),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EAuthTokenState] = &[
            EAuthTokenState::k_EAuthTokenState_Invalid,
            EAuthTokenState::k_EAuthTokenState_New,
            EAuthTokenState::k_EAuthTokenState_Confirmed,
            EAuthTokenState::k_EAuthTokenState_Issued,
            EAuthTokenState::k_EAuthTokenState_Denied,
            EAuthTokenState::k_EAuthTokenState_LoggedOut,
            EAuthTokenState::k_EAuthTokenState_Consumed,
            EAuthTokenState::k_EAuthTokenState_Revoked,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EAuthTokenState>("EAuthTokenState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EAuthTokenState {
}

impl ::std::default::Default for EAuthTokenState {
    fn default() -> Self {
        EAuthTokenState::k_EAuthTokenState_Invalid
    }
}

impl ::protobuf::reflect::ProtobufValue for EAuthTokenState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$steammessages_auth.steamclient.proto\x1a\x18steammessages_base.proto\
    \x1a,steammessages_unified_base.steamclient.proto\x1a\x0benums.proto\"\
    \x8a\x01\n/CAuthentication_GetPasswordRSAPublicKey_Request\x12W\n\x0cacc\
    ount_name\x18\x01\x20\x01(\tR\x0baccountNameB4\x82\xb5\x180user-provided\
    \x20account\x20name\x20to\x20get\x20an\x20RSA\x20key\x20for\"\xfc\x01\n0\
    CAuthentication_GetPasswordRSAPublicKey_Response\x12?\n\rpublickey_mod\
    \x18\x01\x20\x01(\tR\x0cpublickeyModB\x1a\x82\xb5\x18\x16the\x20public\
    \x20key\x20modulus\x12@\n\rpublickey_exp\x18\x02\x20\x01(\tR\x0cpublicke\
    yExpB\x1b\x82\xb5\x18\x17the\x20public\x20key\x20exponent\x12E\n\ttimest\
    amp\x18\x03\x20\x01(\x04R\ttimestampB'\x82\xb5\x18#the\x20timestamp\x20t\
    he\x20key\x20was\x20generated\"\x8a\x05\n\x1dCAuthentication_DeviceDetai\
    ls\x12p\n\x14device_friendly_name\x18\x01\x20\x01(\tR\x12deviceFriendlyN\
    ameB>\x82\xb5\x18:User-supplied,\x20or\x20client-supplied,\x20friendly\
    \x20name\x20of\x20device\x12\x8e\x01\n\rplatform_type\x18\x02\x20\x01(\
    \x0e2\x17.EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_UnknownR\
    \x0cplatformTypeB.\x82\xb5\x18*EAuthTokenPlatformType,\x20claimed,\x20of\
    \x20device\x12C\n\x07os_type\x18\x03\x20\x01(\x05R\x06osTypeB*\x82\xb5\
    \x18&EOSType,\x20claimed,\x20of\x20authorized\x20device\x12\x80\x01\n\
    \x12gaming_device_type\x18\x04\x20\x01(\rR\x10gamingDeviceTypeBR\x82\xb5\
    \x18NEGamingDeviceType,\x20claimed,\x20of\x20authorized\x20device\x20for\
    \x20steam\x20client-type\x20devices\x12`\n\x0cclient_count\x18\x05\x20\
    \x01(\rR\x0bclientCountB=\x82\xb5\x189For\x20desktop\x20clients,\x20quan\
    tized\x20number\x20of\x20users\x20in\x20history\x12<\n\nmachine_id\x18\
    \x06\x20\x01(\x0cR\tmachineIdB\x1d\x82\xb5\x18\x19Additional\x20device\
    \x20context\"\xb5\x03\n-CAuthentication_BeginAuthSessionViaQR_Request\
    \x120\n\x14device_friendly_name\x18\x01\x20\x01(\tR\x12deviceFriendlyNam\
    e\x12^\n\rplatform_type\x18\x02\x20\x01(\x0e2\x17.EAuthTokenPlatformType\
    :\x20k_EAuthTokenPlatformType_UnknownR\x0cplatformType\x12\x87\x01\n\x0e\
    device_details\x18\x03\x20\x01(\x0b2\x1e.CAuthentication_DeviceDetailsR\
    \rdeviceDetailsB@\x82\xb5\x18<User-supplied\x20details\x20about\x20the\
    \x20device\x20attempting\x20to\x20sign\x20in\x12h\n\nwebsite_id\x18\x04\
    \x20\x01(\t:\x07UnknownR\twebsiteIdB@\x82\xb5\x18<(EMachineAuthWebDomain\
    )\x20identifier\x20of\x20client\x20requesting\x20auth\"\x97\x03\n#CAuthe\
    ntication_AllowedConfirmation\x12\xa0\x01\n\x11confirmation_type\x18\x01\
    \x20\x01(\x0e2\x16.EAuthSessionGuardType:\x1fk_EAuthSessionGuardType_Unk\
    nownR\x10confirmationTypeB:\x82\xb5\x186authentication\x20can\x20proceed\
    \x20with\x20this\x20confirmation\x20type\x12\xcc\x01\n\x12associated_mes\
    sage\x18\x02\x20\x01(\tR\x11associatedMessageB\x9c\x01\x82\xb5\x18\x97\
    \x01message\x20to\x20be\x20interpreted\x20depending\x20on\x20the\x20conf\
    irmation\x20type.\x20for\x20email\x20confirmation,\x20this\x20might\x20b\
    e\x20the\x20redacted\x20email\x20address\x20to\x20which\x20email\x20was\
    \x20sent.\"\xbd\x05\n.CAuthentication_BeginAuthSessionViaQR_Response\x12\
    j\n\tclient_id\x18\x01\x20\x01(\x04R\x08clientIdBM\x82\xb5\x18Iunique\
    \x20identifier\x20of\x20requestor,\x20also\x20used\x20for\x20routing,\
    \x20portion\x20of\x20QR\x20code\x12b\n\rchallenge_url\x18\x02\x20\x01(\t\
    R\x0cchallengeUrlB=\x82\xb5\x189URL\x20based\x20on\x20client\x20ID,\x20w\
    hich\x20will\x20be\x20rendered\x20as\x20QR\x20code\x12{\n\nrequest_id\
    \x18\x03\x20\x01(\x0cR\trequestIdB\\\x82\xb5\x18Xunique\x20request\x20ID\
    \x20to\x20be\x20presented\x20by\x20requestor\x20at\x20poll\x20time\x20-\
    \x20must\x20not\x20be\x20rendered\x20in\x20QR\x12g\n\x08interval\x18\x04\
    \x20\x01(\x02R\x08intervalBK\x82\xb5\x18Grefresh\x20interval\x20with\x20\
    which\x20requestor\x20should\x20call\x20PollAuthSessionStatus\x12\x9e\
    \x01\n\x15allowed_confirmations\x18\x05\x20\x03(\x0b2$.CAuthentication_A\
    llowedConfirmationR\x14allowedConfirmationsBC\x82\xb5\x18?the\x20confirm\
    ation\x20types\x20that\x20will\x20be\x20able\x20to\x20confirm\x20the\x20\
    request\x124\n\x07version\x18\x06\x20\x01(\x05R\x07versionB\x1a\x82\xb5\
    \x18\x16version\x20of\x20the\x20QR\x20data\"\xaf\x08\n6CAuthentication_B\
    eginAuthSessionViaCredentials_Request\x120\n\x14device_friendly_name\x18\
    \x01\x20\x01(\tR\x12deviceFriendlyName\x12!\n\x0caccount_name\x18\x02\
    \x20\x01(\tR\x0baccountName\x12V\n\x12encrypted_password\x18\x03\x20\x01\
    (\tR\x11encryptedPasswordB'\x82\xb5\x18#password,\x20RSA\x20encrypted\
    \x20client\x20side\x12X\n\x14encryption_timestamp\x18\x04\x20\x01(\x04R\
    \x13encryptionTimestampB%\x82\xb5\x18!timestamp\x20to\x20map\x20to\x20a\
    \x20key\x20-\x20STime\x125\n\x0eremember_login\x18\x05\x20\x01(\x08R\rre\
    memberLoginB\x0e\x82\xb5\x18\ndeprecated\x12^\n\rplatform_type\x18\x06\
    \x20\x01(\x0e2\x17.EAuthTokenPlatformType:\x20k_EAuthTokenPlatformType_U\
    nknownR\x0cplatformType\x12\x9c\x01\n\x0bpersistence\x18\x07\x20\x01(\
    \x0e2\x14.ESessionPersistence:\x20k_ESessionPersistence_PersistentR\x0bp\
    ersistenceBB\x82\xb5\x18>whether\x20we\x20are\x20requesting\x20a\x20pers\
    istent\x20or\x20an\x20ephemeral\x20session\x12h\n\nwebsite_id\x18\x08\
    \x20\x01(\t:\x07UnknownR\twebsiteIdB@\x82\xb5\x18<(EMachineAuthWebDomain\
    )\x20identifier\x20of\x20client\x20requesting\x20auth\x12\x87\x01\n\x0ed\
    evice_details\x18\t\x20\x01(\x0b2\x1e.CAuthentication_DeviceDetailsR\rde\
    viceDetailsB@\x82\xb5\x18<User-supplied\x20details\x20about\x20the\x20de\
    vice\x20attempting\x20to\x20sign\x20in\x12D\n\nguard_data\x18\n\x20\x01(\
    \tR\tguardDataB%\x82\xb5\x18!steam\x20guard\x20data\x20for\x20client\x20\
    login\x12\x1a\n\x08language\x18\x0b\x20\x01(\rR\x08language\x12b\n\tqos_\
    level\x18\x0c\x20\x01(\x05:\x012R\x08qosLevelBB\x82\xb5\x18>[ENetQOSLeve\
    l]\x20client-specified\x20priority\x20for\x20this\x20auth\x20attempt\"\
    \xf0\x07\n7CAuthentication_BeginAuthSessionViaCredentials_Response\x12V\
    \n\tclient_id\x18\x01\x20\x01(\x04R\x08clientIdB9\x82\xb5\x185unique\x20\
    identifier\x20of\x20requestor,\x20also\x20used\x20for\x20routing\x12\x85\
    \x01\n\nrequest_id\x18\x02\x20\x01(\x0cR\trequestIdBf\x82\xb5\x18bunique\
    \x20request\x20ID\x20to\x20be\x20presented\x20by\x20requestor\x20at\x20p\
    oll\x20time\x20-\x20must\x20not\x20be\x20transferred\x20or\x20displayed\
    \x12g\n\x08interval\x18\x03\x20\x01(\x02R\x08intervalBK\x82\xb5\x18Grefr\
    esh\x20interval\x20with\x20which\x20requestor\x20should\x20call\x20PollA\
    uthSessionStatus\x12\x9e\x01\n\x15allowed_confirmations\x18\x04\x20\x03(\
    \x0b2$.CAuthentication_AllowedConfirmationR\x14allowedConfirmationsBC\
    \x82\xb5\x18?the\x20confirmation\x20types\x20that\x20will\x20be\x20able\
    \x20to\x20confirm\x20the\x20request\x12w\n\x07steamid\x18\x05\x20\x01(\
    \x04R\x07steamidB]\x82\xb5\x18Ysteamid\x20of\x20the\x20account\x20loggin\
    g\x20in\x20-\x20will\x20only\x20be\x20included\x20if\x20the\x20credentia\
    ls\x20were\x20correct\x12\x85\x01\n\nweak_token\x18\x06\x20\x01(\tR\twea\
    kTokenBf\x82\xb5\x18bpartial-authentication\x20token\x20-\x20limited\x20\
    lifetime\x20and\x20scope,\x20included\x20only\x20if\x20credentials\x20we\
    re\x20valid\x12\\\n\x15agreement_session_url\x18\x07\x20\x01(\tR\x13agre\
    ementSessionUrlB(\x82\xb5\x18$agreement\x20the\x20user\x20needs\x20to\
    \x20agree\x20to\x12l\n\x16extended_error_message\x18\x08\x20\x01(\tR\x14\
    extendedErrorMessageB6\x82\xb5\x182error\x20string\x20to\x20display\x20i\
    f\x20supported\x20by\x20the\x20client\"\xe1\x01\n-CAuthentication_PollAu\
    thSessionStatus_Request\x12\x1b\n\tclient_id\x18\x01\x20\x01(\x04R\x08cl\
    ientId\x12\x1d\n\nrequest_id\x18\x02\x20\x01(\x0cR\trequestId\x12t\n\x0f\
    token_to_revoke\x18\x03\x20\x01(\x06R\rtokenToRevokeBL\x82\xb5\x18HIf\
    \x20this\x20is\x20set\x20to\x20a\x20token\x20owned\x20by\x20this\x20user\
    ,\x20that\x20token\x20will\x20be\x20retired\"\xd3\x07\n.CAuthentication_\
    PollAuthSessionStatus_Response\x12V\n\rnew_client_id\x18\x01\x20\x01(\
    \x04R\x0bnewClientIdB2\x82\xb5\x18.if\x20challenge\x20is\x20old,\x20this\
    \x20is\x20the\x20new\x20client\x20id\x12\x86\x01\n\x11new_challenge_url\
    \x18\x02\x20\x01(\tR\x0fnewChallengeUrlBZ\x82\xb5\x18Vif\x20challenge\
    \x20is\x20old,\x20this\x20is\x20the\x20new\x20challenge\x20ID\x20to\x20r\
    e-render\x20for\x20mobile\x20confirmation\x12o\n\rrefresh_token\x18\x03\
    \x20\x01(\tR\x0crefreshTokenBJ\x82\xb5\x18Fif\x20login\x20has\x20been\
    \x20confirmed,\x20this\x20is\x20the\x20requestor's\x20new\x20refresh\x20\
    token\x12t\n\x0caccess_token\x18\x04\x20\x01(\tR\x0baccessTokenBQ\x82\
    \xb5\x18Mif\x20login\x20has\x20been\x20confirmed,\x20this\x20is\x20a\x20\
    new\x20token\x20subordinate\x20to\x20refresh_token\x12\x9b\x01\n\x16had_\
    remote_interaction\x18\x05\x20\x01(\x08R\x14hadRemoteInteractionBe\x82\
    \xb5\x18awhether\x20or\x20not\x20the\x20auth\x20session\x20appears\x20to\
    \x20have\x20had\x20remote\x20interaction\x20from\x20a\x20potential\x20co\
    nfirmer\x12b\n\x0caccount_name\x18\x06\x20\x01(\tR\x0baccountNameB?\x82\
    \xb5\x18;account\x20name\x20of\x20authenticating\x20account,\x20for\x20u\
    se\x20by\x20UI\x20layer\x12y\n\x0enew_guard_data\x18\x07\x20\x01(\tR\x0c\
    newGuardDataBS\x82\xb5\x18Oif\x20login\x20has\x20been\x20confirmed,\x20m\
    ay\x20contain\x20remembered\x20machine\x20ID\x20for\x20future\x20login\
    \x12\\\n\x15agreement_session_url\x18\x08\x20\x01(\tR\x13agreementSessio\
    nUrlB(\x82\xb5\x18$agreement\x20the\x20user\x20needs\x20to\x20agree\x20t\
    o\"\x7f\n*CAuthentication_GetAuthSessionInfo_Request\x12Q\n\tclient_id\
    \x18\x01\x20\x01(\x04R\x08clientIdB4\x82\xb5\x180client\x20ID\x20from\
    \x20scanned\x20QR\x20Code,\x20used\x20for\x20routing\"\xd8\x08\n+CAuthen\
    tication_GetAuthSessionInfo_Response\x12+\n\x02ip\x18\x01\x20\x01(\tR\
    \x02ipB\x1b\x82\xb5\x18\x17IP\x20address\x20of\x20requestor\x124\n\x06ge\
    oloc\x18\x02\x20\x01(\tR\x06geolocB\x1c\x82\xb5\x18\x18geoloc\x20info\
    \x20of\x20requestor\x12)\n\x04city\x18\x03\x20\x01(\tR\x04cityB\x15\x82\
    \xb5\x18\x11city\x20of\x20requestor\x12,\n\x05state\x18\x04\x20\x01(\tR\
    \x05stateB\x16\x82\xb5\x18\x12state\x20of\x20requestor\x122\n\x07country\
    \x18\x05\x20\x01(\tR\x07countryB\x18\x82\xb5\x18\x14country\x20of\x20req\
    uestor\x12~\n\rplatform_type\x18\x06\x20\x01(\x0e2\x17.EAuthTokenPlatfor\
    mType:\x20k_EAuthTokenPlatformType_UnknownR\x0cplatformTypeB\x1e\x82\xb5\
    \x18\x1aplatform\x20type\x20of\x20requestor\x12N\n\x14device_friendly_na\
    me\x18\x07\x20\x01(\tR\x12deviceFriendlyNameB\x1c\x82\xb5\x18\x18name\
    \x20of\x20requestor\x20device\x12+\n\x07version\x18\x08\x20\x01(\x05R\
    \x07versionB\x11\x82\xb5\x18\rversion\x20field\x12\xb2\x01\n\rlogin_hist\
    ory\x18\t\x20\x01(\x0e2\x1c.EAuthSessionSecurityHistory:%k_EAuthSessionS\
    ecurityHistory_InvalidR\x0cloginHistoryBH\x82\xb5\x18Dwhether\x20the\x20\
    ip\x20has\x20previuously\x20been\x20used\x20on\x20the\x20account\x20succ\
    essfully\x12\x81\x01\n\x1brequestor_location_mismatch\x18\n\x20\x01(\x08\
    R\x19requestorLocationMismatchBA\x82\xb5\x18=whether\x20the\x20requestor\
    \x20location\x20matches\x20this\x20requests\x20location\x12]\n\x10high_u\
    sage_login\x18\x0b\x20\x01(\x08R\x0ehighUsageLoginB3\x82\xb5\x18/whether\
    \x20this\x20login\x20has\x20seen\x20high\x20usage\x20recently\x12\xa3\
    \x01\n\x15requested_persistence\x18\x0c\x20\x01(\x0e2\x14.ESessionPersis\
    tence:\x1dk_ESessionPersistence_InvalidR\x14requestedPersistenceB9\x82\
    \xb5\x185session\x20persistence\x20requestor\x20has\x20indicated\x20they\
    \x20want\"\xd9\x04\n?CAuthentication_UpdateAuthSessionWithMobileConfirma\
    tion_Request\x12+\n\x07version\x18\x01\x20\x01(\x05R\x07versionB\x11\x82\
    \xb5\x18\rversion\x20field\x12H\n\tclient_id\x18\x02\x20\x01(\x04R\x08cl\
    ientIdB+\x82\xb5\x18'pending\x20client\x20ID,\x20from\x20scanned\x20QR\
    \x20Code\x125\n\x07steamid\x18\x03\x20\x01(\x06R\x07steamidB\x1b\x82\xb5\
    \x18\x17user\x20who\x20wants\x20to\x20login\x12e\n\tsignature\x18\x04\
    \x20\x01(\x0cR\tsignatureBG\x82\xb5\x18CHMAC\x20digest\x20over\x20{versi\
    on,client_id,steamid}\x20via\x20user's\x20private\x20key\x12b\n\x07confi\
    rm\x18\x05\x20\x01(\x08:\x05falseR\x07confirmBA\x82\xb5\x18=Whether\x20t\
    o\x20confirm\x20the\x20login\x20(true)\x20or\x20deny\x20the\x20login\x20\
    (false)\x12\x9c\x01\n\x0bpersistence\x18\x06\x20\x01(\x0e2\x14.ESessionP\
    ersistence:\x20k_ESessionPersistence_PersistentR\x0bpersistenceBB\x82\
    \xb5\x18>whether\x20we\x20are\x20requesting\x20a\x20persistent\x20or\x20\
    an\x20ephemeral\x20session\"B\n@CAuthentication_UpdateAuthSessionWithMob\
    ileConfirmation_Response\"\xe2\x02\n;CAuthentication_UpdateAuthSessionWi\
    thSteamGuardCode_Request\x12L\n\tclient_id\x18\x01\x20\x01(\x04R\x08clie\
    ntIdB/\x82\xb5\x18+pending\x20client\x20ID,\x20from\x20initialized\x20se\
    ssion\x125\n\x07steamid\x18\x02\x20\x01(\x06R\x07steamidB\x1b\x82\xb5\
    \x18\x17user\x20who\x20wants\x20to\x20login\x12)\n\x04code\x18\x03\x20\
    \x01(\tR\x04codeB\x15\x82\xb5\x18\x11confirmation\x20code\x12s\n\tcode_t\
    ype\x18\x04\x20\x01(\x0e2\x16.EAuthSessionGuardType:\x1fk_EAuthSessionGu\
    ardType_UnknownR\x08codeTypeB\x1d\x82\xb5\x18\x19type\x20of\x20confirmat\
    ion\x20code\"\x9c\x01\n<CAuthentication_UpdateAuthSessionWithSteamGuardC\
    ode_Response\x12\\\n\x15agreement_session_url\x18\x07\x20\x01(\tR\x13agr\
    eementSessionUrlB(\x82\xb5\x18$agreement\x20the\x20user\x20needs\x20to\
    \x20agree\x20to\"\xc4\x01\n2CAuthentication_AccessToken_GenerateForApp_R\
    equest\x12#\n\rrefresh_token\x18\x01\x20\x01(\tR\x0crefreshToken\x12\x18\
    \n\x07steamid\x18\x02\x20\x01(\x06R\x07steamid\x12O\n\x0crenewal_type\
    \x18\x03\x20\x01(\x0e2\x12.ETokenRenewalType:\x18k_ETokenRenewalType_Non\
    eR\x0brenewalType\"}\n3CAuthentication_AccessToken_GenerateForApp_Respon\
    se\x12!\n\x0caccess_token\x18\x01\x20\x01(\tR\x0baccessToken\x12#\n\rref\
    resh_token\x18\x02\x20\x01(\tR\x0crefreshToken\"0\n.CAuthentication_Refr\
    eshToken_Enumerate_Request\"\xf8\x0e\n/CAuthentication_RefreshToken_Enum\
    erate_Response\x12o\n\x0erefresh_tokens\x18\x01\x20\x03(\x0b2H.CAuthenti\
    cation_RefreshToken_Enumerate_Response.RefreshTokenDescriptionR\rrefresh\
    Tokens\x12)\n\x10requesting_token\x18\x02\x20\x01(\x06R\x0frequestingTok\
    en\x1a\xbb\x03\n\x0fTokenUsageEvent\x12a\n\x04time\x18\x01\x20\x01(\rR\
    \x04timeBM\x82\xb5\x18IApproximate\x20time\x20of\x20history\x20event\x20\
    (may\x20be\x20deliberately\x20fuzzed\x20or\x20omitted)\x12B\n\x02ip\x18\
    \x02\x20\x01(\x0b2\x0e.CMsgIPAddressR\x02ipB\"\x82\xb5\x18\x1eIP\x20at\
    \x20which\x20event\x20was\x20observed\x12\x16\n\x06locale\x18\x03\x20\
    \x01(\tR\x06locale\x12S\n\x07country\x18\x04\x20\x01(\tR\x07countryB9\
    \x82\xb5\x185Location\x20(country\x20code)\x20of\x20event,\x20as\x20infe\
    rred\x20from\x20IP\x12M\n\x05state\x18\x05\x20\x01(\tR\x05stateB7\x82\
    \xb5\x183Location\x20(state\x20code)\x20of\x20event,\x20as\x20inferred\
    \x20from\x20IP\x12E\n\x04city\x18\x06\x20\x01(\tR\x04cityB1\x82\xb5\x18-\
    Location\x20(city)\x20of\x20event,\x20as\x20inferred\x20from\x20IP\x1a\
    \xea\t\n\x17RefreshTokenDescription\x12A\n\x08token_id\x18\x01\x20\x01(\
    \x06R\x07tokenIdB&\x82\xb5\x18\"Persistent\x20token/device\x20identifier\
    \x12]\n\x11token_description\x18\x02\x20\x01(\tR\x10tokenDescriptionB0\
    \x82\xb5\x18,client-supplied\x20friendly\x20name\x20for\x20the\x20device\
    \x12!\n\x0ctime_updated\x18\x03\x20\x01(\rR\x0btimeUpdated\x12\x8f\x01\n\
    \rplatform_type\x18\x04\x20\x01(\x0e2\x17.EAuthTokenPlatformType:\x20k_E\
    AuthTokenPlatformType_UnknownR\x0cplatformTypeB/\x82\xb5\x18+gross\x20pl\
    atform\x20type\x20(mobile/client/browser)\x12\x9e\x01\n\tlogged_in\x18\
    \x05\x20\x01(\x08R\x08loggedInB\x80\x01\x82\xb5\x18|If\x20true,\x20this\
    \x20token\x20is\x20currently\x20valid.\x20False\x20indicates\x20it\x20is\
    \x20a\x20machine\x20token\x20-\x20ok\x20for\x20steamguard\x20if\x20you\
    \x20know\x20the\x20credential\x12`\n\x0bos_platform\x18\x06\x20\x01(\rR\
    \nosPlatformB?\x82\xb5\x18;EPlatformType\x20-\x20rough\x20classification\
    \x20of\x20device\x20OS,\x20if\x20known\x12_\n\tauth_type\x18\x07\x20\x01\
    (\rR\x08authTypeBB\x82\xb5\x18>EAuthTokenGuardType\x20-\x20device\x20aut\
    horization\x20mechanism,\x20if\x20known\x12\x94\x01\n\x12gaming_device_t\
    ype\x18\x08\x20\x01(\rR\x10gamingDeviceTypeBf\x82\xb5\x18bEGamingDeviceT\
    ype\x20-\x20classify\x20console/PC/SteamDeck,\x20if\x20known;\x20applies\
    \x20only\x20for\x20Steam\x20Client\x20devices\x12\x93\x01\n\nfirst_seen\
    \x18\t\x20\x01(\x0b2@.CAuthentication_RefreshToken_Enumerate_Response.To\
    kenUsageEventR\tfirstSeenB2\x82\xb5\x18.Information\x20about\x20original\
    \x20authorization\x20event\x12\xa1\x01\n\tlast_seen\x18\n\x20\x01(\x0b2@\
    .CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEventR\x08las\
    tSeenBB\x82\xb5\x18>Information\x20about\x20most-recently\x20seen,\x20if\
    \x20known\x20for\x20this\x20device\x12C\n\x07os_type\x18\x0b\x20\x01(\
    \x05R\x06osTypeB*\x82\xb5\x18&EOSType\x20-\x20specific\x20device\x20OS,\
    \x20if\x20known\"3\n1CAuthentication_GetAuthSessionsForAccount_Request\"\
    \x8e\x01\n2CAuthentication_GetAuthSessionsForAccount_Response\x12X\n\ncl\
    ient_ids\x18\x01\x20\x03(\x04R\tclientIdsB9\x82\xb5\x185unique\x20identi\
    fier\x20of\x20requestor,\x20also\x20used\x20for\x20routing\"\xf6\x01\n,C\
    Authentication_MigrateMobileSession_Request\x12=\n\x07steamid\x18\x01\
    \x20\x01(\x06R\x07steamidB#\x82\xb5\x18\x1fSteam\x20ID\x20of\x20the\x20u\
    ser\x20to\x20migrate\x12-\n\x05token\x18\x02\x20\x01(\tR\x05tokenB\x17\
    \x82\xb5\x18\x13WG\x20Token\x20to\x20migrate\x12X\n\tsignature\x18\x03\
    \x20\x01(\tR\tsignatureB:\x82\xb5\x186Signature\x20over\x20the\x20wg\x20\
    token\x20using\x20the\x20user's\x202FA\x20token\"w\n-CAuthentication_Mig\
    rateMobileSession_Response\x12#\n\rrefresh_token\x18\x01\x20\x01(\tR\x0c\
    refreshToken\x12!\n\x0caccess_token\x18\x02\x20\x01(\tR\x0baccessToken\"\
    \xd1\x01\n$CAuthentication_Token_Revoke_Request\x12\x14\n\x05token\x18\
    \x01\x20\x01(\tR\x05token\x12\x92\x01\n\rrevoke_action\x18\x02\x20\x01(\
    \x0e2\x17.EAuthTokenRevokeAction:\x1bk_EAuthTokenRevokePermanentR\x0crev\
    okeActionB7\x82\xb5\x183Select\x20between\x20logout\x20and\x20logout-and\
    -forget-machine\"'\n%CAuthentication_Token_Revoke_Response\"\xfa\x02\n+C\
    Authentication_RefreshToken_Revoke_Request\x12\x19\n\x08token_id\x18\x01\
    \x20\x01(\x06R\x07tokenId\x12W\n\x07steamid\x18\x02\x20\x01(\x06R\x07ste\
    amidB=\x82\xb5\x189Token\x20holder\x20if\x20an\x20admin\x20action\x20on\
    \x20behalf\x20of\x20another\x20user\x12\x92\x01\n\rrevoke_action\x18\x03\
    \x20\x01(\x0e2\x17.EAuthTokenRevokeAction:\x1bk_EAuthTokenRevokePermanen\
    tR\x0crevokeActionB7\x82\xb5\x183Select\x20between\x20logout\x20and\x20l\
    ogout-and-forget-machine\x12B\n\tsignature\x18\x04\x20\x01(\x0cR\tsignat\
    ureB$\x82\xb5\x18\x20required\x20signature\x20over\x20token_id\".\n,CAut\
    hentication_RefreshToken_Revoke_Response\"\xfa\x01\n:CAuthenticationSupp\
    ort_QueryRefreshTokensByAccount_Request\x12H\n\x07steamid\x18\x01\x20\
    \x01(\x06R\x07steamidB.\x82\xb5\x18*SteamID\x20of\x20the\x20account\x20t\
    o\x20query\x20(required)\x12r\n\x16include_revoked_tokens\x18\x02\x20\
    \x01(\x08R\x14includeRevokedTokensB<\x82\xb5\x188Includes\x20tokens\x20t\
    hat\x20are\x20revoked\x20or\x20expired\x20in\x20the\x20query\"\xbe\x0b\n\
    \x1fCSupportRefreshTokenDescription\x12\x19\n\x08token_id\x18\x01\x20\
    \x01(\x06R\x07tokenId\x12+\n\x11token_description\x18\x02\x20\x01(\tR\
    \x10tokenDescription\x12!\n\x0ctime_updated\x18\x03\x20\x01(\rR\x0btimeU\
    pdated\x12^\n\rplatform_type\x18\x04\x20\x01(\x0e2\x17.EAuthTokenPlatfor\
    mType:\x20k_EAuthTokenPlatformType_UnknownR\x0cplatformType\x12L\n\x0bto\
    ken_state\x18\x05\x20\x01(\x0e2\x10.EAuthTokenState:\x19k_EAuthTokenStat\
    e_InvalidR\ntokenState\x12#\n\rowner_steamid\x18\x06\x20\x01(\x06R\x0cow\
    nerSteamid\x12`\n\x0bos_platform\x18\x07\x20\x01(\rR\nosPlatformB?\x82\
    \xb5\x18;EPlatformType\x20-\x20rough\x20classification\x20of\x20device\
    \x20OS,\x20if\x20known\x12C\n\x07os_type\x18\x08\x20\x01(\x05R\x06osType\
    B*\x82\xb5\x18&EOSType\x20-\x20specific\x20device\x20OS,\x20if\x20known\
    \x12_\n\tauth_type\x18\t\x20\x01(\rR\x08authTypeBB\x82\xb5\x18>EAuthToke\
    nGuardType\x20-\x20device\x20authorization\x20mechanism,\x20if\x20known\
    \x12\x94\x01\n\x12gaming_device_type\x18\n\x20\x01(\rR\x10gamingDeviceTy\
    peBf\x82\xb5\x18bEGamingDeviceType\x20-\x20classify\x20console/PC/SteamD\
    eck,\x20if\x20known;\x20applies\x20only\x20for\x20Steam\x20Client\x20dev\
    ices\x12\x83\x01\n\nfirst_seen\x18\x0b\x20\x01(\x0b20.CSupportRefreshTok\
    enDescription.TokenUsageEventR\tfirstSeenB2\x82\xb5\x18.Information\x20a\
    bout\x20original\x20authorization\x20event\x12\x91\x01\n\tlast_seen\x18\
    \x0c\x20\x01(\x0b20.CSupportRefreshTokenDescription.TokenUsageEventR\x08\
    lastSeenBB\x82\xb5\x18>Information\x20about\x20most-recently\x20seen,\
    \x20if\x20known\x20for\x20this\x20device\x1a\xa3\x03\n\x0fTokenUsageEven\
    t\x12a\n\x04time\x18\x01\x20\x01(\rR\x04timeBM\x82\xb5\x18IApproximate\
    \x20time\x20of\x20history\x20event\x20(may\x20be\x20deliberately\x20fuzz\
    ed\x20or\x20omitted)\x12B\n\x02ip\x18\x02\x20\x01(\x0b2\x0e.CMsgIPAddres\
    sR\x02ipB\"\x82\xb5\x18\x1eIP\x20at\x20which\x20event\x20was\x20observed\
    \x12S\n\x07country\x18\x03\x20\x01(\tR\x07countryB9\x82\xb5\x185Location\
    \x20(country\x20code)\x20of\x20event,\x20as\x20inferred\x20from\x20IP\
    \x12M\n\x05state\x18\x04\x20\x01(\tR\x05stateB7\x82\xb5\x183Location\x20\
    (state\x20code)\x20of\x20event,\x20as\x20inferred\x20from\x20IP\x12E\n\
    \x04city\x18\x05\x20\x01(\tR\x04cityB1\x82\xb5\x18-Location\x20(city)\
    \x20of\x20event,\x20as\x20inferred\x20from\x20IP\"\xb0\x01\n;CAuthentica\
    tionSupport_QueryRefreshTokensByAccount_Response\x12G\n\x0erefresh_token\
    s\x18\x01\x20\x03(\x0b2\x20.CSupportRefreshTokenDescriptionR\rrefreshTok\
    ens\x12(\n\x10last_token_reset\x18\x02\x20\x01(\x05R\x0elastTokenReset\"\
    \x82\x01\n4CAuthenticationSupport_QueryRefreshTokenByID_Request\x12J\n\
    \x08token_id\x18\x01\x20\x01(\x06R\x07tokenIdB/\x82\xb5\x18+Token\x20ID\
    \x20of\x20the\x20token\x20to\x20look\x20up\x20(required)\"\x80\x01\n5CAu\
    thenticationSupport_QueryRefreshTokenByID_Response\x12G\n\x0erefresh_tok\
    ens\x18\x01\x20\x03(\x0b2\x20.CSupportRefreshTokenDescriptionR\rrefreshT\
    okens\"\xc5\x01\n*CAuthenticationSupport_RevokeToken_Request\x12I\n\x08t\
    oken_id\x18\x01\x20\x01(\x06R\x07tokenIdB.\x82\xb5\x18*Token\x20ID\x20of\
    \x20the\x20token\x20to\x20revoke\x20(required)\x12L\n\x07steamid\x18\x02\
    \x20\x01(\x06R\x07steamidB2\x82\xb5\x18.Steam\x20ID\x20of\x20the\x20owne\
    r\x20of\x20that\x20token\x20(required)\"-\n+CAuthenticationSupport_Revok\
    eToken_Response\"\x84\x01\n.CAuthenticationSupport_GetTokenHistory_Reque\
    st\x12R\n\x08token_id\x18\x01\x20\x01(\x06R\x07tokenIdB7\x82\xb5\x183Tok\
    en\x20ID\x20of\x20the\x20token\x20to\x20get\x20history\x20for\x20(requir\
    ed)\"}\n\x19CSupportRefreshTokenAudit\x12\x16\n\x06action\x18\x01\x20\
    \x01(\x05R\x06action\x12\x12\n\x04time\x18\x02\x20\x01(\rR\x04time\x12\
    \x1e\n\x02ip\x18\x03\x20\x01(\x0b2\x0e.CMsgIPAddressR\x02ip\x12\x14\n\
    \x05actor\x18\x04\x20\x01(\x06R\x05actor\"g\n/CAuthenticationSupport_Get\
    TokenHistory_Response\x124\n\x07history\x18\x01\x20\x03(\x0b2\x1a.CSuppo\
    rtRefreshTokenAuditR\x07history\"T\n\x20CCloudGaming_CreateNonce_Request\
    \x12\x1a\n\x08platform\x18\x01\x20\x01(\tR\x08platform\x12\x14\n\x05appi\
    d\x18\x02\x20\x01(\rR\x05appid\"Q\n!CCloudGaming_CreateNonce_Response\
    \x12\x14\n\x05nonce\x18\x01\x20\x01(\tR\x05nonce\x12\x16\n\x06expiry\x18\
    \x02\x20\x01(\rR\x06expiry\"b\n%CCloudGaming_GetTimeRemaining_Request\
    \x12\x1a\n\x08platform\x18\x01\x20\x01(\tR\x08platform\x12\x1d\n\nappid_\
    list\x18\x02\x20\x03(\rR\tappidList\"_\n\x1aCCloudGaming_TimeRemaining\
    \x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12+\n\x11minutes_remai\
    ning\x18\x02\x20\x01(\rR\x10minutesRemaining\"_\n&CCloudGaming_GetTimeRe\
    maining_Response\x125\n\x07entries\x18\x02\x20\x03(\x0b2\x1b.CCloudGamin\
    g_TimeRemainingR\x07entries*\xb9\x01\n\x16EAuthTokenPlatformType\x12$\n\
    \x20k_EAuthTokenPlatformType_Unknown\x10\0\x12(\n$k_EAuthTokenPlatformTy\
    pe_SteamClient\x10\x01\x12'\n#k_EAuthTokenPlatformType_WebBrowser\x10\
    \x02\x12&\n\"k_EAuthTokenPlatformType_MobileApp\x10\x03*\xe5\x02\n\x15EA\
    uthSessionGuardType\x12#\n\x1fk_EAuthSessionGuardType_Unknown\x10\0\x12\
    \x20\n\x1ck_EAuthSessionGuardType_None\x10\x01\x12%\n!k_EAuthSessionGuar\
    dType_EmailCode\x10\x02\x12&\n\"k_EAuthSessionGuardType_DeviceCode\x10\
    \x03\x12.\n*k_EAuthSessionGuardType_DeviceConfirmation\x10\x04\x12-\n)k_\
    EAuthSessionGuardType_EmailConfirmation\x10\x05\x12(\n$k_EAuthSessionGua\
    rdType_MachineToken\x10\x06\x12-\n)k_EAuthSessionGuardType_LegacyMachine\
    Auth\x10\x07*\xac\x01\n\x1bEAuthSessionSecurityHistory\x12)\n%k_EAuthSes\
    sionSecurityHistory_Invalid\x10\0\x120\n,k_EAuthSessionSecurityHistory_U\
    sedPreviously\x10\x01\x120\n,k_EAuthSessionSecurityHistory_NoPriorHistor\
    y\x10\x02*P\n\x11ETokenRenewalType\x12\x1c\n\x18k_ETokenRenewalType_None\
    \x10\0\x12\x1d\n\x19k_ETokenRenewalType_Allow\x10\x01*\xaf\x02\n\x16EAut\
    hTokenRevokeAction\x12\x1c\n\x18k_EAuthTokenRevokeLogout\x10\0\x12\x1f\n\
    \x1bk_EAuthTokenRevokePermanent\x10\x01\x12\x1e\n\x1ak_EAuthTokenRevokeR\
    eplaced\x10\x02\x12\x1d\n\x19k_EAuthTokenRevokeSupport\x10\x03\x12\x1d\n\
    \x19k_EAuthTokenRevokeConsume\x10\x04\x12)\n%k_EAuthTokenRevokeNonRememb\
    eredLogout\x10\x05\x12,\n(k_EAuthTokenRevokeNonRememberedPermanent\x10\
    \x06\x12\x1f\n\x1bk_EAuthTokenRevokeAutomatic\x10\x07*\x88\x02\n\x0fEAut\
    hTokenState\x12\x1d\n\x19k_EAuthTokenState_Invalid\x10\0\x12\x19\n\x15k_\
    EAuthTokenState_New\x10\x01\x12\x1f\n\x1bk_EAuthTokenState_Confirmed\x10\
    \x02\x12\x1c\n\x18k_EAuthTokenState_Issued\x10\x03\x12\x1c\n\x18k_EAuthT\
    okenState_Denied\x10\x04\x12\x1f\n\x1bk_EAuthTokenState_LoggedOut\x10\
    \x05\x12\x1e\n\x1ak_EAuthTokenState_Consumed\x10\x06\x12\x1d\n\x19k_EAut\
    hTokenState_Revoked\x10c2\xea\x14\n\x0eAuthentication\x12\xcf\x01\n\x17G\
    etPasswordRSAPublicKey\x120.CAuthentication_GetPasswordRSAPublicKey_Requ\
    est\x1a1.CAuthentication_GetPasswordRSAPublicKey_Response\"O\x82\xb5\x18\
    KFetches\x20RSA\x20public\x20key\x20to\x20use\x20to\x20encrypt\x20passwo\
    rds\x20for\x20a\x20given\x20account\x20name\x12\x9a\x01\n\x15BeginAuthSe\
    ssionViaQR\x12..CAuthentication_BeginAuthSessionViaQR_Request\x1a/.CAuth\
    entication_BeginAuthSessionViaQR_Response\"\x20\x82\xb5\x18\x1cstart\x20\
    authentication\x20process\x12\xb5\x01\n\x1eBeginAuthSessionViaCredential\
    s\x127.CAuthentication_BeginAuthSessionViaCredentials_Request\x1a8.CAuth\
    entication_BeginAuthSessionViaCredentials_Response\"\x20\x82\xb5\x18\x1c\
    start\x20authentication\x20process\x12\xa0\x01\n\x15PollAuthSessionStatu\
    s\x12..CAuthentication_PollAuthSessionStatus_Request\x1a/.CAuthenticatio\
    n_PollAuthSessionStatus_Response\"&\x82\xb5\x18\"poll\x20during\x20authe\
    ntication\x20process\x12\xce\x01\n\x12GetAuthSessionInfo\x12+.CAuthentic\
    ation_GetAuthSessionInfo_Request\x1a,.CAuthentication_GetAuthSessionInfo\
    _Response\"]\x82\xb5\x18Yget\x20metadata\x20of\x20specific\x20auth\x20se\
    ssion,\x20this\x20will\x20also\x20implicitly\x20bind\x20the\x20calling\
    \x20account\x12\xe4\x01\n'UpdateAuthSessionWithMobileConfirmation\x12@.C\
    Authentication_UpdateAuthSessionWithMobileConfirmation_Request\x1aA.CAut\
    hentication_UpdateAuthSessionWithMobileConfirmation_Response\"4\x82\xb5\
    \x180approve\x20an\x20authentication\x20session\x20via\x20mobile\x202fa\
    \x12\xde\x01\n#UpdateAuthSessionWithSteamGuardCode\x12<.CAuthentication_\
    UpdateAuthSessionWithSteamGuardCode_Request\x1a=.CAuthentication_UpdateA\
    uthSessionWithSteamGuardCode_Response\":\x82\xb5\x186approve\x20an\x20au\
    thentication\x20session\x20via\x20steam\x20guard\x20code\x12\xfb\x01\n\
    \x19GenerateAccessTokenForApp\x123.CAuthentication_AccessToken_GenerateF\
    orApp_Request\x1a4.CAuthentication_AccessToken_GenerateForApp_Response\"\
    s\x82\xb5\x18oGiven\x20a\x20refresh\x20token\x20for\x20a\x20client\x20ap\
    p\x20audience\x20(e.g.\x20desktop\x20client\x20/\x20mobile\x20client),\
    \x20generate\x20an\x20access\x20token\x12\xba\x01\n\x0fEnumerateTokens\
    \x12/.CAuthentication_RefreshToken_Enumerate_Request\x1a0.CAuthenticatio\
    n_RefreshToken_Enumerate_Response\"D\x82\xb5\x18@Enumerate\x20durable\
    \x20(refresh)\x20tokens\x20for\x20the\x20given\x20subject\x20account\x12\
    \xd6\x01\n\x19GetAuthSessionsForAccount\x122.CAuthentication_GetAuthSess\
    ionsForAccount_Request\x1a3.CAuthentication_GetAuthSessionsForAccount_Re\
    sponse\"P\x82\xb5\x18LGets\x20all\x20active\x20auth\x20sessions\x20for\
    \x20an\x20account\x20for\x20reference\x20by\x20the\x20mobile\x20app\x12\
    \xe4\x01\n\x14MigrateMobileSession\x12-.CAuthentication_MigrateMobileSes\
    sion_Request\x1a..CAuthentication_MigrateMobileSession_Response\"m\x82\
    \xb5\x18iMigrates\x20a\x20WG\x20token\x20to\x20an\x20access\x20and\x20re\
    fresh\x20token\x20using\x20a\x20signature\x20generated\x20with\x20the\
    \x20user's\x202FA\x20secret\x12\xbc\x01\n\x0bRevokeToken\x12%.CAuthentic\
    ation_Token_Revoke_Request\x1a&.CAuthentication_Token_Revoke_Response\"^\
    \x82\xb5\x18ZRevoke\x20a\x20single\x20token\x20immediately,\x20making\
    \x20it\x20unable\x20to\x20renew\x20or\x20generate\x20new\x20access\x20to\
    kens\x12\x9e\x01\n\x12RevokeRefreshToken\x12,.CAuthentication_RefreshTok\
    en_Revoke_Request\x1a-.CAuthentication_RefreshToken_Revoke_Response\"+\
    \x82\xb5\x18'Mark\x20the\x20given\x20refresh\x20token\x20as\x20revoked\
    \x1a\x1a\x82\xb5\x18\x16Authentication\x20Service2\xb0\x06\n\x15Authenti\
    cationSupport\x12\xe5\x01\n\x1bQueryRefreshTokensByAccount\x12;.CAuthent\
    icationSupport_QueryRefreshTokensByAccount_Request\x1a<.CAuthenticationS\
    upport_QueryRefreshTokensByAccount_Response\"K\x82\xb5\x18GAsks\x20the\
    \x20server\x20for\x20a\x20list\x20of\x20refresh\x20tokens\x20associated\
    \x20with\x20an\x20account\x12\xd3\x01\n\x15QueryRefreshTokenByID\x125.CA\
    uthenticationSupport_QueryRefreshTokenByID_Request\x1a6.CAuthenticationS\
    upport_QueryRefreshTokenByID_Response\"K\x82\xb5\x18GAsks\x20the\x20serv\
    er\x20for\x20a\x20list\x20of\x20refresh\x20tokens\x20associated\x20with\
    \x20an\x20account\x12\x89\x01\n\x0bRevokeToken\x12+.CAuthenticationSuppo\
    rt_RevokeToken_Request\x1a,.CAuthenticationSupport_RevokeToken_Response\
    \"\x1f\x82\xb5\x18\x1bRevokes\x20a\x20user's\x20auth\x20token\x12\xa8\
    \x01\n\x0fGetTokenHistory\x12/.CAuthenticationSupport_GetTokenHistory_Re\
    quest\x1a0.CAuthenticationSupport_GetTokenHistory_Response\"2\x82\xb5\
    \x18.Gets\x20the\x20audit\x20history\x20for\x20a\x20user's\x20auth\x20to\
    ken\x1a\"\x82\xb5\x18\x1eAuthentication\x20Support\x20Service2\xf2\x02\n\
    \x0bCloudGaming\x12\x8b\x01\n\x0bCreateNonce\x12!.CCloudGaming_CreateNon\
    ce_Request\x1a\".CCloudGaming_CreateNonce_Response\"5\x82\xb5\x181Create\
    \x20a\x20nonce\x20for\x20a\x20cloud\x20gaming\x20service\x20session\x12\
    \xa5\x01\n\x10GetTimeRemaining\x12&.CCloudGaming_GetTimeRemaining_Reques\
    t\x1a'.CCloudGaming_GetTimeRemaining_Response\"@\x82\xb5\x18<Get\x20the\
    \x20amount\x20of\x20streaming\x20time\x20remaining\x20for\x20a\x20set\
    \x20of\x20apps\x1a-\x82\xb5\x18)Methods\x20for\x20Steam\x20cloud\x20gami\
    ng\x20operationsB\x03\x80\x01\x01J\xd8\x9d\x01\n\x07\x12\x05\0\0\xb2\x03\
    \x01\n\t\n\x02\x03\0\x12\x03\0\x07!\n\t\n\x02\x03\x01\x12\x03\x01\x075\n\
    \t\n\x02\x03\x02\x12\x03\x02\x07\x14\n\x08\n\x01\x08\x12\x03\x04\0\"\n\t\
    \n\x02\x08\x10\x12\x03\x04\0\"\n\n\n\x02\x05\0\x12\x04\x06\0\x0b\x01\n\n\
    \n\x03\x05\0\x01\x12\x03\x06\x05\x1b\n\x0b\n\x04\x05\0\x02\0\x12\x03\x07\
    \x08-\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\x08(\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03\x07+,\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x08\x081\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x08\x08,\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x08/0\n\x0b\n\x04\x05\0\x02\x02\x12\x03\t\x080\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03\t\x08+\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t./\
    \n\x0b\n\x04\x05\0\x02\x03\x12\x03\n\x08/\n\x0c\n\x05\x05\0\x02\x03\x01\
    \x12\x03\n\x08*\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n-.\n\n\n\x02\x05\
    \x01\x12\x04\r\0\x16\x01\n\n\n\x03\x05\x01\x01\x12\x03\r\x05\x1a\n\x0b\n\
    \x04\x05\x01\x02\0\x12\x03\x0e\x08,\n\x0c\n\x05\x05\x01\x02\0\x01\x12\
    \x03\x0e\x08'\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x0e*+\n\x0b\n\x04\
    \x05\x01\x02\x01\x12\x03\x0f\x08)\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\
    \x03\x0f\x08$\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x0f'(\n\x0b\n\x04\
    \x05\x01\x02\x02\x12\x03\x10\x08.\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03\x10\x08)\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x10,-\n\x0b\n\x04\
    \x05\x01\x02\x03\x12\x03\x11\x08/\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\
    \x03\x11\x08*\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x11-.\n\x0b\n\x04\
    \x05\x01\x02\x04\x12\x03\x12\x087\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\
    \x03\x12\x082\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1256\n\x0b\n\x04\
    \x05\x01\x02\x05\x12\x03\x13\x086\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\
    \x03\x13\x081\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x1345\n\x0b\n\x04\
    \x05\x01\x02\x06\x12\x03\x14\x081\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\
    \x03\x14\x08,\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x14/0\n\x0b\n\x04\
    \x05\x01\x02\x07\x12\x03\x15\x086\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\
    \x03\x15\x081\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03\x1545\n\n\n\x02\
    \x05\x02\x12\x04\x18\0\x1c\x01\n\n\n\x03\x05\x02\x01\x12\x03\x18\x05\x20\
    \n\x0b\n\x04\x05\x02\x02\0\x12\x03\x19\x082\n\x0c\n\x05\x05\x02\x02\0\
    \x01\x12\x03\x19\x08-\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x1901\n\x0b\
    \n\x04\x05\x02\x02\x01\x12\x03\x1a\x089\n\x0c\n\x05\x05\x02\x02\x01\x01\
    \x12\x03\x1a\x084\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x1a78\n\x0b\n\
    \x04\x05\x02\x02\x02\x12\x03\x1b\x089\n\x0c\n\x05\x05\x02\x02\x02\x01\
    \x12\x03\x1b\x084\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\x1b78\n\n\n\
    \x02\x05\x03\x12\x04\x1e\0!\x01\n\n\n\x03\x05\x03\x01\x12\x03\x1e\x05\
    \x16\n\x0b\n\x04\x05\x03\x02\0\x12\x03\x1f\x08%\n\x0c\n\x05\x05\x03\x02\
    \0\x01\x12\x03\x1f\x08\x20\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03\x1f#$\n\
    \x0b\n\x04\x05\x03\x02\x01\x12\x03\x20\x08&\n\x0c\n\x05\x05\x03\x02\x01\
    \x01\x12\x03\x20\x08!\n\x0c\n\x05\x05\x03\x02\x01\x02\x12\x03\x20$%\n\n\
    \n\x02\x05\x04\x12\x04#\0,\x01\n\n\n\x03\x05\x04\x01\x12\x03#\x05\x1b\n\
    \x0b\n\x04\x05\x04\x02\0\x12\x03$\x08%\n\x0c\n\x05\x05\x04\x02\0\x01\x12\
    \x03$\x08\x20\n\x0c\n\x05\x05\x04\x02\0\x02\x12\x03$#$\n\x0b\n\x04\x05\
    \x04\x02\x01\x12\x03%\x08(\n\x0c\n\x05\x05\x04\x02\x01\x01\x12\x03%\x08#\
    \n\x0c\n\x05\x05\x04\x02\x01\x02\x12\x03%&'\n\x0b\n\x04\x05\x04\x02\x02\
    \x12\x03&\x08'\n\x0c\n\x05\x05\x04\x02\x02\x01\x12\x03&\x08\"\n\x0c\n\
    \x05\x05\x04\x02\x02\x02\x12\x03&%&\n\x0b\n\x04\x05\x04\x02\x03\x12\x03'\
    \x08&\n\x0c\n\x05\x05\x04\x02\x03\x01\x12\x03'\x08!\n\x0c\n\x05\x05\x04\
    \x02\x03\x02\x12\x03'$%\n\x0b\n\x04\x05\x04\x02\x04\x12\x03(\x08&\n\x0c\
    \n\x05\x05\x04\x02\x04\x01\x12\x03(\x08!\n\x0c\n\x05\x05\x04\x02\x04\x02\
    \x12\x03($%\n\x0b\n\x04\x05\x04\x02\x05\x12\x03)\x082\n\x0c\n\x05\x05\
    \x04\x02\x05\x01\x12\x03)\x08-\n\x0c\n\x05\x05\x04\x02\x05\x02\x12\x03)0\
    1\n\x0b\n\x04\x05\x04\x02\x06\x12\x03*\x085\n\x0c\n\x05\x05\x04\x02\x06\
    \x01\x12\x03*\x080\n\x0c\n\x05\x05\x04\x02\x06\x02\x12\x03*34\n\x0b\n\
    \x04\x05\x04\x02\x07\x12\x03+\x08(\n\x0c\n\x05\x05\x04\x02\x07\x01\x12\
    \x03+\x08#\n\x0c\n\x05\x05\x04\x02\x07\x02\x12\x03+&'\n\n\n\x02\x05\x05\
    \x12\x04.\07\x01\n\n\n\x03\x05\x05\x01\x12\x03.\x05\x14\n\x0b\n\x04\x05\
    \x05\x02\0\x12\x03/\x08&\n\x0c\n\x05\x05\x05\x02\0\x01\x12\x03/\x08!\n\
    \x0c\n\x05\x05\x05\x02\0\x02\x12\x03/$%\n\x0b\n\x04\x05\x05\x02\x01\x12\
    \x030\x08\"\n\x0c\n\x05\x05\x05\x02\x01\x01\x12\x030\x08\x1d\n\x0c\n\x05\
    \x05\x05\x02\x01\x02\x12\x030\x20!\n\x0b\n\x04\x05\x05\x02\x02\x12\x031\
    \x08(\n\x0c\n\x05\x05\x05\x02\x02\x01\x12\x031\x08#\n\x0c\n\x05\x05\x05\
    \x02\x02\x02\x12\x031&'\n\x0b\n\x04\x05\x05\x02\x03\x12\x032\x08%\n\x0c\
    \n\x05\x05\x05\x02\x03\x01\x12\x032\x08\x20\n\x0c\n\x05\x05\x05\x02\x03\
    \x02\x12\x032#$\n\x0b\n\x04\x05\x05\x02\x04\x12\x033\x08%\n\x0c\n\x05\
    \x05\x05\x02\x04\x01\x12\x033\x08\x20\n\x0c\n\x05\x05\x05\x02\x04\x02\
    \x12\x033#$\n\x0b\n\x04\x05\x05\x02\x05\x12\x034\x08(\n\x0c\n\x05\x05\
    \x05\x02\x05\x01\x12\x034\x08#\n\x0c\n\x05\x05\x05\x02\x05\x02\x12\x034&\
    '\n\x0b\n\x04\x05\x05\x02\x06\x12\x035\x08'\n\x0c\n\x05\x05\x05\x02\x06\
    \x01\x12\x035\x08\"\n\x0c\n\x05\x05\x05\x02\x06\x02\x12\x035%&\n\x0b\n\
    \x04\x05\x05\x02\x07\x12\x036\x08'\n\x0c\n\x05\x05\x05\x02\x07\x01\x12\
    \x036\x08!\n\x0c\n\x05\x05\x05\x02\x07\x02\x12\x036$&\n\n\n\x02\x04\0\
    \x12\x049\0;\x01\n\n\n\x03\x04\0\x01\x12\x039\x087\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03:\x08n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03:\x08\x10\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03:\x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03:\x18$\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03:'(\n\x0c\n\x05\x04\0\x02\
    \0\x08\x12\x03:)m\n\x0f\n\x08\x04\0\x02\0\x08\xd0\x86\x03\x12\x03:*l\n\n\
    \n\x02\x04\x01\x12\x04=\0A\x01\n\n\n\x03\x04\x01\x01\x12\x03=\x088\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03>\x08U\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    >\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03>\x11\x17\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03>\x18%\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03>()\n\
    \x0c\n\x05\x04\x01\x02\0\x08\x12\x03>*T\n\x0f\n\x08\x04\x01\x02\0\x08\
    \xd0\x86\x03\x12\x03>+S\n\x0b\n\x04\x04\x01\x02\x01\x12\x03?\x08V\n\x0c\
    \n\x05\x04\x01\x02\x01\x04\x12\x03?\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03?\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03?\x18%\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03?()\n\x0c\n\x05\x04\x01\x02\x01\
    \x08\x12\x03?*U\n\x0f\n\x08\x04\x01\x02\x01\x08\xd0\x86\x03\x12\x03?+T\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03@\x08^\n\x0c\n\x05\x04\x01\x02\x02\x04\
    \x12\x03@\x08\x10\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03@\x11\x17\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03@\x18!\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03@$%\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03@&]\n\x0f\n\x08\x04\
    \x01\x02\x02\x08\xd0\x86\x03\x12\x03@'\\\n\n\n\x02\x04\x02\x12\x04C\0J\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03C\x08%\n\x0c\n\x04\x04\x02\x02\0\x12\
    \x04D\x08\x80\x01\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03D\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03D\x11\x17\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03D\x18,\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03D/0\n\x0c\n\x05\x04\
    \x02\x02\0\x08\x12\x03D1\x7f\n\x0f\n\x08\x04\x02\x02\0\x08\xd0\x86\x03\
    \x12\x03D2~\n\x0c\n\x04\x04\x02\x02\x01\x12\x04E\x08\xa6\x01\n\x0c\n\x05\
    \x04\x02\x02\x01\x04\x12\x03E\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x06\
    \x12\x03E\x11(\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03E)6\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03E9:\n\r\n\x05\x04\x02\x02\x01\x08\x12\x04E;\
    \xa5\x01\n\x0c\n\x05\x04\x02\x02\x01\x07\x12\x03EFf\n\x10\n\x08\x04\x02\
    \x02\x01\x08\xd0\x86\x03\x12\x04Eh\xa4\x01\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03F\x08^\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03F\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x02\x05\x12\x03F\x11\x16\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x03F\x17\x1e\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03F!\"\n\x0c\
    \n\x05\x04\x02\x02\x02\x08\x12\x03F#]\n\x0f\n\x08\x04\x02\x02\x02\x08\
    \xd0\x86\x03\x12\x03F$\\\n\x0c\n\x04\x04\x02\x02\x03\x12\x04G\x08\x92\
    \x01\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03G\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x03\x05\x12\x03G\x11\x17\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03G\x18*\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03G-.\n\r\n\x05\x04\x02\
    \x02\x03\x08\x12\x04G/\x91\x01\n\x10\n\x08\x04\x02\x02\x03\x08\xd0\x86\
    \x03\x12\x04G0\x90\x01\n\x0b\n\x04\x04\x02\x02\x04\x12\x03H\x08w\n\x0c\n\
    \x05\x04\x02\x02\x04\x04\x12\x03H\x08\x10\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03H\x11\x17\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03H\x18$\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03H'(\n\x0c\n\x05\x04\x02\x02\x04\
    \x08\x12\x03H)v\n\x0f\n\x08\x04\x02\x02\x04\x08\xd0\x86\x03\x12\x03H*u\n\
    \x0b\n\x04\x04\x02\x02\x05\x12\x03I\x08T\n\x0c\n\x05\x04\x02\x02\x05\x04\
    \x12\x03I\x08\x10\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03I\x11\x16\n\x0c\
    \n\x05\x04\x02\x02\x05\x01\x12\x03I\x17!\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x03I$%\n\x0c\n\x05\x04\x02\x02\x05\x08\x12\x03I&S\n\x0f\n\x08\x04\
    \x02\x02\x05\x08\xd0\x86\x03\x12\x03I'R\n\n\n\x02\x04\x03\x12\x04L\0Q\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03L\x085\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03M\x081\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03M\x08\x10\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03M\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\
    \x03M\x18,\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03M/0\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03N\x08h\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03N\x08\x10\
    \n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03N\x11(\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03N)6\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03N9:\n\x0c\n\
    \x05\x04\x03\x02\x01\x08\x12\x03N;g\n\x0c\n\x05\x04\x03\x02\x01\x07\x12\
    \x03NFf\n\x0c\n\x04\x04\x03\x02\x02\x12\x04O\x08\x94\x01\n\x0c\n\x05\x04\
    \x03\x02\x02\x04\x12\x03O\x08\x10\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\
    \x03O\x11/\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03O0>\n\x0c\n\x05\x04\
    \x03\x02\x02\x03\x12\x03OAB\n\r\n\x05\x04\x03\x02\x02\x08\x12\x04OC\x93\
    \x01\n\x10\n\x08\x04\x03\x02\x02\x08\xd0\x86\x03\x12\x04OD\x92\x01\n\x0c\
    \n\x04\x04\x03\x02\x03\x12\x04P\x08\x8d\x01\n\x0c\n\x05\x04\x03\x02\x03\
    \x04\x12\x03P\x08\x10\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03P\x11\x17\n\
    \x0c\n\x05\x04\x03\x02\x03\x01\x12\x03P\x18\"\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03P%&\n\r\n\x05\x04\x03\x02\x03\x08\x12\x04P'\x8c\x01\n\
    \x0c\n\x05\x04\x03\x02\x03\x07\x12\x03P2;\n\x10\n\x08\x04\x03\x02\x03\
    \x08\xd0\x86\x03\x12\x04P=\x8b\x01\n\n\n\x02\x04\x04\x12\x04S\0V\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03S\x08+\n\x0c\n\x04\x04\x04\x02\0\x12\x04T\x08\
    \xb4\x01\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03T\x08\x10\n\x0c\n\x05\x04\
    \x04\x02\0\x06\x12\x03T\x11'\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03T(9\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03T<=\n\r\n\x05\x04\x04\x02\0\x08\x12\
    \x04T>\xb3\x01\n\x0c\n\x05\x04\x04\x02\0\x07\x12\x03TIh\n\x10\n\x08\x04\
    \x04\x02\0\x08\xd0\x86\x03\x12\x04Tj\xb2\x01\n\x0c\n\x04\x04\x04\x02\x01\
    \x12\x04U\x08\xdb\x01\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03U\x08\x10\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03U\x11\x17\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03U\x18*\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03U-.\n\r\n\
    \x05\x04\x04\x02\x01\x08\x12\x04U/\xda\x01\n\x10\n\x08\x04\x04\x02\x01\
    \x08\xd0\x86\x03\x12\x04U0\xd9\x01\n\n\n\x02\x04\x05\x12\x04X\0_\x01\n\n\
    \n\x03\x04\x05\x01\x12\x03X\x086\n\x0c\n\x04\x04\x05\x02\0\x12\x04Y\x08\
    \x84\x01\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03Y\x08\x10\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03Y\x11\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03Y\
    \x18!\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03Y$%\n\r\n\x05\x04\x05\x02\0\
    \x08\x12\x04Y&\x83\x01\n\x10\n\x08\x04\x05\x02\0\x08\xd0\x86\x03\x12\x04\
    Y'\x82\x01\n\x0b\n\x04\x04\x05\x02\x01\x12\x03Z\x08x\n\x0c\n\x05\x04\x05\
    \x02\x01\x04\x12\x03Z\x08\x10\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03Z\
    \x11\x17\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03Z\x18%\n\x0c\n\x05\x04\
    \x05\x02\x01\x03\x12\x03Z()\n\x0c\n\x05\x04\x05\x02\x01\x08\x12\x03Z*w\n\
    \x0f\n\x08\x04\x05\x02\x01\x08\xd0\x86\x03\x12\x03Z+v\n\x0c\n\x04\x04\
    \x05\x02\x02\x12\x04[\x08\x93\x01\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\
    \x03[\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03[\x11\x16\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x03[\x17!\n\x0c\n\x05\x04\x05\x02\x02\x03\
    \x12\x03[$%\n\r\n\x05\x04\x05\x02\x02\x08\x12\x04[&\x92\x01\n\x10\n\x08\
    \x04\x05\x02\x02\x08\xd0\x86\x03\x12\x04['\x91\x01\n\x0c\n\x04\x04\x05\
    \x02\x03\x12\x04\\\x08\x80\x01\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\x03\\\
    \x08\x10\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03\\\x11\x16\n\x0c\n\x05\
    \x04\x05\x02\x03\x01\x12\x03\\\x17\x1f\n\x0c\n\x05\x04\x05\x02\x03\x03\
    \x12\x03\\\"#\n\x0c\n\x05\x04\x05\x02\x03\x08\x12\x03\\$\x7f\n\x0f\n\x08\
    \x04\x05\x02\x03\x08\xd0\x86\x03\x12\x03\\%~\n\x0c\n\x04\x04\x05\x02\x04\
    \x12\x04]\x08\xa4\x01\n\x0c\n\x05\x04\x05\x02\x04\x04\x12\x03]\x08\x10\n\
    \x0c\n\x05\x04\x05\x02\x04\x06\x12\x03]\x115\n\x0c\n\x05\x04\x05\x02\x04\
    \x01\x12\x03]6K\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03]NO\n\r\n\x05\x04\
    \x05\x02\x04\x08\x12\x04]P\xa3\x01\n\x10\n\x08\x04\x05\x02\x04\x08\xd0\
    \x86\x03\x12\x04]Q\xa2\x01\n\x0b\n\x04\x04\x05\x02\x05\x12\x03^\x08N\n\
    \x0c\n\x05\x04\x05\x02\x05\x04\x12\x03^\x08\x10\n\x0c\n\x05\x04\x05\x02\
    \x05\x05\x12\x03^\x11\x16\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03^\x17\
    \x1e\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03^!\"\n\x0c\n\x05\x04\x05\x02\
    \x05\x08\x12\x03^#M\n\x0f\n\x08\x04\x05\x02\x05\x08\xd0\x86\x03\x12\x03^\
    $L\n\n\n\x02\x04\x06\x12\x04a\0n\x01\n\n\n\x03\x04\x06\x01\x12\x03a\x08>\
    \n\x0b\n\x04\x04\x06\x02\0\x12\x03b\x081\n\x0c\n\x05\x04\x06\x02\0\x04\
    \x12\x03b\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03b\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03b\x18,\n\x0c\n\x05\x04\x06\x02\0\x03\x12\
    \x03b/0\n\x0b\n\x04\x04\x06\x02\x01\x12\x03c\x08)\n\x0c\n\x05\x04\x06\
    \x02\x01\x04\x12\x03c\x08\x10\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03c\
    \x11\x17\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03c\x18$\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03c'(\n\x0b\n\x04\x04\x06\x02\x02\x12\x03d\x08g\n\
    \x0c\n\x05\x04\x06\x02\x02\x04\x12\x03d\x08\x10\n\x0c\n\x05\x04\x06\x02\
    \x02\x05\x12\x03d\x11\x17\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03d\x18*\
    \n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03d-.\n\x0c\n\x05\x04\x06\x02\x02\
    \x08\x12\x03d/f\n\x0f\n\x08\x04\x06\x02\x02\x08\xd0\x86\x03\x12\x03d0e\n\
    \x0b\n\x04\x04\x06\x02\x03\x12\x03e\x08g\n\x0c\n\x05\x04\x06\x02\x03\x04\
    \x12\x03e\x08\x10\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03e\x11\x17\n\x0c\
    \n\x05\x04\x06\x02\x03\x01\x12\x03e\x18,\n\x0c\n\x05\x04\x06\x02\x03\x03\
    \x12\x03e/0\n\x0c\n\x05\x04\x06\x02\x03\x08\x12\x03e1f\n\x0f\n\x08\x04\
    \x06\x02\x03\x08\xd0\x86\x03\x12\x03e2e\n\x0b\n\x04\x04\x06\x02\x04\x12\
    \x03f\x08H\n\x0c\n\x05\x04\x06\x02\x04\x04\x12\x03f\x08\x10\n\x0c\n\x05\
    \x04\x06\x02\x04\x05\x12\x03f\x11\x15\n\x0c\n\x05\x04\x06\x02\x04\x01\
    \x12\x03f\x16$\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03f'(\n\x0c\n\x05\
    \x04\x06\x02\x04\x08\x12\x03f)G\n\x0f\n\x08\x04\x06\x02\x04\x08\xd0\x86\
    \x03\x12\x03f*F\n\x0b\n\x04\x04\x06\x02\x05\x12\x03g\x08h\n\x0c\n\x05\
    \x04\x06\x02\x05\x04\x12\x03g\x08\x10\n\x0c\n\x05\x04\x06\x02\x05\x06\
    \x12\x03g\x11(\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03g)6\n\x0c\n\x05\
    \x04\x06\x02\x05\x03\x12\x03g9:\n\x0c\n\x05\x04\x06\x02\x05\x08\x12\x03g\
    ;g\n\x0c\n\x05\x04\x06\x02\x05\x07\x12\x03gFf\n\x0c\n\x04\x04\x06\x02\
    \x06\x12\x04h\x08\xb5\x01\n\x0c\n\x05\x04\x06\x02\x06\x04\x12\x03h\x08\
    \x10\n\x0c\n\x05\x04\x06\x02\x06\x06\x12\x03h\x11%\n\x0c\n\x05\x04\x06\
    \x02\x06\x01\x12\x03h&1\n\x0c\n\x05\x04\x06\x02\x06\x03\x12\x03h45\n\r\n\
    \x05\x04\x06\x02\x06\x08\x12\x04h6\xb4\x01\n\x0c\n\x05\x04\x06\x02\x06\
    \x07\x12\x03hAa\n\x10\n\x08\x04\x06\x02\x06\x08\xd0\x86\x03\x12\x04hc\
    \xb3\x01\n\x0c\n\x04\x04\x06\x02\x07\x12\x04i\x08\x8d\x01\n\x0c\n\x05\
    \x04\x06\x02\x07\x04\x12\x03i\x08\x10\n\x0c\n\x05\x04\x06\x02\x07\x05\
    \x12\x03i\x11\x17\n\x0c\n\x05\x04\x06\x02\x07\x01\x12\x03i\x18\"\n\x0c\n\
    \x05\x04\x06\x02\x07\x03\x12\x03i%&\n\r\n\x05\x04\x06\x02\x07\x08\x12\
    \x04i'\x8c\x01\n\x0c\n\x05\x04\x06\x02\x07\x07\x12\x03i2;\n\x10\n\x08\
    \x04\x06\x02\x07\x08\xd0\x86\x03\x12\x04i=\x8b\x01\n\x0c\n\x04\x04\x06\
    \x02\x08\x12\x04j\x08\x94\x01\n\x0c\n\x05\x04\x06\x02\x08\x04\x12\x03j\
    \x08\x10\n\x0c\n\x05\x04\x06\x02\x08\x06\x12\x03j\x11/\n\x0c\n\x05\x04\
    \x06\x02\x08\x01\x12\x03j0>\n\x0c\n\x05\x04\x06\x02\x08\x03\x12\x03jAB\n\
    \r\n\x05\x04\x06\x02\x08\x08\x12\x04jC\x93\x01\n\x10\n\x08\x04\x06\x02\
    \x08\x08\xd0\x86\x03\x12\x04jD\x92\x01\n\x0b\n\x04\x04\x06\x02\t\x12\x03\
    k\x08^\n\x0c\n\x05\x04\x06\x02\t\x04\x12\x03k\x08\x10\n\x0c\n\x05\x04\
    \x06\x02\t\x05\x12\x03k\x11\x17\n\x0c\n\x05\x04\x06\x02\t\x01\x12\x03k\
    \x18\"\n\x0c\n\x05\x04\x06\x02\t\x03\x12\x03k%'\n\x0c\n\x05\x04\x06\x02\
    \t\x08\x12\x03k(]\n\x0f\n\x08\x04\x06\x02\t\x08\xd0\x86\x03\x12\x03k)\\\
    \n\x0b\n\x04\x04\x06\x02\n\x12\x03l\x08&\n\x0c\n\x05\x04\x06\x02\n\x04\
    \x12\x03l\x08\x10\n\x0c\n\x05\x04\x06\x02\n\x05\x12\x03l\x11\x17\n\x0c\n\
    \x05\x04\x06\x02\n\x01\x12\x03l\x18\x20\n\x0c\n\x05\x04\x06\x02\n\x03\
    \x12\x03l#%\n\x0c\n\x04\x04\x06\x02\x0b\x12\x04m\x08\x86\x01\n\x0c\n\x05\
    \x04\x06\x02\x0b\x04\x12\x03m\x08\x10\n\x0c\n\x05\x04\x06\x02\x0b\x05\
    \x12\x03m\x11\x16\n\x0c\n\x05\x04\x06\x02\x0b\x01\x12\x03m\x17\x20\n\x0c\
    \n\x05\x04\x06\x02\x0b\x03\x12\x03m#%\n\r\n\x05\x04\x06\x02\x0b\x08\x12\
    \x04m&\x85\x01\n\x0c\n\x05\x04\x06\x02\x0b\x07\x12\x03m12\n\x10\n\x08\
    \x04\x06\x02\x0b\x08\xd0\x86\x03\x12\x04m4\x84\x01\n\n\n\x02\x04\x07\x12\
    \x04p\0y\x01\n\n\n\x03\x04\x07\x01\x12\x03p\x08?\n\x0b\n\x04\x04\x07\x02\
    \0\x12\x03q\x08p\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03q\x08\x10\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03q\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03q\x18!\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03q$%\n\x0c\n\x05\x04\
    \x07\x02\0\x08\x12\x03q&o\n\x0f\n\x08\x04\x07\x02\0\x08\xd0\x86\x03\x12\
    \x03q'n\n\x0c\n\x04\x04\x07\x02\x01\x12\x04r\x08\x9d\x01\n\x0c\n\x05\x04\
    \x07\x02\x01\x04\x12\x03r\x08\x10\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03r\x11\x16\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03r\x17!\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x03r$%\n\r\n\x05\x04\x07\x02\x01\x08\x12\x04r&\
    \x9c\x01\n\x10\n\x08\x04\x07\x02\x01\x08\xd0\x86\x03\x12\x04r'\x9b\x01\n\
    \x0c\n\x04\x04\x07\x02\x02\x12\x04s\x08\x80\x01\n\x0c\n\x05\x04\x07\x02\
    \x02\x04\x12\x03s\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03s\x11\
    \x16\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03s\x17\x1f\n\x0c\n\x05\x04\
    \x07\x02\x02\x03\x12\x03s\"#\n\x0c\n\x05\x04\x07\x02\x02\x08\x12\x03s$\
    \x7f\n\x0f\n\x08\x04\x07\x02\x02\x08\xd0\x86\x03\x12\x03s%~\n\x0c\n\x04\
    \x04\x07\x02\x03\x12\x04t\x08\xa4\x01\n\x0c\n\x05\x04\x07\x02\x03\x04\
    \x12\x03t\x08\x10\n\x0c\n\x05\x04\x07\x02\x03\x06\x12\x03t\x115\n\x0c\n\
    \x05\x04\x07\x02\x03\x01\x12\x03t6K\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\
    \x03tNO\n\r\n\x05\x04\x07\x02\x03\x08\x12\x04tP\xa3\x01\n\x10\n\x08\x04\
    \x07\x02\x03\x08\xd0\x86\x03\x12\x04tQ\xa2\x01\n\x0c\n\x04\x04\x07\x02\
    \x04\x12\x04u\x08\x92\x01\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03u\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x04\x05\x12\x03u\x11\x17\n\x0c\n\x05\x04\
    \x07\x02\x04\x01\x12\x03u\x18\x1f\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\
    \x03u\"#\n\r\n\x05\x04\x07\x02\x04\x08\x12\x04u$\x91\x01\n\x10\n\x08\x04\
    \x07\x02\x04\x08\xd0\x86\x03\x12\x04u%\x90\x01\n\x0c\n\x04\x04\x07\x02\
    \x05\x12\x04v\x08\x9e\x01\n\x0c\n\x05\x04\x07\x02\x05\x04\x12\x03v\x08\
    \x10\n\x0c\n\x05\x04\x07\x02\x05\x05\x12\x03v\x11\x17\n\x0c\n\x05\x04\
    \x07\x02\x05\x01\x12\x03v\x18\"\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\x03v\
    %&\n\r\n\x05\x04\x07\x02\x05\x08\x12\x04v'\x9d\x01\n\x10\n\x08\x04\x07\
    \x02\x05\x08\xd0\x86\x03\x12\x04v(\x9c\x01\n\x0b\n\x04\x04\x07\x02\x06\
    \x12\x03w\x08k\n\x0c\n\x05\x04\x07\x02\x06\x04\x12\x03w\x08\x10\n\x0c\n\
    \x05\x04\x07\x02\x06\x05\x12\x03w\x11\x17\n\x0c\n\x05\x04\x07\x02\x06\
    \x01\x12\x03w\x18-\n\x0c\n\x05\x04\x07\x02\x06\x03\x12\x03w01\n\x0c\n\
    \x05\x04\x07\x02\x06\x08\x12\x03w2j\n\x0f\n\x08\x04\x07\x02\x06\x08\xd0\
    \x86\x03\x12\x03w3i\n\x0b\n\x04\x04\x07\x02\x07\x12\x03x\x08z\n\x0c\n\
    \x05\x04\x07\x02\x07\x04\x12\x03x\x08\x10\n\x0c\n\x05\x04\x07\x02\x07\
    \x05\x12\x03x\x11\x17\n\x0c\n\x05\x04\x07\x02\x07\x01\x12\x03x\x18.\n\
    \x0c\n\x05\x04\x07\x02\x07\x03\x12\x03x12\n\x0c\n\x05\x04\x07\x02\x07\
    \x08\x12\x03x3y\n\x0f\n\x08\x04\x07\x02\x07\x08\xd0\x86\x03\x12\x03x4x\n\
    \n\n\x02\x04\x08\x12\x04{\0\x7f\x01\n\n\n\x03\x04\x08\x01\x12\x03{\x085\
    \n\x0b\n\x04\x04\x08\x02\0\x12\x03|\x08&\n\x0c\n\x05\x04\x08\x02\0\x04\
    \x12\x03|\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03|\x11\x17\n\x0c\n\
    \x05\x04\x08\x02\0\x01\x12\x03|\x18!\n\x0c\n\x05\x04\x08\x02\0\x03\x12\
    \x03|$%\n\x0b\n\x04\x04\x08\x02\x01\x12\x03}\x08&\n\x0c\n\x05\x04\x08\
    \x02\x01\x04\x12\x03}\x08\x10\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03}\
    \x11\x16\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03}\x17!\n\x0c\n\x05\x04\
    \x08\x02\x01\x03\x12\x03}$%\n\x0c\n\x04\x04\x08\x02\x02\x12\x04~\x08\x8a\
    \x01\n\x0c\n\x05\x04\x08\x02\x02\x04\x12\x03~\x08\x10\n\x0c\n\x05\x04\
    \x08\x02\x02\x05\x12\x03~\x11\x18\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\
    \x03~\x19(\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03~+,\n\r\n\x05\x04\x08\
    \x02\x02\x08\x12\x04~-\x89\x01\n\x10\n\x08\x04\x08\x02\x02\x08\xd0\x86\
    \x03\x12\x04~.\x88\x01\n\x0c\n\x02\x04\t\x12\x06\x81\x01\0\x8a\x01\x01\n\
    \x0b\n\x03\x04\t\x01\x12\x04\x81\x01\x086\n\x0c\n\x04\x04\t\x02\0\x12\
    \x04\x82\x01\x08m\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x82\x01\x08\x10\n\r\
    \n\x05\x04\t\x02\0\x05\x12\x04\x82\x01\x11\x17\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\x82\x01\x18%\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x82\x01()\n\r\n\
    \x05\x04\t\x02\0\x08\x12\x04\x82\x01*l\n\x10\n\x08\x04\t\x02\0\x08\xd0\
    \x86\x03\x12\x04\x82\x01+k\n\r\n\x04\x04\t\x02\x01\x12\x05\x83\x01\x08\
    \x99\x01\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x83\x01\x08\x10\n\r\n\x05\
    \x04\t\x02\x01\x05\x12\x04\x83\x01\x11\x17\n\r\n\x05\x04\t\x02\x01\x01\
    \x12\x04\x83\x01\x18)\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x83\x01,-\n\
    \x0e\n\x05\x04\t\x02\x01\x08\x12\x05\x83\x01.\x98\x01\n\x11\n\x08\x04\t\
    \x02\x01\x08\xd0\x86\x03\x12\x05\x83\x01/\x97\x01\n\r\n\x04\x04\t\x02\
    \x02\x12\x05\x84\x01\x08\x85\x01\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\x84\
    \x01\x08\x10\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x84\x01\x11\x17\n\r\n\
    \x05\x04\t\x02\x02\x01\x12\x04\x84\x01\x18%\n\r\n\x05\x04\t\x02\x02\x03\
    \x12\x04\x84\x01()\n\x0e\n\x05\x04\t\x02\x02\x08\x12\x05\x84\x01*\x84\
    \x01\n\x11\n\x08\x04\t\x02\x02\x08\xd0\x86\x03\x12\x05\x84\x01+\x83\x01\
    \n\r\n\x04\x04\t\x02\x03\x12\x05\x85\x01\x08\x8b\x01\n\r\n\x05\x04\t\x02\
    \x03\x04\x12\x04\x85\x01\x08\x10\n\r\n\x05\x04\t\x02\x03\x05\x12\x04\x85\
    \x01\x11\x17\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\x85\x01\x18$\n\r\n\x05\
    \x04\t\x02\x03\x03\x12\x04\x85\x01'(\n\x0e\n\x05\x04\t\x02\x03\x08\x12\
    \x05\x85\x01)\x8a\x01\n\x11\n\x08\x04\t\x02\x03\x08\xd0\x86\x03\x12\x05\
    \x85\x01*\x89\x01\n\r\n\x04\x04\t\x02\x04\x12\x05\x86\x01\x08\xa7\x01\n\
    \r\n\x05\x04\t\x02\x04\x04\x12\x04\x86\x01\x08\x10\n\r\n\x05\x04\t\x02\
    \x04\x05\x12\x04\x86\x01\x11\x15\n\r\n\x05\x04\t\x02\x04\x01\x12\x04\x86\
    \x01\x16,\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\x86\x01/0\n\x0e\n\x05\x04\
    \t\x02\x04\x08\x12\x05\x86\x011\xa6\x01\n\x11\n\x08\x04\t\x02\x04\x08\
    \xd0\x86\x03\x12\x05\x86\x012\xa5\x01\n\x0c\n\x04\x04\t\x02\x05\x12\x04\
    \x87\x01\x08y\n\r\n\x05\x04\t\x02\x05\x04\x12\x04\x87\x01\x08\x10\n\r\n\
    \x05\x04\t\x02\x05\x05\x12\x04\x87\x01\x11\x17\n\r\n\x05\x04\t\x02\x05\
    \x01\x12\x04\x87\x01\x18$\n\r\n\x05\x04\t\x02\x05\x03\x12\x04\x87\x01'(\
    \n\r\n\x05\x04\t\x02\x05\x08\x12\x04\x87\x01)x\n\x10\n\x08\x04\t\x02\x05\
    \x08\xd0\x86\x03\x12\x04\x87\x01*w\n\r\n\x04\x04\t\x02\x06\x12\x05\x88\
    \x01\x08\x8f\x01\n\r\n\x05\x04\t\x02\x06\x04\x12\x04\x88\x01\x08\x10\n\r\
    \n\x05\x04\t\x02\x06\x05\x12\x04\x88\x01\x11\x17\n\r\n\x05\x04\t\x02\x06\
    \x01\x12\x04\x88\x01\x18&\n\r\n\x05\x04\t\x02\x06\x03\x12\x04\x88\x01)*\
    \n\x0e\n\x05\x04\t\x02\x06\x08\x12\x05\x88\x01+\x8e\x01\n\x11\n\x08\x04\
    \t\x02\x06\x08\xd0\x86\x03\x12\x05\x88\x01,\x8d\x01\n\x0c\n\x04\x04\t\
    \x02\x07\x12\x04\x89\x01\x08k\n\r\n\x05\x04\t\x02\x07\x04\x12\x04\x89\
    \x01\x08\x10\n\r\n\x05\x04\t\x02\x07\x05\x12\x04\x89\x01\x11\x17\n\r\n\
    \x05\x04\t\x02\x07\x01\x12\x04\x89\x01\x18-\n\r\n\x05\x04\t\x02\x07\x03\
    \x12\x04\x89\x0101\n\r\n\x05\x04\t\x02\x07\x08\x12\x04\x89\x012j\n\x10\n\
    \x08\x04\t\x02\x07\x08\xd0\x86\x03\x12\x04\x89\x013i\n\x0c\n\x02\x04\n\
    \x12\x06\x8c\x01\0\x8e\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\x8c\x01\x08\
    2\n\x0c\n\x04\x04\n\x02\0\x12\x04\x8d\x01\x08k\n\r\n\x05\x04\n\x02\0\x04\
    \x12\x04\x8d\x01\x08\x10\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x8d\x01\x11\
    \x17\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x8d\x01\x18!\n\r\n\x05\x04\n\x02\
    \0\x03\x12\x04\x8d\x01$%\n\r\n\x05\x04\n\x02\0\x08\x12\x04\x8d\x01&j\n\
    \x10\n\x08\x04\n\x02\0\x08\xd0\x86\x03\x12\x04\x8d\x01'i\n\x0c\n\x02\x04\
    \x0b\x12\x06\x90\x01\0\x9d\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\x90\
    \x01\x083\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x91\x01\x08K\n\r\n\x05\x04\
    \x0b\x02\0\x04\x12\x04\x91\x01\x08\x10\n\r\n\x05\x04\x0b\x02\0\x05\x12\
    \x04\x91\x01\x11\x17\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x91\x01\x18\x1a\
    \n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x91\x01\x1d\x1e\n\r\n\x05\x04\x0b\
    \x02\0\x08\x12\x04\x91\x01\x1fJ\n\x10\n\x08\x04\x0b\x02\0\x08\xd0\x86\
    \x03\x12\x04\x91\x01\x20I\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\x92\x01\
    \x08P\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04\x92\x01\x08\x10\n\r\n\x05\
    \x04\x0b\x02\x01\x05\x12\x04\x92\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x01\
    \x01\x12\x04\x92\x01\x18\x1e\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\x92\
    \x01!\"\n\r\n\x05\x04\x0b\x02\x01\x08\x12\x04\x92\x01#O\n\x10\n\x08\x04\
    \x0b\x02\x01\x08\xd0\x86\x03\x12\x04\x92\x01$N\n\x0c\n\x04\x04\x0b\x02\
    \x02\x12\x04\x93\x01\x08G\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04\x93\x01\
    \x08\x10\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\x93\x01\x11\x17\n\r\n\x05\
    \x04\x0b\x02\x02\x01\x12\x04\x93\x01\x18\x1c\n\r\n\x05\x04\x0b\x02\x02\
    \x03\x12\x04\x93\x01\x1f\x20\n\r\n\x05\x04\x0b\x02\x02\x08\x12\x04\x93\
    \x01!F\n\x10\n\x08\x04\x0b\x02\x02\x08\xd0\x86\x03\x12\x04\x93\x01\"E\n\
    \x0c\n\x04\x04\x0b\x02\x03\x12\x04\x94\x01\x08I\n\r\n\x05\x04\x0b\x02\
    \x03\x04\x12\x04\x94\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x03\x05\x12\x04\
    \x94\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x03\x01\x12\x04\x94\x01\x18\x1d\n\
    \r\n\x05\x04\x0b\x02\x03\x03\x12\x04\x94\x01\x20!\n\r\n\x05\x04\x0b\x02\
    \x03\x08\x12\x04\x94\x01\"H\n\x10\n\x08\x04\x0b\x02\x03\x08\xd0\x86\x03\
    \x12\x04\x94\x01#G\n\x0c\n\x04\x04\x0b\x02\x04\x12\x04\x95\x01\x08M\n\r\
    \n\x05\x04\x0b\x02\x04\x04\x12\x04\x95\x01\x08\x10\n\r\n\x05\x04\x0b\x02\
    \x04\x05\x12\x04\x95\x01\x11\x17\n\r\n\x05\x04\x0b\x02\x04\x01\x12\x04\
    \x95\x01\x18\x1f\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\x95\x01\"#\n\r\n\
    \x05\x04\x0b\x02\x04\x08\x12\x04\x95\x01$L\n\x10\n\x08\x04\x0b\x02\x04\
    \x08\xd0\x86\x03\x12\x04\x95\x01%K\n\r\n\x04\x04\x0b\x02\x05\x12\x05\x96\
    \x01\x08\x96\x01\n\r\n\x05\x04\x0b\x02\x05\x04\x12\x04\x96\x01\x08\x10\n\
    \r\n\x05\x04\x0b\x02\x05\x06\x12\x04\x96\x01\x11(\n\r\n\x05\x04\x0b\x02\
    \x05\x01\x12\x04\x96\x01)6\n\r\n\x05\x04\x0b\x02\x05\x03\x12\x04\x96\x01\
    9:\n\x0e\n\x05\x04\x0b\x02\x05\x08\x12\x05\x96\x01;\x95\x01\n\r\n\x05\
    \x04\x0b\x02\x05\x07\x12\x04\x96\x01Ff\n\x11\n\x08\x04\x0b\x02\x05\x08\
    \xd0\x86\x03\x12\x05\x96\x01h\x94\x01\n\x0c\n\x04\x04\x0b\x02\x06\x12\
    \x04\x97\x01\x08^\n\r\n\x05\x04\x0b\x02\x06\x04\x12\x04\x97\x01\x08\x10\
    \n\r\n\x05\x04\x0b\x02\x06\x05\x12\x04\x97\x01\x11\x17\n\r\n\x05\x04\x0b\
    \x02\x06\x01\x12\x04\x97\x01\x18,\n\r\n\x05\x04\x0b\x02\x06\x03\x12\x04\
    \x97\x01/0\n\r\n\x05\x04\x0b\x02\x06\x08\x12\x04\x97\x011]\n\x10\n\x08\
    \x04\x0b\x02\x06\x08\xd0\x86\x03\x12\x04\x97\x012\\\n\x0c\n\x04\x04\x0b\
    \x02\x07\x12\x04\x98\x01\x08E\n\r\n\x05\x04\x0b\x02\x07\x04\x12\x04\x98\
    \x01\x08\x10\n\r\n\x05\x04\x0b\x02\x07\x05\x12\x04\x98\x01\x11\x16\n\r\n\
    \x05\x04\x0b\x02\x07\x01\x12\x04\x98\x01\x17\x1e\n\r\n\x05\x04\x0b\x02\
    \x07\x03\x12\x04\x98\x01!\"\n\r\n\x05\x04\x0b\x02\x07\x08\x12\x04\x98\
    \x01#D\n\x10\n\x08\x04\x0b\x02\x07\x08\xd0\x86\x03\x12\x04\x98\x01$C\n\r\
    \n\x04\x04\x0b\x02\x08\x12\x05\x99\x01\x08\xca\x01\n\r\n\x05\x04\x0b\x02\
    \x08\x04\x12\x04\x99\x01\x08\x10\n\r\n\x05\x04\x0b\x02\x08\x06\x12\x04\
    \x99\x01\x11-\n\r\n\x05\x04\x0b\x02\x08\x01\x12\x04\x99\x01.;\n\r\n\x05\
    \x04\x0b\x02\x08\x03\x12\x04\x99\x01>?\n\x0e\n\x05\x04\x0b\x02\x08\x08\
    \x12\x05\x99\x01@\xc9\x01\n\r\n\x05\x04\x0b\x02\x08\x07\x12\x04\x99\x01K\
    p\n\x11\n\x08\x04\x0b\x02\x08\x08\xd0\x86\x03\x12\x05\x99\x01r\xc8\x01\n\
    \r\n\x04\x04\x0b\x02\t\x12\x05\x9a\x01\x08\x89\x01\n\r\n\x05\x04\x0b\x02\
    \t\x04\x12\x04\x9a\x01\x08\x10\n\r\n\x05\x04\x0b\x02\t\x05\x12\x04\x9a\
    \x01\x11\x15\n\r\n\x05\x04\x0b\x02\t\x01\x12\x04\x9a\x01\x161\n\r\n\x05\
    \x04\x0b\x02\t\x03\x12\x04\x9a\x0146\n\x0e\n\x05\x04\x0b\x02\t\x08\x12\
    \x05\x9a\x017\x88\x01\n\x11\n\x08\x04\x0b\x02\t\x08\xd0\x86\x03\x12\x05\
    \x9a\x018\x87\x01\n\x0c\n\x04\x04\x0b\x02\n\x12\x04\x9b\x01\x08p\n\r\n\
    \x05\x04\x0b\x02\n\x04\x12\x04\x9b\x01\x08\x10\n\r\n\x05\x04\x0b\x02\n\
    \x05\x12\x04\x9b\x01\x11\x15\n\r\n\x05\x04\x0b\x02\n\x01\x12\x04\x9b\x01\
    \x16&\n\r\n\x05\x04\x0b\x02\n\x03\x12\x04\x9b\x01)+\n\r\n\x05\x04\x0b\
    \x02\n\x08\x12\x04\x9b\x01,o\n\x10\n\x08\x04\x0b\x02\n\x08\xd0\x86\x03\
    \x12\x04\x9b\x01-n\n\r\n\x04\x04\x0b\x02\x0b\x12\x05\x9c\x01\x08\xb4\x01\
    \n\r\n\x05\x04\x0b\x02\x0b\x04\x12\x04\x9c\x01\x08\x10\n\r\n\x05\x04\x0b\
    \x02\x0b\x06\x12\x04\x9c\x01\x11%\n\r\n\x05\x04\x0b\x02\x0b\x01\x12\x04\
    \x9c\x01&;\n\r\n\x05\x04\x0b\x02\x0b\x03\x12\x04\x9c\x01>@\n\x0e\n\x05\
    \x04\x0b\x02\x0b\x08\x12\x05\x9c\x01A\xb3\x01\n\r\n\x05\x04\x0b\x02\x0b\
    \x07\x12\x04\x9c\x01Li\n\x11\n\x08\x04\x0b\x02\x0b\x08\xd0\x86\x03\x12\
    \x05\x9c\x01k\xb2\x01\n\x0c\n\x02\x04\x0c\x12\x06\x9f\x01\0\xa6\x01\x01\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\x9f\x01\x08G\n\x0c\n\x04\x04\x0c\x02\0\
    \x12\x04\xa0\x01\x08E\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xa0\x01\x08\
    \x10\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xa0\x01\x11\x16\n\r\n\x05\x04\
    \x0c\x02\0\x01\x12\x04\xa0\x01\x17\x1e\n\r\n\x05\x04\x0c\x02\0\x03\x12\
    \x04\xa0\x01!\"\n\r\n\x05\x04\x0c\x02\0\x08\x12\x04\xa0\x01#D\n\x10\n\
    \x08\x04\x0c\x02\0\x08\xd0\x86\x03\x12\x04\xa0\x01$C\n\x0c\n\x04\x04\x0c\
    \x02\x01\x12\x04\xa1\x01\x08b\n\r\n\x05\x04\x0c\x02\x01\x04\x12\x04\xa1\
    \x01\x08\x10\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xa1\x01\x11\x17\n\r\n\
    \x05\x04\x0c\x02\x01\x01\x12\x04\xa1\x01\x18!\n\r\n\x05\x04\x0c\x02\x01\
    \x03\x12\x04\xa1\x01$%\n\r\n\x05\x04\x0c\x02\x01\x08\x12\x04\xa1\x01&a\n\
    \x10\n\x08\x04\x0c\x02\x01\x08\xd0\x86\x03\x12\x04\xa1\x01'`\n\x0c\n\x04\
    \x04\x0c\x02\x02\x12\x04\xa2\x01\x08Q\n\r\n\x05\x04\x0c\x02\x02\x04\x12\
    \x04\xa2\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xa2\x01\x11\
    \x18\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\xa2\x01\x19\x20\n\r\n\x05\x04\
    \x0c\x02\x02\x03\x12\x04\xa2\x01#$\n\r\n\x05\x04\x0c\x02\x02\x08\x12\x04\
    \xa2\x01%P\n\x10\n\x08\x04\x0c\x02\x02\x08\xd0\x86\x03\x12\x04\xa2\x01&O\
    \n\x0c\n\x04\x04\x0c\x02\x03\x12\x04\xa3\x01\x08}\n\r\n\x05\x04\x0c\x02\
    \x03\x04\x12\x04\xa3\x01\x08\x10\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\
    \xa3\x01\x11\x16\n\r\n\x05\x04\x0c\x02\x03\x01\x12\x04\xa3\x01\x17\x20\n\
    \r\n\x05\x04\x0c\x02\x03\x03\x12\x04\xa3\x01#$\n\r\n\x05\x04\x0c\x02\x03\
    \x08\x12\x04\xa3\x01%|\n\x10\n\x08\x04\x0c\x02\x03\x08\xd0\x86\x03\x12\
    \x04\xa3\x01&{\n\r\n\x04\x04\x0c\x02\x04\x12\x05\xa4\x01\x08\x85\x01\n\r\
    \n\x05\x04\x0c\x02\x04\x04\x12\x04\xa4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\
    \x04\x05\x12\x04\xa4\x01\x11\x15\n\r\n\x05\x04\x0c\x02\x04\x01\x12\x04\
    \xa4\x01\x16\x1d\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\xa4\x01\x20!\n\
    \x0e\n\x05\x04\x0c\x02\x04\x08\x12\x05\xa4\x01\"\x84\x01\n\r\n\x05\x04\
    \x0c\x02\x04\x07\x12\x04\xa4\x01-2\n\x11\n\x08\x04\x0c\x02\x04\x08\xd0\
    \x86\x03\x12\x05\xa4\x014\x83\x01\n\r\n\x04\x04\x0c\x02\x05\x12\x05\xa5\
    \x01\x08\xb5\x01\n\r\n\x05\x04\x0c\x02\x05\x04\x12\x04\xa5\x01\x08\x10\n\
    \r\n\x05\x04\x0c\x02\x05\x06\x12\x04\xa5\x01\x11%\n\r\n\x05\x04\x0c\x02\
    \x05\x01\x12\x04\xa5\x01&1\n\r\n\x05\x04\x0c\x02\x05\x03\x12\x04\xa5\x01\
    45\n\x0e\n\x05\x04\x0c\x02\x05\x08\x12\x05\xa5\x016\xb4\x01\n\r\n\x05\
    \x04\x0c\x02\x05\x07\x12\x04\xa5\x01Aa\n\x11\n\x08\x04\x0c\x02\x05\x08\
    \xd0\x86\x03\x12\x05\xa5\x01c\xb3\x01\n\x0c\n\x02\x04\r\x12\x06\xa8\x01\
    \0\xa9\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xa8\x01\x08H\n\x0c\n\x02\
    \x04\x0e\x12\x06\xab\x01\0\xb0\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\
    \xab\x01\x08C\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\xac\x01\x08f\n\r\n\x05\
    \x04\x0e\x02\0\x04\x12\x04\xac\x01\x08\x10\n\r\n\x05\x04\x0e\x02\0\x05\
    \x12\x04\xac\x01\x11\x17\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xac\x01\x18\
    !\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xac\x01$%\n\r\n\x05\x04\x0e\x02\0\
    \x08\x12\x04\xac\x01&e\n\x10\n\x08\x04\x0e\x02\0\x08\xd0\x86\x03\x12\x04\
    \xac\x01'd\n\x0c\n\x04\x04\x0e\x02\x01\x12\x04\xad\x01\x08Q\n\r\n\x05\
    \x04\x0e\x02\x01\x04\x12\x04\xad\x01\x08\x10\n\r\n\x05\x04\x0e\x02\x01\
    \x05\x12\x04\xad\x01\x11\x18\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xad\
    \x01\x19\x20\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xad\x01#$\n\r\n\x05\
    \x04\x0e\x02\x01\x08\x12\x04\xad\x01%P\n\x10\n\x08\x04\x0e\x02\x01\x08\
    \xd0\x86\x03\x12\x04\xad\x01&O\n\x0c\n\x04\x04\x0e\x02\x02\x12\x04\xae\
    \x01\x08G\n\r\n\x05\x04\x0e\x02\x02\x04\x12\x04\xae\x01\x08\x10\n\r\n\
    \x05\x04\x0e\x02\x02\x05\x12\x04\xae\x01\x11\x17\n\r\n\x05\x04\x0e\x02\
    \x02\x01\x12\x04\xae\x01\x18\x1c\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\
    \xae\x01\x1f\x20\n\r\n\x05\x04\x0e\x02\x02\x08\x12\x04\xae\x01!F\n\x10\n\
    \x08\x04\x0e\x02\x02\x08\xd0\x86\x03\x12\x04\xae\x01\"E\n\r\n\x04\x04\
    \x0e\x02\x03\x12\x05\xaf\x01\x08\x8f\x01\n\r\n\x05\x04\x0e\x02\x03\x04\
    \x12\x04\xaf\x01\x08\x10\n\r\n\x05\x04\x0e\x02\x03\x06\x12\x04\xaf\x01\
    \x11'\n\r\n\x05\x04\x0e\x02\x03\x01\x12\x04\xaf\x01(1\n\r\n\x05\x04\x0e\
    \x02\x03\x03\x12\x04\xaf\x0145\n\x0e\n\x05\x04\x0e\x02\x03\x08\x12\x05\
    \xaf\x016\x8e\x01\n\r\n\x05\x04\x0e\x02\x03\x07\x12\x04\xaf\x01A`\n\x11\
    \n\x08\x04\x0e\x02\x03\x08\xd0\x86\x03\x12\x05\xaf\x01b\x8d\x01\n\x0c\n\
    \x02\x04\x0f\x12\x06\xb2\x01\0\xb4\x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\
    \x04\xb2\x01\x08D\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\xb3\x01\x08k\n\r\n\
    \x05\x04\x0f\x02\0\x04\x12\x04\xb3\x01\x08\x10\n\r\n\x05\x04\x0f\x02\0\
    \x05\x12\x04\xb3\x01\x11\x17\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xb3\x01\
    \x18-\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xb3\x0101\n\r\n\x05\x04\x0f\
    \x02\0\x08\x12\x04\xb3\x012j\n\x10\n\x08\x04\x0f\x02\0\x08\xd0\x86\x03\
    \x12\x04\xb3\x013i\n\x0c\n\x02\x04\x10\x12\x06\xb6\x01\0\xba\x01\x01\n\
    \x0b\n\x03\x04\x10\x01\x12\x04\xb6\x01\x08:\n\x0c\n\x04\x04\x10\x02\0\
    \x12\x04\xb7\x01\x08*\n\r\n\x05\x04\x10\x02\0\x04\x12\x04\xb7\x01\x08\
    \x10\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xb7\x01\x11\x17\n\r\n\x05\x04\
    \x10\x02\0\x01\x12\x04\xb7\x01\x18%\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\
    \xb7\x01()\n\x0c\n\x04\x04\x10\x02\x01\x12\x04\xb8\x01\x08%\n\r\n\x05\
    \x04\x10\x02\x01\x04\x12\x04\xb8\x01\x08\x10\n\r\n\x05\x04\x10\x02\x01\
    \x05\x12\x04\xb8\x01\x11\x18\n\r\n\x05\x04\x10\x02\x01\x01\x12\x04\xb8\
    \x01\x19\x20\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\xb8\x01#$\n\x0c\n\x04\
    \x04\x10\x02\x02\x12\x04\xb9\x01\x08Z\n\r\n\x05\x04\x10\x02\x02\x04\x12\
    \x04\xb9\x01\x08\x10\n\r\n\x05\x04\x10\x02\x02\x06\x12\x04\xb9\x01\x11#\
    \n\r\n\x05\x04\x10\x02\x02\x01\x12\x04\xb9\x01$0\n\r\n\x05\x04\x10\x02\
    \x02\x03\x12\x04\xb9\x0134\n\r\n\x05\x04\x10\x02\x02\x08\x12\x04\xb9\x01\
    5Y\n\r\n\x05\x04\x10\x02\x02\x07\x12\x04\xb9\x01@X\n\x0c\n\x02\x04\x11\
    \x12\x06\xbc\x01\0\xbf\x01\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\xbc\x01\
    \x08;\n\x0c\n\x04\x04\x11\x02\0\x12\x04\xbd\x01\x08)\n\r\n\x05\x04\x11\
    \x02\0\x04\x12\x04\xbd\x01\x08\x10\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\
    \xbd\x01\x11\x17\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\xbd\x01\x18$\n\r\n\
    \x05\x04\x11\x02\0\x03\x12\x04\xbd\x01'(\n\x0c\n\x04\x04\x11\x02\x01\x12\
    \x04\xbe\x01\x08*\n\r\n\x05\x04\x11\x02\x01\x04\x12\x04\xbe\x01\x08\x10\
    \n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\xbe\x01\x11\x17\n\r\n\x05\x04\x11\
    \x02\x01\x01\x12\x04\xbe\x01\x18%\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\
    \xbe\x01()\n\x0c\n\x02\x04\x12\x12\x06\xc1\x01\0\xc2\x01\x01\n\x0b\n\x03\
    \x04\x12\x01\x12\x04\xc1\x01\x086\n\x0c\n\x02\x04\x13\x12\x06\xc4\x01\0\
    \xde\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\xc4\x01\x087\n\x0e\n\x04\
    \x04\x13\x03\0\x12\x06\xc5\x01\x08\xcc\x01\t\n\r\n\x05\x04\x13\x03\0\x01\
    \x12\x04\xc5\x01\x10\x1f\n\x0f\n\x06\x04\x13\x03\0\x02\0\x12\x05\xc6\x01\
    \x10\x87\x01\n\x0f\n\x07\x04\x13\x03\0\x02\0\x04\x12\x04\xc6\x01\x10\x18\
    \n\x0f\n\x07\x04\x13\x03\0\x02\0\x05\x12\x04\xc6\x01\x19\x1f\n\x0f\n\x07\
    \x04\x13\x03\0\x02\0\x01\x12\x04\xc6\x01\x20$\n\x0f\n\x07\x04\x13\x03\0\
    \x02\0\x03\x12\x04\xc6\x01'(\n\x10\n\x07\x04\x13\x03\0\x02\0\x08\x12\x05\
    \xc6\x01)\x86\x01\n\x13\n\n\x04\x13\x03\0\x02\0\x08\xd0\x86\x03\x12\x05\
    \xc6\x01*\x85\x01\n\x0e\n\x06\x04\x13\x03\0\x02\x01\x12\x04\xc7\x01\x10b\
    \n\x0f\n\x07\x04\x13\x03\0\x02\x01\x04\x12\x04\xc7\x01\x10\x18\n\x0f\n\
    \x07\x04\x13\x03\0\x02\x01\x06\x12\x04\xc7\x01\x19'\n\x0f\n\x07\x04\x13\
    \x03\0\x02\x01\x01\x12\x04\xc7\x01(*\n\x0f\n\x07\x04\x13\x03\0\x02\x01\
    \x03\x12\x04\xc7\x01-.\n\x0f\n\x07\x04\x13\x03\0\x02\x01\x08\x12\x04\xc7\
    \x01/a\n\x12\n\n\x04\x13\x03\0\x02\x01\x08\xd0\x86\x03\x12\x04\xc7\x010`\
    \n\x0e\n\x06\x04\x13\x03\0\x02\x02\x12\x04\xc8\x01\x10+\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x02\x04\x12\x04\xc8\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x02\x05\x12\x04\xc8\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\0\x02\x02\
    \x01\x12\x04\xc8\x01\x20&\n\x0f\n\x07\x04\x13\x03\0\x02\x02\x03\x12\x04\
    \xc8\x01)*\n\x0e\n\x06\x04\x13\x03\0\x02\x03\x12\x04\xc9\x01\x10v\n\x0f\
    \n\x07\x04\x13\x03\0\x02\x03\x04\x12\x04\xc9\x01\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x03\x05\x12\x04\xc9\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x03\x01\x12\x04\xc9\x01\x20'\n\x0f\n\x07\x04\x13\x03\0\x02\x03\x03\
    \x12\x04\xc9\x01*+\n\x0f\n\x07\x04\x13\x03\0\x02\x03\x08\x12\x04\xc9\x01\
    ,u\n\x12\n\n\x04\x13\x03\0\x02\x03\x08\xd0\x86\x03\x12\x04\xc9\x01-t\n\
    \x0e\n\x06\x04\x13\x03\0\x02\x04\x12\x04\xca\x01\x10r\n\x0f\n\x07\x04\
    \x13\x03\0\x02\x04\x04\x12\x04\xca\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x04\x05\x12\x04\xca\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\0\x02\x04\
    \x01\x12\x04\xca\x01\x20%\n\x0f\n\x07\x04\x13\x03\0\x02\x04\x03\x12\x04\
    \xca\x01()\n\x0f\n\x07\x04\x13\x03\0\x02\x04\x08\x12\x04\xca\x01*q\n\x12\
    \n\n\x04\x13\x03\0\x02\x04\x08\xd0\x86\x03\x12\x04\xca\x01+p\n\x0e\n\x06\
    \x04\x13\x03\0\x02\x05\x12\x04\xcb\x01\x10k\n\x0f\n\x07\x04\x13\x03\0\
    \x02\x05\x04\x12\x04\xcb\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\0\x02\x05\
    \x05\x12\x04\xcb\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\0\x02\x05\x01\x12\
    \x04\xcb\x01\x20$\n\x0f\n\x07\x04\x13\x03\0\x02\x05\x03\x12\x04\xcb\x01'\
    (\n\x0f\n\x07\x04\x13\x03\0\x02\x05\x08\x12\x04\xcb\x01)j\n\x12\n\n\x04\
    \x13\x03\0\x02\x05\x08\xd0\x86\x03\x12\x04\xcb\x01*i\n\x0e\n\x04\x04\x13\
    \x03\x01\x12\x06\xce\x01\x08\xda\x01\t\n\r\n\x05\x04\x13\x03\x01\x01\x12\
    \x04\xce\x01\x10'\n\x0e\n\x06\x04\x13\x03\x01\x02\0\x12\x04\xcf\x01\x10e\
    \n\x0f\n\x07\x04\x13\x03\x01\x02\0\x04\x12\x04\xcf\x01\x10\x18\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\0\x05\x12\x04\xcf\x01\x19\x20\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\0\x01\x12\x04\xcf\x01!)\n\x0f\n\x07\x04\x13\x03\x01\x02\
    \0\x03\x12\x04\xcf\x01,-\n\x0f\n\x07\x04\x13\x03\x01\x02\0\x08\x12\x04\
    \xcf\x01.d\n\x12\n\n\x04\x13\x03\x01\x02\0\x08\xd0\x86\x03\x12\x04\xcf\
    \x01/c\n\x0e\n\x06\x04\x13\x03\x01\x02\x01\x12\x04\xd0\x01\x10w\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\x01\x04\x12\x04\xd0\x01\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x01\x05\x12\x04\xd0\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\x01\x01\x12\x04\xd0\x01\x201\n\x0f\n\x07\x04\x13\x03\x01\x02\
    \x01\x03\x12\x04\xd0\x0145\n\x0f\n\x07\x04\x13\x03\x01\x02\x01\x08\x12\
    \x04\xd0\x016v\n\x12\n\n\x04\x13\x03\x01\x02\x01\x08\xd0\x86\x03\x12\x04\
    \xd0\x017u\n\x0e\n\x06\x04\x13\x03\x01\x02\x02\x12\x04\xd1\x01\x101\n\
    \x0f\n\x07\x04\x13\x03\x01\x02\x02\x04\x12\x04\xd1\x01\x10\x18\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\x02\x05\x12\x04\xd1\x01\x19\x1f\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x02\x01\x12\x04\xd1\x01\x20,\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\x02\x03\x12\x04\xd1\x01/0\n\x0f\n\x06\x04\x13\x03\x01\x02\x03\
    \x12\x05\xd2\x01\x10\xaf\x01\n\x0f\n\x07\x04\x13\x03\x01\x02\x03\x04\x12\
    \x04\xd2\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\x01\x02\x03\x06\x12\x04\xd2\
    \x01\x190\n\x0f\n\x07\x04\x13\x03\x01\x02\x03\x01\x12\x04\xd2\x011>\n\
    \x0f\n\x07\x04\x13\x03\x01\x02\x03\x03\x12\x04\xd2\x01AB\n\x10\n\x07\x04\
    \x13\x03\x01\x02\x03\x08\x12\x05\xd2\x01C\xae\x01\n\x0f\n\x07\x04\x13\
    \x03\x01\x02\x03\x07\x12\x04\xd2\x01Nn\n\x13\n\n\x04\x13\x03\x01\x02\x03\
    \x08\xd0\x86\x03\x12\x05\xd2\x01p\xad\x01\n\x0f\n\x06\x04\x13\x03\x01\
    \x02\x04\x12\x05\xd3\x01\x10\xbd\x01\n\x0f\n\x07\x04\x13\x03\x01\x02\x04\
    \x04\x12\x04\xd3\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\x01\x02\x04\x05\x12\
    \x04\xd3\x01\x19\x1d\n\x0f\n\x07\x04\x13\x03\x01\x02\x04\x01\x12\x04\xd3\
    \x01\x1e'\n\x0f\n\x07\x04\x13\x03\x01\x02\x04\x03\x12\x04\xd3\x01*+\n\
    \x10\n\x07\x04\x13\x03\x01\x02\x04\x08\x12\x05\xd3\x01,\xbc\x01\n\x13\n\
    \n\x04\x13\x03\x01\x02\x04\x08\xd0\x86\x03\x12\x05\xd3\x01-\xbb\x01\n\
    \x0f\n\x06\x04\x13\x03\x01\x02\x05\x12\x05\xd4\x01\x10\x80\x01\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\x05\x04\x12\x04\xd4\x01\x10\x18\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x05\x05\x12\x04\xd4\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\x05\x01\x12\x04\xd4\x01\x20+\n\x0f\n\x07\x04\x13\x03\x01\x02\
    \x05\x03\x12\x04\xd4\x01./\n\x0f\n\x07\x04\x13\x03\x01\x02\x05\x08\x12\
    \x04\xd4\x010\x7f\n\x12\n\n\x04\x13\x03\x01\x02\x05\x08\xd0\x86\x03\x12\
    \x04\xd4\x011~\n\x0f\n\x06\x04\x13\x03\x01\x02\x06\x12\x05\xd5\x01\x10\
    \x81\x01\n\x0f\n\x07\x04\x13\x03\x01\x02\x06\x04\x12\x04\xd5\x01\x10\x18\
    \n\x0f\n\x07\x04\x13\x03\x01\x02\x06\x05\x12\x04\xd5\x01\x19\x1f\n\x0f\n\
    \x07\x04\x13\x03\x01\x02\x06\x01\x12\x04\xd5\x01\x20)\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x06\x03\x12\x04\xd5\x01,-\n\x10\n\x07\x04\x13\x03\x01\
    \x02\x06\x08\x12\x05\xd5\x01.\x80\x01\n\x12\n\n\x04\x13\x03\x01\x02\x06\
    \x08\xd0\x86\x03\x12\x04\xd5\x01/\x7f\n\x0f\n\x06\x04\x13\x03\x01\x02\
    \x07\x12\x05\xd6\x01\x10\xae\x01\n\x0f\n\x07\x04\x13\x03\x01\x02\x07\x04\
    \x12\x04\xd6\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\x01\x02\x07\x05\x12\x04\
    \xd6\x01\x19\x1f\n\x0f\n\x07\x04\x13\x03\x01\x02\x07\x01\x12\x04\xd6\x01\
    \x202\n\x0f\n\x07\x04\x13\x03\x01\x02\x07\x03\x12\x04\xd6\x0156\n\x10\n\
    \x07\x04\x13\x03\x01\x02\x07\x08\x12\x05\xd6\x017\xad\x01\n\x13\n\n\x04\
    \x13\x03\x01\x02\x07\x08\xd0\x86\x03\x12\x05\xd6\x018\xac\x01\n\x0f\n\
    \x06\x04\x13\x03\x01\x02\x08\x12\x05\xd7\x01\x10\xac\x01\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\x08\x04\x12\x04\xd7\x01\x10\x18\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\x08\x06\x12\x04\xd7\x01\x19Y\n\x0f\n\x07\x04\x13\x03\x01\x02\
    \x08\x01\x12\x04\xd7\x01Zd\n\x0f\n\x07\x04\x13\x03\x01\x02\x08\x03\x12\
    \x04\xd7\x01gh\n\x10\n\x07\x04\x13\x03\x01\x02\x08\x08\x12\x05\xd7\x01i\
    \xab\x01\n\x13\n\n\x04\x13\x03\x01\x02\x08\x08\xd0\x86\x03\x12\x05\xd7\
    \x01j\xaa\x01\n\x0f\n\x06\x04\x13\x03\x01\x02\t\x12\x05\xd8\x01\x10\xbc\
    \x01\n\x0f\n\x07\x04\x13\x03\x01\x02\t\x04\x12\x04\xd8\x01\x10\x18\n\x0f\
    \n\x07\x04\x13\x03\x01\x02\t\x06\x12\x04\xd8\x01\x19Y\n\x0f\n\x07\x04\
    \x13\x03\x01\x02\t\x01\x12\x04\xd8\x01Zc\n\x0f\n\x07\x04\x13\x03\x01\x02\
    \t\x03\x12\x04\xd8\x01fh\n\x10\n\x07\x04\x13\x03\x01\x02\t\x08\x12\x05\
    \xd8\x01i\xbb\x01\n\x13\n\n\x04\x13\x03\x01\x02\t\x08\xd0\x86\x03\x12\
    \x05\xd8\x01j\xba\x01\n\x0e\n\x06\x04\x13\x03\x01\x02\n\x12\x04\xd9\x01\
    \x10g\n\x0f\n\x07\x04\x13\x03\x01\x02\n\x04\x12\x04\xd9\x01\x10\x18\n\
    \x0f\n\x07\x04\x13\x03\x01\x02\n\x05\x12\x04\xd9\x01\x19\x1e\n\x0f\n\x07\
    \x04\x13\x03\x01\x02\n\x01\x12\x04\xd9\x01\x1f&\n\x0f\n\x07\x04\x13\x03\
    \x01\x02\n\x03\x12\x04\xd9\x01)+\n\x0f\n\x07\x04\x13\x03\x01\x02\n\x08\
    \x12\x04\xd9\x01,f\n\x12\n\n\x04\x13\x03\x01\x02\n\x08\xd0\x86\x03\x12\
    \x04\xd9\x01-e\n\x0c\n\x04\x04\x13\x02\0\x12\x04\xdc\x01\x08m\n\r\n\x05\
    \x04\x13\x02\0\x04\x12\x04\xdc\x01\x08\x10\n\r\n\x05\x04\x13\x02\0\x06\
    \x12\x04\xdc\x01\x11Y\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\xdc\x01Zh\n\r\
    \n\x05\x04\x13\x02\0\x03\x12\x04\xdc\x01kl\n\x0c\n\x04\x04\x13\x02\x01\
    \x12\x04\xdd\x01\x08.\n\r\n\x05\x04\x13\x02\x01\x04\x12\x04\xdd\x01\x08\
    \x10\n\r\n\x05\x04\x13\x02\x01\x05\x12\x04\xdd\x01\x11\x18\n\r\n\x05\x04\
    \x13\x02\x01\x01\x12\x04\xdd\x01\x19)\n\r\n\x05\x04\x13\x02\x01\x03\x12\
    \x04\xdd\x01,-\n\x0c\n\x02\x04\x14\x12\x06\xe0\x01\0\xe1\x01\x01\n\x0b\n\
    \x03\x04\x14\x01\x12\x04\xe0\x01\x089\n\x0c\n\x02\x04\x15\x12\x06\xe3\
    \x01\0\xe5\x01\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\xe3\x01\x08:\n\x0c\n\
    \x04\x04\x15\x02\0\x12\x04\xe4\x01\x08q\n\r\n\x05\x04\x15\x02\0\x04\x12\
    \x04\xe4\x01\x08\x10\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\xe4\x01\x11\x17\
    \n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xe4\x01\x18\"\n\r\n\x05\x04\x15\x02\
    \0\x03\x12\x04\xe4\x01%&\n\r\n\x05\x04\x15\x02\0\x08\x12\x04\xe4\x01'p\n\
    \x10\n\x08\x04\x15\x02\0\x08\xd0\x86\x03\x12\x04\xe4\x01(o\n\x0c\n\x02\
    \x04\x16\x12\x06\xe7\x01\0\xeb\x01\x01\n\x0b\n\x03\x04\x16\x01\x12\x04\
    \xe7\x01\x084\n\x0c\n\x04\x04\x16\x02\0\x12\x04\xe8\x01\x08Y\n\r\n\x05\
    \x04\x16\x02\0\x04\x12\x04\xe8\x01\x08\x10\n\r\n\x05\x04\x16\x02\0\x05\
    \x12\x04\xe8\x01\x11\x18\n\r\n\x05\x04\x16\x02\0\x01\x12\x04\xe8\x01\x19\
    \x20\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\xe8\x01#$\n\r\n\x05\x04\x16\x02\
    \0\x08\x12\x04\xe8\x01%X\n\x10\n\x08\x04\x16\x02\0\x08\xd0\x86\x03\x12\
    \x04\xe8\x01&W\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\xe9\x01\x08J\n\r\n\
    \x05\x04\x16\x02\x01\x04\x12\x04\xe9\x01\x08\x10\n\r\n\x05\x04\x16\x02\
    \x01\x05\x12\x04\xe9\x01\x11\x17\n\r\n\x05\x04\x16\x02\x01\x01\x12\x04\
    \xe9\x01\x18\x1d\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\xe9\x01\x20!\n\r\
    \n\x05\x04\x16\x02\x01\x08\x12\x04\xe9\x01\"I\n\x10\n\x08\x04\x16\x02\
    \x01\x08\xd0\x86\x03\x12\x04\xe9\x01#H\n\x0c\n\x04\x04\x16\x02\x02\x12\
    \x04\xea\x01\x08q\n\r\n\x05\x04\x16\x02\x02\x04\x12\x04\xea\x01\x08\x10\
    \n\r\n\x05\x04\x16\x02\x02\x05\x12\x04\xea\x01\x11\x17\n\r\n\x05\x04\x16\
    \x02\x02\x01\x12\x04\xea\x01\x18!\n\r\n\x05\x04\x16\x02\x02\x03\x12\x04\
    \xea\x01$%\n\r\n\x05\x04\x16\x02\x02\x08\x12\x04\xea\x01&p\n\x10\n\x08\
    \x04\x16\x02\x02\x08\xd0\x86\x03\x12\x04\xea\x01'o\n\x0c\n\x02\x04\x17\
    \x12\x06\xed\x01\0\xf0\x01\x01\n\x0b\n\x03\x04\x17\x01\x12\x04\xed\x01\
    \x085\n\x0c\n\x04\x04\x17\x02\0\x12\x04\xee\x01\x08*\n\r\n\x05\x04\x17\
    \x02\0\x04\x12\x04\xee\x01\x08\x10\n\r\n\x05\x04\x17\x02\0\x05\x12\x04\
    \xee\x01\x11\x17\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\xee\x01\x18%\n\r\n\
    \x05\x04\x17\x02\0\x03\x12\x04\xee\x01()\n\x0c\n\x04\x04\x17\x02\x01\x12\
    \x04\xef\x01\x08)\n\r\n\x05\x04\x17\x02\x01\x04\x12\x04\xef\x01\x08\x10\
    \n\r\n\x05\x04\x17\x02\x01\x05\x12\x04\xef\x01\x11\x17\n\r\n\x05\x04\x17\
    \x02\x01\x01\x12\x04\xef\x01\x18$\n\r\n\x05\x04\x17\x02\x01\x03\x12\x04\
    \xef\x01'(\n\x0c\n\x02\x04\x18\x12\x06\xf2\x01\0\xf5\x01\x01\n\x0b\n\x03\
    \x04\x18\x01\x12\x04\xf2\x01\x08,\n\x0c\n\x04\x04\x18\x02\0\x12\x04\xf3\
    \x01\x08\"\n\r\n\x05\x04\x18\x02\0\x04\x12\x04\xf3\x01\x08\x10\n\r\n\x05\
    \x04\x18\x02\0\x05\x12\x04\xf3\x01\x11\x17\n\r\n\x05\x04\x18\x02\0\x01\
    \x12\x04\xf3\x01\x18\x1d\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\xf3\x01\x20\
    !\n\r\n\x04\x04\x18\x02\x01\x12\x05\xf4\x01\x08\xaa\x01\n\r\n\x05\x04\
    \x18\x02\x01\x04\x12\x04\xf4\x01\x08\x10\n\r\n\x05\x04\x18\x02\x01\x06\
    \x12\x04\xf4\x01\x11(\n\r\n\x05\x04\x18\x02\x01\x01\x12\x04\xf4\x01)6\n\
    \r\n\x05\x04\x18\x02\x01\x03\x12\x04\xf4\x019:\n\x0e\n\x05\x04\x18\x02\
    \x01\x08\x12\x05\xf4\x01;\xa9\x01\n\r\n\x05\x04\x18\x02\x01\x07\x12\x04\
    \xf4\x01Fa\n\x11\n\x08\x04\x18\x02\x01\x08\xd0\x86\x03\x12\x05\xf4\x01c\
    \xa8\x01\n\x0c\n\x02\x04\x19\x12\x06\xf7\x01\0\xf8\x01\x01\n\x0b\n\x03\
    \x04\x19\x01\x12\x04\xf7\x01\x08-\n\x0c\n\x02\x04\x1a\x12\x06\xfa\x01\0\
    \xff\x01\x01\n\x0b\n\x03\x04\x1a\x01\x12\x04\xfa\x01\x083\n\x0c\n\x04\
    \x04\x1a\x02\0\x12\x04\xfb\x01\x08&\n\r\n\x05\x04\x1a\x02\0\x04\x12\x04\
    \xfb\x01\x08\x10\n\r\n\x05\x04\x1a\x02\0\x05\x12\x04\xfb\x01\x11\x18\n\r\
    \n\x05\x04\x1a\x02\0\x01\x12\x04\xfb\x01\x19!\n\r\n\x05\x04\x1a\x02\0\
    \x03\x12\x04\xfb\x01$%\n\x0c\n\x04\x04\x1a\x02\x01\x12\x04\xfc\x01\x08s\
    \n\r\n\x05\x04\x1a\x02\x01\x04\x12\x04\xfc\x01\x08\x10\n\r\n\x05\x04\x1a\
    \x02\x01\x05\x12\x04\xfc\x01\x11\x18\n\r\n\x05\x04\x1a\x02\x01\x01\x12\
    \x04\xfc\x01\x19\x20\n\r\n\x05\x04\x1a\x02\x01\x03\x12\x04\xfc\x01#$\n\r\
    \n\x05\x04\x1a\x02\x01\x08\x12\x04\xfc\x01%r\n\x10\n\x08\x04\x1a\x02\x01\
    \x08\xd0\x86\x03\x12\x04\xfc\x01&q\n\r\n\x04\x04\x1a\x02\x02\x12\x05\xfd\
    \x01\x08\xaa\x01\n\r\n\x05\x04\x1a\x02\x02\x04\x12\x04\xfd\x01\x08\x10\n\
    \r\n\x05\x04\x1a\x02\x02\x06\x12\x04\xfd\x01\x11(\n\r\n\x05\x04\x1a\x02\
    \x02\x01\x12\x04\xfd\x01)6\n\r\n\x05\x04\x1a\x02\x02\x03\x12\x04\xfd\x01\
    9:\n\x0e\n\x05\x04\x1a\x02\x02\x08\x12\x05\xfd\x01;\xa9\x01\n\r\n\x05\
    \x04\x1a\x02\x02\x07\x12\x04\xfd\x01Fa\n\x11\n\x08\x04\x1a\x02\x02\x08\
    \xd0\x86\x03\x12\x05\xfd\x01c\xa8\x01\n\x0c\n\x04\x04\x1a\x02\x03\x12\
    \x04\xfe\x01\x08Z\n\r\n\x05\x04\x1a\x02\x03\x04\x12\x04\xfe\x01\x08\x10\
    \n\r\n\x05\x04\x1a\x02\x03\x05\x12\x04\xfe\x01\x11\x16\n\r\n\x05\x04\x1a\
    \x02\x03\x01\x12\x04\xfe\x01\x17\x20\n\r\n\x05\x04\x1a\x02\x03\x03\x12\
    \x04\xfe\x01#$\n\r\n\x05\x04\x1a\x02\x03\x08\x12\x04\xfe\x01%Y\n\x10\n\
    \x08\x04\x1a\x02\x03\x08\xd0\x86\x03\x12\x04\xfe\x01&X\n\x0c\n\x02\x04\
    \x1b\x12\x06\x81\x02\0\x82\x02\x01\n\x0b\n\x03\x04\x1b\x01\x12\x04\x81\
    \x02\x084\n\x0c\n\x02\x04\x1c\x12\x06\x84\x02\0\x87\x02\x01\n\x0b\n\x03\
    \x04\x1c\x01\x12\x04\x84\x02\x08B\n\x0c\n\x04\x04\x1c\x02\0\x12\x04\x85\
    \x02\x08d\n\r\n\x05\x04\x1c\x02\0\x04\x12\x04\x85\x02\x08\x10\n\r\n\x05\
    \x04\x1c\x02\0\x05\x12\x04\x85\x02\x11\x18\n\r\n\x05\x04\x1c\x02\0\x01\
    \x12\x04\x85\x02\x19\x20\n\r\n\x05\x04\x1c\x02\0\x03\x12\x04\x85\x02#$\n\
    \r\n\x05\x04\x1c\x02\0\x08\x12\x04\x85\x02%c\n\x10\n\x08\x04\x1c\x02\0\
    \x08\xd0\x86\x03\x12\x04\x85\x02&b\n\x0c\n\x04\x04\x1c\x02\x01\x12\x04\
    \x86\x02\x08~\n\r\n\x05\x04\x1c\x02\x01\x04\x12\x04\x86\x02\x08\x10\n\r\
    \n\x05\x04\x1c\x02\x01\x05\x12\x04\x86\x02\x11\x15\n\r\n\x05\x04\x1c\x02\
    \x01\x01\x12\x04\x86\x02\x16,\n\r\n\x05\x04\x1c\x02\x01\x03\x12\x04\x86\
    \x02/0\n\r\n\x05\x04\x1c\x02\x01\x08\x12\x04\x86\x021}\n\x10\n\x08\x04\
    \x1c\x02\x01\x08\xd0\x86\x03\x12\x04\x86\x022|\n\x0c\n\x02\x04\x1d\x12\
    \x06\x89\x02\0\x9e\x02\x01\n\x0b\n\x03\x04\x1d\x01\x12\x04\x89\x02\x08'\
    \n\x0e\n\x04\x04\x1d\x03\0\x12\x06\x8a\x02\x08\x90\x02\t\n\r\n\x05\x04\
    \x1d\x03\0\x01\x12\x04\x8a\x02\x10\x1f\n\x0f\n\x06\x04\x1d\x03\0\x02\0\
    \x12\x05\x8b\x02\x10\x87\x01\n\x0f\n\x07\x04\x1d\x03\0\x02\0\x04\x12\x04\
    \x8b\x02\x10\x18\n\x0f\n\x07\x04\x1d\x03\0\x02\0\x05\x12\x04\x8b\x02\x19\
    \x1f\n\x0f\n\x07\x04\x1d\x03\0\x02\0\x01\x12\x04\x8b\x02\x20$\n\x0f\n\
    \x07\x04\x1d\x03\0\x02\0\x03\x12\x04\x8b\x02'(\n\x10\n\x07\x04\x1d\x03\0\
    \x02\0\x08\x12\x05\x8b\x02)\x86\x01\n\x13\n\n\x04\x1d\x03\0\x02\0\x08\
    \xd0\x86\x03\x12\x05\x8b\x02*\x85\x01\n\x0e\n\x06\x04\x1d\x03\0\x02\x01\
    \x12\x04\x8c\x02\x10b\n\x0f\n\x07\x04\x1d\x03\0\x02\x01\x04\x12\x04\x8c\
    \x02\x10\x18\n\x0f\n\x07\x04\x1d\x03\0\x02\x01\x06\x12\x04\x8c\x02\x19'\
    \n\x0f\n\x07\x04\x1d\x03\0\x02\x01\x01\x12\x04\x8c\x02(*\n\x0f\n\x07\x04\
    \x1d\x03\0\x02\x01\x03\x12\x04\x8c\x02-.\n\x0f\n\x07\x04\x1d\x03\0\x02\
    \x01\x08\x12\x04\x8c\x02/a\n\x12\n\n\x04\x1d\x03\0\x02\x01\x08\xd0\x86\
    \x03\x12\x04\x8c\x020`\n\x0e\n\x06\x04\x1d\x03\0\x02\x02\x12\x04\x8d\x02\
    \x10v\n\x0f\n\x07\x04\x1d\x03\0\x02\x02\x04\x12\x04\x8d\x02\x10\x18\n\
    \x0f\n\x07\x04\x1d\x03\0\x02\x02\x05\x12\x04\x8d\x02\x19\x1f\n\x0f\n\x07\
    \x04\x1d\x03\0\x02\x02\x01\x12\x04\x8d\x02\x20'\n\x0f\n\x07\x04\x1d\x03\
    \0\x02\x02\x03\x12\x04\x8d\x02*+\n\x0f\n\x07\x04\x1d\x03\0\x02\x02\x08\
    \x12\x04\x8d\x02,u\n\x12\n\n\x04\x1d\x03\0\x02\x02\x08\xd0\x86\x03\x12\
    \x04\x8d\x02-t\n\x0e\n\x06\x04\x1d\x03\0\x02\x03\x12\x04\x8e\x02\x10r\n\
    \x0f\n\x07\x04\x1d\x03\0\x02\x03\x04\x12\x04\x8e\x02\x10\x18\n\x0f\n\x07\
    \x04\x1d\x03\0\x02\x03\x05\x12\x04\x8e\x02\x19\x1f\n\x0f\n\x07\x04\x1d\
    \x03\0\x02\x03\x01\x12\x04\x8e\x02\x20%\n\x0f\n\x07\x04\x1d\x03\0\x02\
    \x03\x03\x12\x04\x8e\x02()\n\x0f\n\x07\x04\x1d\x03\0\x02\x03\x08\x12\x04\
    \x8e\x02*q\n\x12\n\n\x04\x1d\x03\0\x02\x03\x08\xd0\x86\x03\x12\x04\x8e\
    \x02+p\n\x0e\n\x06\x04\x1d\x03\0\x02\x04\x12\x04\x8f\x02\x10k\n\x0f\n\
    \x07\x04\x1d\x03\0\x02\x04\x04\x12\x04\x8f\x02\x10\x18\n\x0f\n\x07\x04\
    \x1d\x03\0\x02\x04\x05\x12\x04\x8f\x02\x19\x1f\n\x0f\n\x07\x04\x1d\x03\0\
    \x02\x04\x01\x12\x04\x8f\x02\x20$\n\x0f\n\x07\x04\x1d\x03\0\x02\x04\x03\
    \x12\x04\x8f\x02'(\n\x0f\n\x07\x04\x1d\x03\0\x02\x04\x08\x12\x04\x8f\x02\
    )j\n\x12\n\n\x04\x1d\x03\0\x02\x04\x08\xd0\x86\x03\x12\x04\x8f\x02*i\n\
    \x0c\n\x04\x04\x1d\x02\0\x12\x04\x92\x02\x08&\n\r\n\x05\x04\x1d\x02\0\
    \x04\x12\x04\x92\x02\x08\x10\n\r\n\x05\x04\x1d\x02\0\x05\x12\x04\x92\x02\
    \x11\x18\n\r\n\x05\x04\x1d\x02\0\x01\x12\x04\x92\x02\x19!\n\r\n\x05\x04\
    \x1d\x02\0\x03\x12\x04\x92\x02$%\n\x0c\n\x04\x04\x1d\x02\x01\x12\x04\x93\
    \x02\x08.\n\r\n\x05\x04\x1d\x02\x01\x04\x12\x04\x93\x02\x08\x10\n\r\n\
    \x05\x04\x1d\x02\x01\x05\x12\x04\x93\x02\x11\x17\n\r\n\x05\x04\x1d\x02\
    \x01\x01\x12\x04\x93\x02\x18)\n\r\n\x05\x04\x1d\x02\x01\x03\x12\x04\x93\
    \x02,-\n\x0c\n\x04\x04\x1d\x02\x02\x12\x04\x94\x02\x08)\n\r\n\x05\x04\
    \x1d\x02\x02\x04\x12\x04\x94\x02\x08\x10\n\r\n\x05\x04\x1d\x02\x02\x05\
    \x12\x04\x94\x02\x11\x17\n\r\n\x05\x04\x1d\x02\x02\x01\x12\x04\x94\x02\
    \x18$\n\r\n\x05\x04\x1d\x02\x02\x03\x12\x04\x94\x02'(\n\x0c\n\x04\x04\
    \x1d\x02\x03\x12\x04\x95\x02\x08h\n\r\n\x05\x04\x1d\x02\x03\x04\x12\x04\
    \x95\x02\x08\x10\n\r\n\x05\x04\x1d\x02\x03\x06\x12\x04\x95\x02\x11(\n\r\
    \n\x05\x04\x1d\x02\x03\x01\x12\x04\x95\x02)6\n\r\n\x05\x04\x1d\x02\x03\
    \x03\x12\x04\x95\x029:\n\r\n\x05\x04\x1d\x02\x03\x08\x12\x04\x95\x02;g\n\
    \r\n\x05\x04\x1d\x02\x03\x07\x12\x04\x95\x02Ff\n\x0c\n\x04\x04\x1d\x02\
    \x04\x12\x04\x96\x02\x08X\n\r\n\x05\x04\x1d\x02\x04\x04\x12\x04\x96\x02\
    \x08\x10\n\r\n\x05\x04\x1d\x02\x04\x06\x12\x04\x96\x02\x11!\n\r\n\x05\
    \x04\x1d\x02\x04\x01\x12\x04\x96\x02\"-\n\r\n\x05\x04\x1d\x02\x04\x03\
    \x12\x04\x96\x0201\n\r\n\x05\x04\x1d\x02\x04\x08\x12\x04\x96\x022W\n\r\n\
    \x05\x04\x1d\x02\x04\x07\x12\x04\x96\x02=V\n\x0c\n\x04\x04\x1d\x02\x05\
    \x12\x04\x97\x02\x08+\n\r\n\x05\x04\x1d\x02\x05\x04\x12\x04\x97\x02\x08\
    \x10\n\r\n\x05\x04\x1d\x02\x05\x05\x12\x04\x97\x02\x11\x18\n\r\n\x05\x04\
    \x1d\x02\x05\x01\x12\x04\x97\x02\x19&\n\r\n\x05\x04\x1d\x02\x05\x03\x12\
    \x04\x97\x02)*\n\x0c\n\x04\x04\x1d\x02\x06\x12\x04\x98\x02\x08x\n\r\n\
    \x05\x04\x1d\x02\x06\x04\x12\x04\x98\x02\x08\x10\n\r\n\x05\x04\x1d\x02\
    \x06\x05\x12\x04\x98\x02\x11\x17\n\r\n\x05\x04\x1d\x02\x06\x01\x12\x04\
    \x98\x02\x18#\n\r\n\x05\x04\x1d\x02\x06\x03\x12\x04\x98\x02&'\n\r\n\x05\
    \x04\x1d\x02\x06\x08\x12\x04\x98\x02(w\n\x10\n\x08\x04\x1d\x02\x06\x08\
    \xd0\x86\x03\x12\x04\x98\x02)v\n\x0c\n\x04\x04\x1d\x02\x07\x12\x04\x99\
    \x02\x08^\n\r\n\x05\x04\x1d\x02\x07\x04\x12\x04\x99\x02\x08\x10\n\r\n\
    \x05\x04\x1d\x02\x07\x05\x12\x04\x99\x02\x11\x16\n\r\n\x05\x04\x1d\x02\
    \x07\x01\x12\x04\x99\x02\x17\x1e\n\r\n\x05\x04\x1d\x02\x07\x03\x12\x04\
    \x99\x02!\"\n\r\n\x05\x04\x1d\x02\x07\x08\x12\x04\x99\x02#]\n\x10\n\x08\
    \x04\x1d\x02\x07\x08\xd0\x86\x03\x12\x04\x99\x02$\\\n\x0c\n\x04\x04\x1d\
    \x02\x08\x12\x04\x9a\x02\x08y\n\r\n\x05\x04\x1d\x02\x08\x04\x12\x04\x9a\
    \x02\x08\x10\n\r\n\x05\x04\x1d\x02\x08\x05\x12\x04\x9a\x02\x11\x17\n\r\n\
    \x05\x04\x1d\x02\x08\x01\x12\x04\x9a\x02\x18!\n\r\n\x05\x04\x1d\x02\x08\
    \x03\x12\x04\x9a\x02$%\n\r\n\x05\x04\x1d\x02\x08\x08\x12\x04\x9a\x02&x\n\
    \x10\n\x08\x04\x1d\x02\x08\x08\xd0\x86\x03\x12\x04\x9a\x02'w\n\r\n\x04\
    \x04\x1d\x02\t\x12\x05\x9b\x02\x08\xa7\x01\n\r\n\x05\x04\x1d\x02\t\x04\
    \x12\x04\x9b\x02\x08\x10\n\r\n\x05\x04\x1d\x02\t\x05\x12\x04\x9b\x02\x11\
    \x17\n\r\n\x05\x04\x1d\x02\t\x01\x12\x04\x9b\x02\x18*\n\r\n\x05\x04\x1d\
    \x02\t\x03\x12\x04\x9b\x02-/\n\x0e\n\x05\x04\x1d\x02\t\x08\x12\x05\x9b\
    \x020\xa6\x01\n\x11\n\x08\x04\x1d\x02\t\x08\xd0\x86\x03\x12\x05\x9b\x021\
    \xa5\x01\n\r\n\x04\x04\x1d\x02\n\x12\x05\x9c\x02\x08\x95\x01\n\r\n\x05\
    \x04\x1d\x02\n\x04\x12\x04\x9c\x02\x08\x10\n\r\n\x05\x04\x1d\x02\n\x06\
    \x12\x04\x9c\x02\x11A\n\r\n\x05\x04\x1d\x02\n\x01\x12\x04\x9c\x02BL\n\r\
    \n\x05\x04\x1d\x02\n\x03\x12\x04\x9c\x02OQ\n\x0e\n\x05\x04\x1d\x02\n\x08\
    \x12\x05\x9c\x02R\x94\x01\n\x11\n\x08\x04\x1d\x02\n\x08\xd0\x86\x03\x12\
    \x05\x9c\x02S\x93\x01\n\r\n\x04\x04\x1d\x02\x0b\x12\x05\x9d\x02\x08\xa4\
    \x01\n\r\n\x05\x04\x1d\x02\x0b\x04\x12\x04\x9d\x02\x08\x10\n\r\n\x05\x04\
    \x1d\x02\x0b\x06\x12\x04\x9d\x02\x11A\n\r\n\x05\x04\x1d\x02\x0b\x01\x12\
    \x04\x9d\x02BK\n\r\n\x05\x04\x1d\x02\x0b\x03\x12\x04\x9d\x02NP\n\x0e\n\
    \x05\x04\x1d\x02\x0b\x08\x12\x05\x9d\x02Q\xa3\x01\n\x11\n\x08\x04\x1d\
    \x02\x0b\x08\xd0\x86\x03\x12\x05\x9d\x02R\xa2\x01\n\x0c\n\x02\x04\x1e\
    \x12\x06\xa0\x02\0\xa3\x02\x01\n\x0b\n\x03\x04\x1e\x01\x12\x04\xa0\x02\
    \x08C\n\x0c\n\x04\x04\x1e\x02\0\x12\x04\xa1\x02\x08E\n\r\n\x05\x04\x1e\
    \x02\0\x04\x12\x04\xa1\x02\x08\x10\n\r\n\x05\x04\x1e\x02\0\x06\x12\x04\
    \xa1\x02\x111\n\r\n\x05\x04\x1e\x02\0\x01\x12\x04\xa1\x022@\n\r\n\x05\
    \x04\x1e\x02\0\x03\x12\x04\xa1\x02CD\n\x0c\n\x04\x04\x1e\x02\x01\x12\x04\
    \xa2\x02\x08,\n\r\n\x05\x04\x1e\x02\x01\x04\x12\x04\xa2\x02\x08\x10\n\r\
    \n\x05\x04\x1e\x02\x01\x05\x12\x04\xa2\x02\x11\x16\n\r\n\x05\x04\x1e\x02\
    \x01\x01\x12\x04\xa2\x02\x17'\n\r\n\x05\x04\x1e\x02\x01\x03\x12\x04\xa2\
    \x02*+\n\x0c\n\x02\x04\x1f\x12\x06\xa5\x02\0\xa7\x02\x01\n\x0b\n\x03\x04\
    \x1f\x01\x12\x04\xa5\x02\x08<\n\x0c\n\x04\x04\x1f\x02\0\x12\x04\xa6\x02\
    \x08f\n\r\n\x05\x04\x1f\x02\0\x04\x12\x04\xa6\x02\x08\x10\n\r\n\x05\x04\
    \x1f\x02\0\x05\x12\x04\xa6\x02\x11\x18\n\r\n\x05\x04\x1f\x02\0\x01\x12\
    \x04\xa6\x02\x19!\n\r\n\x05\x04\x1f\x02\0\x03\x12\x04\xa6\x02$%\n\r\n\
    \x05\x04\x1f\x02\0\x08\x12\x04\xa6\x02&e\n\x10\n\x08\x04\x1f\x02\0\x08\
    \xd0\x86\x03\x12\x04\xa6\x02'd\n\x0c\n\x02\x04\x20\x12\x06\xa9\x02\0\xab\
    \x02\x01\n\x0b\n\x03\x04\x20\x01\x12\x04\xa9\x02\x08=\n\x0c\n\x04\x04\
    \x20\x02\0\x12\x04\xaa\x02\x08E\n\r\n\x05\x04\x20\x02\0\x04\x12\x04\xaa\
    \x02\x08\x10\n\r\n\x05\x04\x20\x02\0\x06\x12\x04\xaa\x02\x111\n\r\n\x05\
    \x04\x20\x02\0\x01\x12\x04\xaa\x022@\n\r\n\x05\x04\x20\x02\0\x03\x12\x04\
    \xaa\x02CD\n\x0c\n\x02\x04!\x12\x06\xad\x02\0\xb0\x02\x01\n\x0b\n\x03\
    \x04!\x01\x12\x04\xad\x02\x082\n\x0c\n\x04\x04!\x02\0\x12\x04\xae\x02\
    \x08e\n\r\n\x05\x04!\x02\0\x04\x12\x04\xae\x02\x08\x10\n\r\n\x05\x04!\
    \x02\0\x05\x12\x04\xae\x02\x11\x18\n\r\n\x05\x04!\x02\0\x01\x12\x04\xae\
    \x02\x19!\n\r\n\x05\x04!\x02\0\x03\x12\x04\xae\x02$%\n\r\n\x05\x04!\x02\
    \0\x08\x12\x04\xae\x02&d\n\x10\n\x08\x04!\x02\0\x08\xd0\x86\x03\x12\x04\
    \xae\x02'c\n\x0c\n\x04\x04!\x02\x01\x12\x04\xaf\x02\x08h\n\r\n\x05\x04!\
    \x02\x01\x04\x12\x04\xaf\x02\x08\x10\n\r\n\x05\x04!\x02\x01\x05\x12\x04\
    \xaf\x02\x11\x18\n\r\n\x05\x04!\x02\x01\x01\x12\x04\xaf\x02\x19\x20\n\r\
    \n\x05\x04!\x02\x01\x03\x12\x04\xaf\x02#$\n\r\n\x05\x04!\x02\x01\x08\x12\
    \x04\xaf\x02%g\n\x10\n\x08\x04!\x02\x01\x08\xd0\x86\x03\x12\x04\xaf\x02&\
    f\n\x0c\n\x02\x04\"\x12\x06\xb2\x02\0\xb3\x02\x01\n\x0b\n\x03\x04\"\x01\
    \x12\x04\xb2\x02\x083\n\x0c\n\x02\x04#\x12\x06\xb5\x02\0\xb7\x02\x01\n\
    \x0b\n\x03\x04#\x01\x12\x04\xb5\x02\x086\n\x0c\n\x04\x04#\x02\0\x12\x04\
    \xb6\x02\x08n\n\r\n\x05\x04#\x02\0\x04\x12\x04\xb6\x02\x08\x10\n\r\n\x05\
    \x04#\x02\0\x05\x12\x04\xb6\x02\x11\x18\n\r\n\x05\x04#\x02\0\x01\x12\x04\
    \xb6\x02\x19!\n\r\n\x05\x04#\x02\0\x03\x12\x04\xb6\x02$%\n\r\n\x05\x04#\
    \x02\0\x08\x12\x04\xb6\x02&m\n\x10\n\x08\x04#\x02\0\x08\xd0\x86\x03\x12\
    \x04\xb6\x02'l\n\x0c\n\x02\x04$\x12\x06\xb9\x02\0\xbe\x02\x01\n\x0b\n\
    \x03\x04$\x01\x12\x04\xb9\x02\x08!\n\x0c\n\x04\x04$\x02\0\x12\x04\xba\
    \x02\x08\"\n\r\n\x05\x04$\x02\0\x04\x12\x04\xba\x02\x08\x10\n\r\n\x05\
    \x04$\x02\0\x05\x12\x04\xba\x02\x11\x16\n\r\n\x05\x04$\x02\0\x01\x12\x04\
    \xba\x02\x17\x1d\n\r\n\x05\x04$\x02\0\x03\x12\x04\xba\x02\x20!\n\x0c\n\
    \x04\x04$\x02\x01\x12\x04\xbb\x02\x08!\n\r\n\x05\x04$\x02\x01\x04\x12\
    \x04\xbb\x02\x08\x10\n\r\n\x05\x04$\x02\x01\x05\x12\x04\xbb\x02\x11\x17\
    \n\r\n\x05\x04$\x02\x01\x01\x12\x04\xbb\x02\x18\x1c\n\r\n\x05\x04$\x02\
    \x01\x03\x12\x04\xbb\x02\x1f\x20\n\x0c\n\x04\x04$\x02\x02\x12\x04\xbc\
    \x02\x08'\n\r\n\x05\x04$\x02\x02\x04\x12\x04\xbc\x02\x08\x10\n\r\n\x05\
    \x04$\x02\x02\x06\x12\x04\xbc\x02\x11\x1f\n\r\n\x05\x04$\x02\x02\x01\x12\
    \x04\xbc\x02\x20\"\n\r\n\x05\x04$\x02\x02\x03\x12\x04\xbc\x02%&\n\x0c\n\
    \x04\x04$\x02\x03\x12\x04\xbd\x02\x08#\n\r\n\x05\x04$\x02\x03\x04\x12\
    \x04\xbd\x02\x08\x10\n\r\n\x05\x04$\x02\x03\x05\x12\x04\xbd\x02\x11\x18\
    \n\r\n\x05\x04$\x02\x03\x01\x12\x04\xbd\x02\x19\x1e\n\r\n\x05\x04$\x02\
    \x03\x03\x12\x04\xbd\x02!\"\n\x0c\n\x02\x04%\x12\x06\xc0\x02\0\xc2\x02\
    \x01\n\x0b\n\x03\x04%\x01\x12\x04\xc0\x02\x087\n\x0c\n\x04\x04%\x02\0\
    \x12\x04\xc1\x02\x088\n\r\n\x05\x04%\x02\0\x04\x12\x04\xc1\x02\x08\x10\n\
    \r\n\x05\x04%\x02\0\x06\x12\x04\xc1\x02\x11+\n\r\n\x05\x04%\x02\0\x01\
    \x12\x04\xc1\x02,3\n\r\n\x05\x04%\x02\0\x03\x12\x04\xc1\x0267\n\x0c\n\
    \x02\x04&\x12\x06\xc4\x02\0\xc7\x02\x01\n\x0b\n\x03\x04&\x01\x12\x04\xc4\
    \x02\x08(\n\x0c\n\x04\x04&\x02\0\x12\x04\xc5\x02\x08%\n\r\n\x05\x04&\x02\
    \0\x04\x12\x04\xc5\x02\x08\x10\n\r\n\x05\x04&\x02\0\x05\x12\x04\xc5\x02\
    \x11\x17\n\r\n\x05\x04&\x02\0\x01\x12\x04\xc5\x02\x18\x20\n\r\n\x05\x04&\
    \x02\0\x03\x12\x04\xc5\x02#$\n\x0c\n\x04\x04&\x02\x01\x12\x04\xc6\x02\
    \x08\"\n\r\n\x05\x04&\x02\x01\x04\x12\x04\xc6\x02\x08\x10\n\r\n\x05\x04&\
    \x02\x01\x05\x12\x04\xc6\x02\x11\x17\n\r\n\x05\x04&\x02\x01\x01\x12\x04\
    \xc6\x02\x18\x1d\n\r\n\x05\x04&\x02\x01\x03\x12\x04\xc6\x02\x20!\n\x0c\n\
    \x02\x04'\x12\x06\xc9\x02\0\xcc\x02\x01\n\x0b\n\x03\x04'\x01\x12\x04\xc9\
    \x02\x08)\n\x0c\n\x04\x04'\x02\0\x12\x04\xca\x02\x08\"\n\r\n\x05\x04'\
    \x02\0\x04\x12\x04\xca\x02\x08\x10\n\r\n\x05\x04'\x02\0\x05\x12\x04\xca\
    \x02\x11\x17\n\r\n\x05\x04'\x02\0\x01\x12\x04\xca\x02\x18\x1d\n\r\n\x05\
    \x04'\x02\0\x03\x12\x04\xca\x02\x20!\n\x0c\n\x04\x04'\x02\x01\x12\x04\
    \xcb\x02\x08#\n\r\n\x05\x04'\x02\x01\x04\x12\x04\xcb\x02\x08\x10\n\r\n\
    \x05\x04'\x02\x01\x05\x12\x04\xcb\x02\x11\x17\n\r\n\x05\x04'\x02\x01\x01\
    \x12\x04\xcb\x02\x18\x1e\n\r\n\x05\x04'\x02\x01\x03\x12\x04\xcb\x02!\"\n\
    \x0c\n\x02\x04(\x12\x06\xce\x02\0\xd1\x02\x01\n\x0b\n\x03\x04(\x01\x12\
    \x04\xce\x02\x08-\n\x0c\n\x04\x04(\x02\0\x12\x04\xcf\x02\x08%\n\r\n\x05\
    \x04(\x02\0\x04\x12\x04\xcf\x02\x08\x10\n\r\n\x05\x04(\x02\0\x05\x12\x04\
    \xcf\x02\x11\x17\n\r\n\x05\x04(\x02\0\x01\x12\x04\xcf\x02\x18\x20\n\r\n\
    \x05\x04(\x02\0\x03\x12\x04\xcf\x02#$\n\x0c\n\x04\x04(\x02\x01\x12\x04\
    \xd0\x02\x08'\n\r\n\x05\x04(\x02\x01\x04\x12\x04\xd0\x02\x08\x10\n\r\n\
    \x05\x04(\x02\x01\x05\x12\x04\xd0\x02\x11\x17\n\r\n\x05\x04(\x02\x01\x01\
    \x12\x04\xd0\x02\x18\"\n\r\n\x05\x04(\x02\x01\x03\x12\x04\xd0\x02%&\n\
    \x0c\n\x02\x04)\x12\x06\xd3\x02\0\xd6\x02\x01\n\x0b\n\x03\x04)\x01\x12\
    \x04\xd3\x02\x08\"\n\x0c\n\x04\x04)\x02\0\x12\x04\xd4\x02\x08\"\n\r\n\
    \x05\x04)\x02\0\x04\x12\x04\xd4\x02\x08\x10\n\r\n\x05\x04)\x02\0\x05\x12\
    \x04\xd4\x02\x11\x17\n\r\n\x05\x04)\x02\0\x01\x12\x04\xd4\x02\x18\x1d\n\
    \r\n\x05\x04)\x02\0\x03\x12\x04\xd4\x02\x20!\n\x0c\n\x04\x04)\x02\x01\
    \x12\x04\xd5\x02\x08.\n\r\n\x05\x04)\x02\x01\x04\x12\x04\xd5\x02\x08\x10\
    \n\r\n\x05\x04)\x02\x01\x05\x12\x04\xd5\x02\x11\x17\n\r\n\x05\x04)\x02\
    \x01\x01\x12\x04\xd5\x02\x18)\n\r\n\x05\x04)\x02\x01\x03\x12\x04\xd5\x02\
    ,-\n\x0c\n\x02\x04*\x12\x06\xd8\x02\0\xda\x02\x01\n\x0b\n\x03\x04*\x01\
    \x12\x04\xd8\x02\x08.\n\x0c\n\x04\x04*\x02\0\x12\x04\xd9\x02\x089\n\r\n\
    \x05\x04*\x02\0\x04\x12\x04\xd9\x02\x08\x10\n\r\n\x05\x04*\x02\0\x06\x12\
    \x04\xd9\x02\x11,\n\r\n\x05\x04*\x02\0\x01\x12\x04\xd9\x02-4\n\r\n\x05\
    \x04*\x02\0\x03\x12\x04\xd9\x0278\n\x0c\n\x02\x06\0\x12\x06\xdc\x02\0\
    \x92\x03\x01\n\x0b\n\x03\x06\0\x01\x12\x04\xdc\x02\x08\x16\n\x0b\n\x03\
    \x06\0\x03\x12\x04\xdd\x02\x08@\n\x0e\n\x06\x06\0\x03\xd0\x86\x03\x12\
    \x04\xdd\x02\x08@\n\x0e\n\x04\x06\0\x02\0\x12\x06\xdf\x02\x08\xe1\x02\t\
    \n\r\n\x05\x06\0\x02\0\x01\x12\x04\xdf\x02\x0c#\n\r\n\x05\x06\0\x02\0\
    \x02\x12\x04\xdf\x02%U\n\x0e\n\x05\x06\0\x02\0\x03\x12\x05\xdf\x02`\x91\
    \x01\n\r\n\x05\x06\0\x02\0\x04\x12\x04\xe0\x02\x10|\n\x10\n\x08\x06\0\
    \x02\0\x04\xd0\x86\x03\x12\x04\xe0\x02\x10|\n\x0e\n\x04\x06\0\x02\x01\
    \x12\x06\xe3\x02\x08\xe5\x02\t\n\r\n\x05\x06\0\x02\x01\x01\x12\x04\xe3\
    \x02\x0c!\n\r\n\x05\x06\0\x02\x01\x02\x12\x04\xe3\x02#Q\n\x0e\n\x05\x06\
    \0\x02\x01\x03\x12\x05\xe3\x02\\\x8b\x01\n\r\n\x05\x06\0\x02\x01\x04\x12\
    \x04\xe4\x02\x10M\n\x10\n\x08\x06\0\x02\x01\x04\xd0\x86\x03\x12\x04\xe4\
    \x02\x10M\n\x0e\n\x04\x06\0\x02\x02\x12\x06\xe7\x02\x08\xe9\x02\t\n\r\n\
    \x05\x06\0\x02\x02\x01\x12\x04\xe7\x02\x0c*\n\r\n\x05\x06\0\x02\x02\x02\
    \x12\x04\xe7\x02,c\n\x0e\n\x05\x06\0\x02\x02\x03\x12\x05\xe7\x02n\xa6\
    \x01\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\xe8\x02\x10M\n\x10\n\x08\x06\0\
    \x02\x02\x04\xd0\x86\x03\x12\x04\xe8\x02\x10M\n\x0e\n\x04\x06\0\x02\x03\
    \x12\x06\xeb\x02\x08\xed\x02\t\n\r\n\x05\x06\0\x02\x03\x01\x12\x04\xeb\
    \x02\x0c!\n\r\n\x05\x06\0\x02\x03\x02\x12\x04\xeb\x02#Q\n\x0e\n\x05\x06\
    \0\x02\x03\x03\x12\x05\xeb\x02\\\x8b\x01\n\r\n\x05\x06\0\x02\x03\x04\x12\
    \x04\xec\x02\x10S\n\x10\n\x08\x06\0\x02\x03\x04\xd0\x86\x03\x12\x04\xec\
    \x02\x10S\n\x0e\n\x04\x06\0\x02\x04\x12\x06\xef\x02\x08\xf1\x02\t\n\r\n\
    \x05\x06\0\x02\x04\x01\x12\x04\xef\x02\x0c\x1e\n\r\n\x05\x06\0\x02\x04\
    \x02\x12\x04\xef\x02\x20K\n\x0e\n\x05\x06\0\x02\x04\x03\x12\x05\xef\x02V\
    \x82\x01\n\x0e\n\x05\x06\0\x02\x04\x04\x12\x05\xf0\x02\x10\x8a\x01\n\x11\
    \n\x08\x06\0\x02\x04\x04\xd0\x86\x03\x12\x05\xf0\x02\x10\x8a\x01\n\x0e\n\
    \x04\x06\0\x02\x05\x12\x06\xf3\x02\x08\xf5\x02\t\n\r\n\x05\x06\0\x02\x05\
    \x01\x12\x04\xf3\x02\x0c3\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\xf3\x025u\
    \n\x0f\n\x05\x06\0\x02\x05\x03\x12\x06\xf3\x02\x80\x01\xc1\x01\n\r\n\x05\
    \x06\0\x02\x05\x04\x12\x04\xf4\x02\x10a\n\x10\n\x08\x06\0\x02\x05\x04\
    \xd0\x86\x03\x12\x04\xf4\x02\x10a\n\x0e\n\x04\x06\0\x02\x06\x12\x06\xf7\
    \x02\x08\xf9\x02\t\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xf7\x02\x0c/\n\r\
    \n\x05\x06\0\x02\x06\x02\x12\x04\xf7\x021m\n\x0e\n\x05\x06\0\x02\x06\x03\
    \x12\x05\xf7\x02x\xb5\x01\n\r\n\x05\x06\0\x02\x06\x04\x12\x04\xf8\x02\
    \x10g\n\x10\n\x08\x06\0\x02\x06\x04\xd0\x86\x03\x12\x04\xf8\x02\x10g\n\
    \x0e\n\x04\x06\0\x02\x07\x12\x06\xfb\x02\x08\xfd\x02\t\n\r\n\x05\x06\0\
    \x02\x07\x01\x12\x04\xfb\x02\x0c%\n\r\n\x05\x06\0\x02\x07\x02\x12\x04\
    \xfb\x02'Z\n\x0e\n\x05\x06\0\x02\x07\x03\x12\x05\xfb\x02e\x99\x01\n\x0e\
    \n\x05\x06\0\x02\x07\x04\x12\x05\xfc\x02\x10\xa0\x01\n\x11\n\x08\x06\0\
    \x02\x07\x04\xd0\x86\x03\x12\x05\xfc\x02\x10\xa0\x01\n\x0e\n\x04\x06\0\
    \x02\x08\x12\x06\xff\x02\x08\x81\x03\t\n\r\n\x05\x06\0\x02\x08\x01\x12\
    \x04\xff\x02\x0c\x1b\n\r\n\x05\x06\0\x02\x08\x02\x12\x04\xff\x02\x1dL\n\
    \x0e\n\x05\x06\0\x02\x08\x03\x12\x05\xff\x02W\x87\x01\n\r\n\x05\x06\0\
    \x02\x08\x04\x12\x04\x80\x03\x10q\n\x10\n\x08\x06\0\x02\x08\x04\xd0\x86\
    \x03\x12\x04\x80\x03\x10q\n\x0e\n\x04\x06\0\x02\t\x12\x06\x83\x03\x08\
    \x85\x03\t\n\r\n\x05\x06\0\x02\t\x01\x12\x04\x83\x03\x0c%\n\r\n\x05\x06\
    \0\x02\t\x02\x12\x04\x83\x03'Y\n\x0e\n\x05\x06\0\x02\t\x03\x12\x05\x83\
    \x03d\x97\x01\n\r\n\x05\x06\0\x02\t\x04\x12\x04\x84\x03\x10}\n\x10\n\x08\
    \x06\0\x02\t\x04\xd0\x86\x03\x12\x04\x84\x03\x10}\n\x0e\n\x04\x06\0\x02\
    \n\x12\x06\x87\x03\x08\x89\x03\t\n\r\n\x05\x06\0\x02\n\x01\x12\x04\x87\
    \x03\x0c\x20\n\r\n\x05\x06\0\x02\n\x02\x12\x04\x87\x03\"O\n\x0e\n\x05\
    \x06\0\x02\n\x03\x12\x05\x87\x03Z\x88\x01\n\x0e\n\x05\x06\0\x02\n\x04\
    \x12\x05\x88\x03\x10\x9a\x01\n\x11\n\x08\x06\0\x02\n\x04\xd0\x86\x03\x12\
    \x05\x88\x03\x10\x9a\x01\n\x0e\n\x04\x06\0\x02\x0b\x12\x06\x8b\x03\x08\
    \x8d\x03\t\n\r\n\x05\x06\0\x02\x0b\x01\x12\x04\x8b\x03\x0c\x17\n\r\n\x05\
    \x06\0\x02\x0b\x02\x12\x04\x8b\x03\x19>\n\r\n\x05\x06\0\x02\x0b\x03\x12\
    \x04\x8b\x03Io\n\x0e\n\x05\x06\0\x02\x0b\x04\x12\x05\x8c\x03\x10\x8b\x01\
    \n\x11\n\x08\x06\0\x02\x0b\x04\xd0\x86\x03\x12\x05\x8c\x03\x10\x8b\x01\n\
    \x0e\n\x04\x06\0\x02\x0c\x12\x06\x8f\x03\x08\x91\x03\t\n\r\n\x05\x06\0\
    \x02\x0c\x01\x12\x04\x8f\x03\x0c\x1e\n\r\n\x05\x06\0\x02\x0c\x02\x12\x04\
    \x8f\x03\x20L\n\x0e\n\x05\x06\0\x02\x0c\x03\x12\x05\x8f\x03W\x84\x01\n\r\
    \n\x05\x06\0\x02\x0c\x04\x12\x04\x90\x03\x10X\n\x10\n\x08\x06\0\x02\x0c\
    \x04\xd0\x86\x03\x12\x04\x90\x03\x10X\n\x0c\n\x02\x06\x01\x12\x06\x94\
    \x03\0\xa6\x03\x01\n\x0b\n\x03\x06\x01\x01\x12\x04\x94\x03\x08\x1d\n\x0b\
    \n\x03\x06\x01\x03\x12\x04\x95\x03\x08H\n\x0e\n\x06\x06\x01\x03\xd0\x86\
    \x03\x12\x04\x95\x03\x08H\n\x0e\n\x04\x06\x01\x02\0\x12\x06\x97\x03\x08\
    \x99\x03\t\n\r\n\x05\x06\x01\x02\0\x01\x12\x04\x97\x03\x0c'\n\r\n\x05\
    \x06\x01\x02\0\x02\x12\x04\x97\x03)d\n\x0e\n\x05\x06\x01\x02\0\x03\x12\
    \x05\x97\x03o\xab\x01\n\r\n\x05\x06\x01\x02\0\x04\x12\x04\x98\x03\x10x\n\
    \x10\n\x08\x06\x01\x02\0\x04\xd0\x86\x03\x12\x04\x98\x03\x10x\n\x0e\n\
    \x04\x06\x01\x02\x01\x12\x06\x9b\x03\x08\x9d\x03\t\n\r\n\x05\x06\x01\x02\
    \x01\x01\x12\x04\x9b\x03\x0c!\n\r\n\x05\x06\x01\x02\x01\x02\x12\x04\x9b\
    \x03#X\n\x0e\n\x05\x06\x01\x02\x01\x03\x12\x05\x9b\x03c\x99\x01\n\r\n\
    \x05\x06\x01\x02\x01\x04\x12\x04\x9c\x03\x10x\n\x10\n\x08\x06\x01\x02\
    \x01\x04\xd0\x86\x03\x12\x04\x9c\x03\x10x\n\x0e\n\x04\x06\x01\x02\x02\
    \x12\x06\x9f\x03\x08\xa1\x03\t\n\r\n\x05\x06\x01\x02\x02\x01\x12\x04\x9f\
    \x03\x0c\x17\n\r\n\x05\x06\x01\x02\x02\x02\x12\x04\x9f\x03\x19D\n\r\n\
    \x05\x06\x01\x02\x02\x03\x12\x04\x9f\x03O{\n\r\n\x05\x06\x01\x02\x02\x04\
    \x12\x04\xa0\x03\x10L\n\x10\n\x08\x06\x01\x02\x02\x04\xd0\x86\x03\x12\
    \x04\xa0\x03\x10L\n\x0e\n\x04\x06\x01\x02\x03\x12\x06\xa3\x03\x08\xa5\
    \x03\t\n\r\n\x05\x06\x01\x02\x03\x01\x12\x04\xa3\x03\x0c\x1b\n\r\n\x05\
    \x06\x01\x02\x03\x02\x12\x04\xa3\x03\x1dL\n\x0e\n\x05\x06\x01\x02\x03\
    \x03\x12\x05\xa3\x03W\x87\x01\n\r\n\x05\x06\x01\x02\x03\x04\x12\x04\xa4\
    \x03\x10_\n\x10\n\x08\x06\x01\x02\x03\x04\xd0\x86\x03\x12\x04\xa4\x03\
    \x10_\n\x0c\n\x02\x06\x02\x12\x06\xa8\x03\0\xb2\x03\x01\n\x0b\n\x03\x06\
    \x02\x01\x12\x04\xa8\x03\x08\x13\n\x0b\n\x03\x06\x02\x03\x12\x04\xa9\x03\
    \x08S\n\x0e\n\x06\x06\x02\x03\xd0\x86\x03\x12\x04\xa9\x03\x08S\n\x0e\n\
    \x04\x06\x02\x02\0\x12\x06\xab\x03\x08\xad\x03\t\n\r\n\x05\x06\x02\x02\0\
    \x01\x12\x04\xab\x03\x0c\x17\n\r\n\x05\x06\x02\x02\0\x02\x12\x04\xab\x03\
    \x19:\n\r\n\x05\x06\x02\x02\0\x03\x12\x04\xab\x03Eg\n\r\n\x05\x06\x02\
    \x02\0\x04\x12\x04\xac\x03\x10b\n\x10\n\x08\x06\x02\x02\0\x04\xd0\x86\
    \x03\x12\x04\xac\x03\x10b\n\x0e\n\x04\x06\x02\x02\x01\x12\x06\xaf\x03\
    \x08\xb1\x03\t\n\r\n\x05\x06\x02\x02\x01\x01\x12\x04\xaf\x03\x0c\x1c\n\r\
    \n\x05\x06\x02\x02\x01\x02\x12\x04\xaf\x03\x1eD\n\r\n\x05\x06\x02\x02\
    \x01\x03\x12\x04\xaf\x03Ov\n\r\n\x05\x06\x02\x02\x01\x04\x12\x04\xb0\x03\
    \x10m\n\x10\n\x08\x06\x02\x02\x01\x04\xd0\x86\x03\x12\x04\xb0\x03\x10m\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
